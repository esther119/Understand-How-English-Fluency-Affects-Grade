Polls ID,Poll Responses Response,Assessment reports Hashtag,Assessment reports Score,time_stamp,tokenized_responses,stemmed_responses,clean_responses,string,LOs/ HCs,College,Course
88603,"def maximum_subarray(a):
    if len(a) == :
        raise ValueError
    # (begin, end, sum)
    answer = (, , a[])
    for i in range(len(a)):
        temp_sum = 
        for j in range(i, len(a)):
            temp_sum += a[j]
            if temp_sum > answer[]:
                answer = (i, j, temp_sum)
    return answer",#complexity,4,1774,"['def', 'maximum_subarray', 'a', 'if', 'len', 'a', 'raise', 'ValueError', 'begin', 'end', 'sum', 'answer', 'a', 'for', 'i', 'in', 'range', 'len', 'a', 'temp_sum', 'for', 'j', 'in', 'range', 'i', 'len', 'a', 'temp_sum', 'a', 'j', 'if', 'temp_sum', 'answer', 'answer', 'i', 'j', 'temp_sum', 'return', 'answer']","['def', 'maximum_subarray', 'a', 'if', 'len', 'a', 'rais', 'valueerror', 'begin', 'end', 'sum', 'answer', 'a', 'for', 'i', 'in', 'rang', 'len', 'a', 'temp_sum', 'for', 'j', 'in', 'rang', 'i', 'len', 'a', 'temp_sum', 'a', 'j', 'if', 'temp_sum', 'answer', 'answer', 'i', 'j', 'temp_sum', 'return', 'answer']","['def', 'maximum_subarray', 'len', 'rais', 'valueerror', 'begin', 'end', 'sum', 'answer', 'rang', 'len', 'temp_sum', 'j', 'rang', 'len', 'temp_sum', 'j', 'temp_sum', 'answer', 'answer', 'j', 'temp_sum', 'return', 'answer']",def maximum_subarray len rais valueerror begin end sum answer rang len temp_sum j rang len temp_sum j temp_sum answer answer j temp_sum return answer,complexity,CS,CS142
88603,"def bruteforce_Max(array):
for i in (array):
if i == j in dictionary:
i=j
else:
bruteforce_Max(Array/)",#complexity,2,1774,"['def', 'bruteforce_Max', 'array', 'for', 'i', 'in', 'array', 'if', 'i', 'j', 'in', 'dictionary', 'i', 'j', 'else', 'bruteforce_Max', 'Array']","['def', 'bruteforce_max', 'array', 'for', 'i', 'in', 'array', 'if', 'i', 'j', 'in', 'dictionari', 'i', 'j', 'els', 'bruteforce_max', 'array']","['def', 'bruteforce_max', 'array', 'array', 'j', 'dictionari', 'j', 'els', 'bruteforce_max', 'array']",def bruteforce_max array array j dictionari j els bruteforce_max array,complexity,CS,CS142
90359,"def incremental_max_subarray(x,mx):
    maximum = mx
    z = -
    while True:
        if sum(x[z-:-]) > maximum: maximum = sum(x[z-:-])
        z = z -  
        if z*(-) == len(x): break
    return maximum",#complexity,3,1889,"['def', 'incremental_max_subarray', 'x', 'mx', 'maximum', 'mx', 'z', 'while', 'True', 'if', 'sum', 'x', 'z', 'maximum', 'maximum', 'sum', 'x', 'z', 'z', 'z', 'if', 'z', 'len', 'x', 'break', 'return', 'maximum']","['def', 'incremental_max_subarray', 'x', 'mx', 'maximum', 'mx', 'z', 'while', 'true', 'if', 'sum', 'x', 'z', 'maximum', 'maximum', 'sum', 'x', 'z', 'z', 'z', 'if', 'z', 'len', 'x', 'break', 'return', 'maximum']","['def', 'incremental_max_subarray', 'x', 'mx', 'maximum', 'mx', 'z', 'true', 'sum', 'x', 'z', 'maximum', 'maximum', 'sum', 'x', 'z', 'z', 'z', 'z', 'len', 'x', 'break', 'return', 'maximum']",def incremental_max_subarray x mx maximum mx z true sum x z maximum maximum sum x z z z z len x break return maximum,complexity,CS,CS142
90359,"#incremental dint work
def max_crossing_subarray(a,low,mid,high):
    leftSum = float('-inf')
    sum =     
    for i in range(mid,low):
        sum += a[i]
        if(sum >leftSum):
            leftSum = sum
            maxLeft = i  
    rightSum = float('-inf')
    sum =     
    for j in range(mid + ,high):
        sum += a[j]
        if(sum > rightSum):
            rightSum = sum
            maxRight = j    
    return(maxLeft, maxRight,leftSum+rightSum)
def max_subarray(a, low, high):
    if(high == low):
        return(low, high, a[low])
    else:
        mid = ((low + high)/)...",#complexity,1,1889,"['incremental', 'dint', 'work', 'def', 'max_crossing_subarray', 'a', 'low', 'mid', 'high', 'leftSum', 'float', ""'"", ""inf'"", 'sum', 'for', 'i', 'in', 'range', 'mid', 'low', 'sum', 'a', 'i', 'if', 'sum', 'leftSum', 'leftSum', 'sum', 'maxLeft', 'i', 'rightSum', 'float', ""'"", ""inf'"", 'sum', 'for', 'j', 'in', 'range', 'mid', 'high', 'sum', 'a', 'j', 'if', 'sum', 'rightSum', 'rightSum', 'sum', 'maxRight', 'j', 'return', 'maxLeft', 'maxRight', 'leftSum', 'rightSum', 'def', 'max_subarray', 'a', 'low', 'high', 'if', 'high', 'low', 'return', 'low', 'high', 'a', 'low', 'else', 'mid', 'low', 'high']","['increment', 'dint', 'work', 'def', 'max_crossing_subarray', 'a', 'low', 'mid', 'high', 'leftsum', 'float', ""'"", 'inf', 'sum', 'for', 'i', 'in', 'rang', 'mid', 'low', 'sum', 'a', 'i', 'if', 'sum', 'leftsum', 'leftsum', 'sum', 'maxleft', 'i', 'rightsum', 'float', ""'"", 'inf', 'sum', 'for', 'j', 'in', 'rang', 'mid', 'high', 'sum', 'a', 'j', 'if', 'sum', 'rightsum', 'rightsum', 'sum', 'maxright', 'j', 'return', 'maxleft', 'maxright', 'leftsum', 'rightsum', 'def', 'max_subarray', 'a', 'low', 'high', 'if', 'high', 'low', 'return', 'low', 'high', 'a', 'low', 'els', 'mid', 'low', 'high']","['increment', 'dint', 'work', 'def', 'max_crossing_subarray', 'low', 'mid', 'high', 'leftsum', 'float', ""'"", 'inf', 'sum', 'rang', 'mid', 'low', 'sum', 'sum', 'leftsum', 'leftsum', 'sum', 'maxleft', 'rightsum', 'float', ""'"", 'inf', 'sum', 'j', 'rang', 'mid', 'high', 'sum', 'j', 'sum', 'rightsum', 'rightsum', 'sum', 'maxright', 'j', 'return', 'maxleft', 'maxright', 'leftsum', 'rightsum', 'def', 'max_subarray', 'low', 'high', 'high', 'low', 'return', 'low', 'high', 'low', 'els', 'mid', 'low', 'high']",increment dint work def max_crossing_subarray low mid high leftsum float ' inf sum rang mid low sum sum leftsum leftsum sum maxleft rightsum float ' inf sum j rang mid high sum j sum rightsum rightsum sum maxright j return maxleft maxright leftsum rightsum def max_subarray low high high low return low high low els mid low high,complexity,CS,CS142
90367,"def incremental_max_subarray(x, mx):
    max_sum, startIndex, endIndex = max_subarray(x[:-])
    if endIndex + max_sum > max_sum:
        return end_Index + max_sum
    else:
        return max_sum
    
    
def max_subarray(x):
    bestSoFar = 
    bestNow = 
    bestStartIndexSoFar = -
    bestStopIndexSoFar = -
    bestStartIndexNow = -
    for i in range(len(x)):
        value = bestNow + x[i]
        if value > :
            if bestNow == :
                bestStartIndexNow = i
            bestNow = value
        else:
            bestNow = 

        if bestNow > bestSoFar:",#complexity,2,1892,"['def', 'incremental_max_subarray', 'x', 'mx', 'max_sum', 'startIndex', 'endIndex', 'max_subarray', 'x', 'if', 'endIndex', 'max_sum', 'max_sum', 'return', 'end_Index', 'max_sum', 'else', 'return', 'max_sum', 'def', 'max_subarray', 'x', 'bestSoFar', 'bestNow', 'bestStartIndexSoFar', 'bestStopIndexSoFar', 'bestStartIndexNow', 'for', 'i', 'in', 'range', 'len', 'x', 'value', 'bestNow', 'x', 'i', 'if', 'value', 'if', 'bestNow', 'bestStartIndexNow', 'i', 'bestNow', 'value', 'else', 'bestNow', 'if', 'bestNow', 'bestSoFar']","['def', 'incremental_max_subarray', 'x', 'mx', 'max_sum', 'startindex', 'endindex', 'max_subarray', 'x', 'if', 'endindex', 'max_sum', 'max_sum', 'return', 'end_index', 'max_sum', 'els', 'return', 'max_sum', 'def', 'max_subarray', 'x', 'bestsofar', 'bestnow', 'beststartindexsofar', 'beststopindexsofar', 'beststartindexnow', 'for', 'i', 'in', 'rang', 'len', 'x', 'valu', 'bestnow', 'x', 'i', 'if', 'valu', 'if', 'bestnow', 'beststartindexnow', 'i', 'bestnow', 'valu', 'els', 'bestnow', 'if', 'bestnow', 'bestsofar']","['def', 'incremental_max_subarray', 'x', 'mx', 'max_sum', 'startindex', 'endindex', 'max_subarray', 'x', 'endindex', 'max_sum', 'max_sum', 'return', 'end_index', 'max_sum', 'els', 'return', 'max_sum', 'def', 'max_subarray', 'x', 'bestsofar', 'bestnow', 'beststartindexsofar', 'beststopindexsofar', 'beststartindexnow', 'rang', 'len', 'x', 'valu', 'bestnow', 'x', 'valu', 'bestnow', 'beststartindexnow', 'bestnow', 'valu', 'els', 'bestnow', 'bestnow', 'bestsofar']",def incremental_max_subarray x mx max_sum startindex endindex max_subarray x endindex max_sum max_sum return end_index max_sum els return max_sum def max_subarray x bestsofar bestnow beststartindexsofar beststopindexsofar beststartindexnow rang len x valu bestnow x valu bestnow beststartindexnow bestnow valu els bestnow bestnow bestsofar,complexity,CS,CS142
90367,"I was bored, so I wrote a completely recursive max_subarray function! (If x,mx are given then it computes the next step; otherwise calculates mx recursively from scratch)
def incremental_max_subarray(x, mx=(,)):
    if len(x) == :
        return x, , 
    old_x, start, end = incremental_max_subarray(x[:-], mx)
    if sum(x) > sum(x[start:end+]):
        end = len(x) - 
    return x, start, end",#complexity,3,1892,"['I', 'was', 'bored', 'so', 'I', 'wrote', 'a', 'completely', 'recursive', 'max_subarray', 'function', 'If', 'x', 'mx', 'are', 'given', 'then', 'it', 'computes', 'the', 'next', 'step', 'otherwise', 'calculates', 'mx', 'recursively', 'from', 'scratch', 'def', 'incremental_max_subarray', 'x', 'mx', 'if', 'len', 'x', 'return', 'x', 'old_x', 'start', 'end', 'incremental_max_subarray', 'x', 'mx', 'if', 'sum', 'x', 'sum', 'x', 'start', 'end', 'end', 'len', 'x', 'return', 'x', 'start', 'end']","['i', 'was', 'bore', 'so', 'i', 'wrote', 'a', 'complet', 'recurs', 'max_subarray', 'function', 'if', 'x', 'mx', 'are', 'given', 'then', 'it', 'comput', 'the', 'next', 'step', 'otherwis', 'calcul', 'mx', 'recurs', 'from', 'scratch', 'def', 'incremental_max_subarray', 'x', 'mx', 'if', 'len', 'x', 'return', 'x', 'old_x', 'start', 'end', 'incremental_max_subarray', 'x', 'mx', 'if', 'sum', 'x', 'sum', 'x', 'start', 'end', 'end', 'len', 'x', 'return', 'x', 'start', 'end']","['bore', 'wrote', 'complet', 'recurs', 'max_subarray', 'function', 'x', 'mx', 'given', 'comput', 'next', 'step', 'otherwis', 'calcul', 'mx', 'recurs', 'scratch', 'def', 'incremental_max_subarray', 'x', 'mx', 'len', 'x', 'return', 'x', 'old_x', 'start', 'end', 'incremental_max_subarray', 'x', 'mx', 'sum', 'x', 'sum', 'x', 'start', 'end', 'end', 'len', 'x', 'return', 'x', 'start', 'end']",bore wrote complet recurs max_subarray function x mx given comput next step otherwis calcul mx recurs scratch def incremental_max_subarray x mx len x return x old_x start end incremental_max_subarray x mx sum x sum x start end end len x return x start end,complexity,CS,CS142
90367,"def maxSubarray(A,low,high):
    if high == low:
        return(low,high,A[low])
    else: 
        mid = int((low+high)/)
        left = maxSubarray(A,low,mid)
        leftLow = left[]
        leftHigh = left[]
        leftSum = left[]
        right = maxSubarray(A,mid+,high)
        rightLow = right[]
        rightHigh = right[]
        rightSum = right[]
        cross = maxCrossingSubarray(A,low,mid,high)
        crossLow = cross[]
        crossHigh = cross[]
        crossSum = cross[]
it doesn't fit but here's part of mine (it also didn't run and i was ruined by this preclass)",#complexity,2,1892,"['def', 'maxSubarray', 'A', 'low', 'high', 'if', 'high', 'low', 'return', 'low', 'high', 'A', 'low', 'else', 'mid', 'int', 'low', 'high', 'left', 'maxSubarray', 'A', 'low', 'mid', 'leftLow', 'left', 'leftHigh', 'left', 'leftSum', 'left', 'right', 'maxSubarray', 'A', 'mid', 'high', 'rightLow', 'right', 'rightHigh', 'right', 'rightSum', 'right', 'cross', 'maxCrossingSubarray', 'A', 'low', 'mid', 'high', 'crossLow', 'cross', 'crossHigh', 'cross', 'crossSum', 'cross', 'it', ""doesn't"", 'fit', 'but', ""here's"", 'part', 'of', 'mine', 'it', 'also', ""didn't"", 'run', 'and', 'i', 'was', 'ruined', 'by', 'this', 'preclass']","['def', 'maxsubarray', 'a', 'low', 'high', 'if', 'high', 'low', 'return', 'low', 'high', 'a', 'low', 'els', 'mid', 'int', 'low', 'high', 'left', 'maxsubarray', 'a', 'low', 'mid', 'leftlow', 'left', 'lefthigh', 'left', 'leftsum', 'left', 'right', 'maxsubarray', 'a', 'mid', 'high', 'rightlow', 'right', 'righthigh', 'right', 'rightsum', 'right', 'cross', 'maxcrossingsubarray', 'a', 'low', 'mid', 'high', 'crosslow', 'cross', 'crosshigh', 'cross', 'crosssum', 'cross', 'it', ""doesn't"", 'fit', 'but', 'here', 'part', 'of', 'mine', 'it', 'also', ""didn't"", 'run', 'and', 'i', 'was', 'ruin', 'by', 'this', 'preclass']","['def', 'maxsubarray', 'low', 'high', 'high', 'low', 'return', 'low', 'high', 'low', 'els', 'mid', 'int', 'low', 'high', 'left', 'maxsubarray', 'low', 'mid', 'leftlow', 'left', 'lefthigh', 'left', 'leftsum', 'left', 'right', 'maxsubarray', 'mid', 'high', 'rightlow', 'right', 'righthigh', 'right', 'rightsum', 'right', 'cross', 'maxcrossingsubarray', 'low', 'mid', 'high', 'crosslow', 'cross', 'crosshigh', 'cross', 'crosssum', 'cross', 'fit', 'part', 'mine', 'run', 'ruin', 'preclass']",def maxsubarray low high high low return low high low els mid int low high left maxsubarray low mid leftlow left lefthigh left leftsum left right maxsubarray mid high rightlow right righthigh right rightsum right cross maxcrossingsubarray low mid high crosslow cross crosshigh cross crosssum cross fit part mine run ruin preclass,complexity,CS,CS142
90367,"def max_subarray(myList):
    if len(myList) == :
        print(""Array empty"")  # should be non-empty

    newSum = maxSum = myList[]
    start= finish= i = 

    for j in range(, len(myList)):
        if myList[j] > (newSum + myList[j]):
            newSum = myList[j]
            i = j
        else:
            newSum += myList[j]

        if newSum > maxSum:
            maxSum = newSum
            start = i
            finish = j

    print ""maxSum =>"", maxSum
    print ""start =>"", start, ""; finish =>"", finish",#complexity,1,1892,"['def', 'max_subarray', 'myList', 'if', 'len', 'myList', 'print', 'Array', 'empty', 'should', 'be', 'non', 'empty', 'newSum', 'maxSum', 'myList', 'start', 'finish', 'i', 'for', 'j', 'in', 'range', 'len', 'myList', 'if', 'myList', 'j', 'newSum', 'myList', 'j', 'newSum', 'myList', 'j', 'i', 'j', 'else', 'newSum', 'myList', 'j', 'if', 'newSum', 'maxSum', 'maxSum', 'newSum', 'start', 'i', 'finish', 'j', 'print', 'maxSum', 'maxSum', 'print', 'start', 'start', 'finish', 'finish']","['def', 'max_subarray', 'mylist', 'if', 'len', 'mylist', 'print', 'array', 'empti', 'should', 'be', 'non', 'empti', 'newsum', 'maxsum', 'mylist', 'start', 'finish', 'i', 'for', 'j', 'in', 'rang', 'len', 'mylist', 'if', 'mylist', 'j', 'newsum', 'mylist', 'j', 'newsum', 'mylist', 'j', 'i', 'j', 'els', 'newsum', 'mylist', 'j', 'if', 'newsum', 'maxsum', 'maxsum', 'newsum', 'start', 'i', 'finish', 'j', 'print', 'maxsum', 'maxsum', 'print', 'start', 'start', 'finish', 'finish']","['def', 'max_subarray', 'mylist', 'len', 'mylist', 'print', 'array', 'empti', 'non', 'empti', 'newsum', 'maxsum', 'mylist', 'start', 'finish', 'j', 'rang', 'len', 'mylist', 'mylist', 'j', 'newsum', 'mylist', 'j', 'newsum', 'mylist', 'j', 'j', 'els', 'newsum', 'mylist', 'j', 'newsum', 'maxsum', 'maxsum', 'newsum', 'start', 'finish', 'j', 'print', 'maxsum', 'maxsum', 'print', 'start', 'start', 'finish', 'finish']",def max_subarray mylist len mylist print array empti non empti newsum maxsum mylist start finish j rang len mylist mylist j newsum mylist j newsum mylist j j els newsum mylist j newsum maxsum maxsum newsum start finish j print maxsum maxsum print start start finish finish,complexity,CS,CS142
90373,"Given f() =  and f(n) = f(n-). We have f(n) = f([n/])^*f() if n is odd and f(n) = f(n/)^ if n is even. Thus we can calculate that f(n) = ^(n-)*f() in O(log n) time. 
def f(n):
if n == : return 
elif (n mod ) == : return f(n) = f(n/)*
else: return f(n) = f([n/])**f()

If we want an algorithm in linear time, we have:
def f(n):
if n == : return 
else return *f(n-)",#complexity,3,1894,"['Given', 'f', 'and', 'f', 'n', 'f', 'n', 'We', 'have', 'f', 'n', 'f', 'n', 'f', 'if', 'n', 'is', 'odd', 'and', 'f', 'n', 'f', 'n', 'if', 'n', 'is', 'even', 'Thus', 'we', 'can', 'calculate', 'that', 'f', 'n', 'n', 'f', 'in', 'O', 'log', 'n', 'time', 'def', 'f', 'n', 'if', 'n', 'return', 'elif', 'n', 'mod', 'return', 'f', 'n', 'f', 'n', 'else', 'return', 'f', 'n', 'f', 'n', 'f', 'If', 'we', 'want', 'an', 'algorithm', 'in', 'linear', 'time', 'we', 'have', 'def', 'f', 'n', 'if', 'n', 'return', 'else', 'return', 'f', 'n']","['given', 'f', 'and', 'f', 'n', 'f', 'n', 'we', 'have', 'f', 'n', 'f', 'n', 'f', 'if', 'n', 'is', 'odd', 'and', 'f', 'n', 'f', 'n', 'if', 'n', 'is', 'even', 'thus', 'we', 'can', 'calcul', 'that', 'f', 'n', 'n', 'f', 'in', 'o', 'log', 'n', 'time', 'def', 'f', 'n', 'if', 'n', 'return', 'elif', 'n', 'mod', 'return', 'f', 'n', 'f', 'n', 'els', 'return', 'f', 'n', 'f', 'n', 'f', 'if', 'we', 'want', 'an', 'algorithm', 'in', 'linear', 'time', 'we', 'have', 'def', 'f', 'n', 'if', 'n', 'return', 'els', 'return', 'f', 'n']","['given', 'f', 'f', 'n', 'f', 'n', 'f', 'n', 'f', 'n', 'f', 'n', 'odd', 'f', 'n', 'f', 'n', 'n', 'even', 'thus', 'calcul', 'f', 'n', 'n', 'f', 'log', 'n', 'time', 'def', 'f', 'n', 'n', 'return', 'elif', 'n', 'mod', 'return', 'f', 'n', 'f', 'n', 'els', 'return', 'f', 'n', 'f', 'n', 'f', 'want', 'algorithm', 'linear', 'time', 'def', 'f', 'n', 'n', 'return', 'els', 'return', 'f', 'n']",given f f n f n f n f n f n odd f n f n n even thus calcul f n n f log n time def f n n return elif n mod return f n f n els return f n f n f want algorithm linear time def f n n return els return f n,complexity,CS,CS142
96453,"def fib(n):
    if n <= :
        return 
    if n == :
        return 
    return fib(n-) + fib(n-)

import time
start = time.time()
print fib()
end = time.time()
print ""Time Taken {}"".format(end - start)

I used time.time() function to find the start and end time. And calculated the time taken by subtracting the start and end time.
Fib() took . seconds in Online REPL IDE. My laptop could not give me answer to this evaluation, however when I ran on the online server, it gave me the answer due to its huge computing resources.",#complexity,2,2674,"['def', 'fib', 'n', 'if', 'n', 'return', 'if', 'n', 'return', 'return', 'fib', 'n', 'fib', 'n', 'import', 'time', 'start', 'time', 'time', 'print', 'fib', 'end', 'time', 'time', 'print', 'Time', 'Taken', 'format', 'end', 'start', 'I', 'used', 'time', 'time', 'function', 'to', 'find', 'the', 'start', 'and', 'end', 'time', 'And', 'calculated', 'the', 'time', 'taken', 'by', 'subtracting', 'the', 'start', 'and', 'end', 'time', 'Fib', 'took', 'seconds', 'in', 'Online', 'REPL', 'IDE', 'My', 'laptop', 'could', 'not', 'give', 'me', 'answer', 'to', 'this', 'evaluation', 'however', 'when', 'I', 'ran', 'on', 'the', 'online', 'server', 'it', 'gave', 'me', 'the', 'answer', 'due', 'to', 'its', 'huge', 'computing', 'resources']","['def', 'fib', 'n', 'if', 'n', 'return', 'if', 'n', 'return', 'return', 'fib', 'n', 'fib', 'n', 'import', 'time', 'start', 'time', 'time', 'print', 'fib', 'end', 'time', 'time', 'print', 'time', 'taken', 'format', 'end', 'start', 'i', 'use', 'time', 'time', 'function', 'to', 'find', 'the', 'start', 'and', 'end', 'time', 'and', 'calcul', 'the', 'time', 'taken', 'by', 'subtract', 'the', 'start', 'and', 'end', 'time', 'fib', 'took', 'second', 'in', 'onlin', 'repl', 'ide', 'my', 'laptop', 'could', 'not', 'give', 'me', 'answer', 'to', 'this', 'evalu', 'howev', 'when', 'i', 'ran', 'on', 'the', 'onlin', 'server', 'it', 'gave', 'me', 'the', 'answer', 'due', 'to', 'it', 'huge', 'comput', 'resourc']","['def', 'fib', 'n', 'n', 'return', 'n', 'return', 'return', 'fib', 'n', 'fib', 'n', 'import', 'time', 'start', 'time', 'time', 'print', 'fib', 'end', 'time', 'time', 'print', 'time', 'taken', 'format', 'end', 'start', 'time', 'time', 'function', 'find', 'start', 'end', 'time', 'calcul', 'time', 'taken', 'subtract', 'start', 'end', 'time', 'fib', 'took', 'second', 'onlin', 'repl', 'ide', 'laptop', 'give', 'answer', 'evalu', 'howev', 'ran', 'onlin', 'server', 'gave', 'answer', 'due', 'huge', 'comput', 'resourc']",def fib n n return n return return fib n fib n import time start time time print fib end time time print time taken format end start time time function find start end time calcul time taken subtract start end time fib took second onlin repl ide laptop give answer evalu howev ran onlin server gave answer due huge comput resourc,complexity,CS,CS142
96458,"One could find this number by measuring the time it takes to run the algorithm. I intended to evaluate fib() using the following code you see in the bottom. However, for some reason both cocalc and my ipython notebook is not working (have tried  several times leaing up to this class). One could get at this answer by finding the recurse relation and then calculate how many times the function would be called. 

import time

def fib(n): 
    if n <= : 
        return  
    if n == : 
        return  
    return fib(n-) + fib(n-)

start = time.time()
fib()
print(time.time()-start)",#complexity,2,2677,"['One', 'could', 'find', 'this', 'number', 'by', 'measuring', 'the', 'time', 'it', 'takes', 'to', 'run', 'the', 'algorithm', 'I', 'intended', 'to', 'evaluate', 'fib', 'using', 'the', 'following', 'code', 'you', 'see', 'in', 'the', 'bottom', 'However', 'for', 'some', 'reason', 'both', 'cocalc', 'and', 'my', 'ipython', 'notebook', 'is', 'not', 'working', 'have', 'tried', 'several', 'times', 'leaing', 'up', 'to', 'this', 'class', 'One', 'could', 'get', 'at', 'this', 'answer', 'by', 'finding', 'the', 'recurse', 'relation', 'and', 'then', 'calculate', 'how', 'many', 'times', 'the', 'function', 'would', 'be', 'called', 'import', 'time', 'def', 'fib', 'n', 'if', 'n', 'return', 'if', 'n', 'return', 'return', 'fib', 'n', 'fib', 'n', 'start', 'time', 'time', 'fib', 'print', 'time', 'time', 'start']","['one', 'could', 'find', 'this', 'number', 'by', 'measur', 'the', 'time', 'it', 'take', 'to', 'run', 'the', 'algorithm', 'i', 'intend', 'to', 'evalu', 'fib', 'use', 'the', 'follow', 'code', 'you', 'see', 'in', 'the', 'bottom', 'howev', 'for', 'some', 'reason', 'both', 'cocalc', 'and', 'my', 'ipython', 'notebook', 'is', 'not', 'work', 'have', 'tri', 'sever', 'time', 'lea', 'up', 'to', 'this', 'class', 'one', 'could', 'get', 'at', 'this', 'answer', 'by', 'find', 'the', 'recurs', 'relat', 'and', 'then', 'calcul', 'how', 'mani', 'time', 'the', 'function', 'would', 'be', 'call', 'import', 'time', 'def', 'fib', 'n', 'if', 'n', 'return', 'if', 'n', 'return', 'return', 'fib', 'n', 'fib', 'n', 'start', 'time', 'time', 'fib', 'print', 'time', 'time', 'start']","['one', 'find', 'number', 'measur', 'time', 'take', 'run', 'algorithm', 'intend', 'evalu', 'fib', 'follow', 'code', 'see', 'bottom', 'howev', 'reason', 'cocalc', 'ipython', 'notebook', 'work', 'tri', 'sever', 'time', 'lea', 'class', 'one', 'get', 'answer', 'find', 'recurs', 'relat', 'calcul', 'mani', 'time', 'function', 'call', 'import', 'time', 'def', 'fib', 'n', 'n', 'return', 'n', 'return', 'return', 'fib', 'n', 'fib', 'n', 'start', 'time', 'time', 'fib', 'print', 'time', 'time', 'start']",one find number measur time take run algorithm intend evalu fib follow code see bottom howev reason cocalc ipython notebook work tri sever time lea class one get answer find recurs relat calcul mani time function call import time def fib n n return n return return fib n fib n start time time fib print time time start,complexity,CS,CS142
143106,"I had troubles with this one because it seemed like there was an infinite loop as the algorithm was going for > mins and I was not sure ho to fix it. Below is the code copied from the pre-class problem. 
def fib(n):
    if (n <= ): 
        return  
    if (n == ): 
        return  
    return fib(n-) + fib(n-)",#complexity,2,7113,"['I', 'had', 'troubles', 'with', 'this', 'one', 'because', 'it', 'seemed', 'like', 'there', 'was', 'an', 'infinite', 'loop', 'as', 'the', 'algorithm', 'was', 'going', 'for', 'mins', 'and', 'I', 'was', 'not', 'sure', 'ho', 'to', 'fix', 'it', 'Below', 'is', 'the', 'code', 'copied', 'from', 'the', 'pre', 'class', 'problem', 'def', 'fib', 'n', 'if', 'n', 'return', 'if', 'n', 'return', 'return', 'fib', 'n', 'fib', 'n']","['i', 'had', 'troubl', 'with', 'this', 'one', 'becaus', 'it', 'seem', 'like', 'there', 'was', 'an', 'infinit', 'loop', 'as', 'the', 'algorithm', 'was', 'go', 'for', 'min', 'and', 'i', 'was', 'not', 'sure', 'ho', 'to', 'fix', 'it', 'below', 'is', 'the', 'code', 'copi', 'from', 'the', 'pre', 'class', 'problem', 'def', 'fib', 'n', 'if', 'n', 'return', 'if', 'n', 'return', 'return', 'fib', 'n', 'fib', 'n']","['troubl', 'one', 'becaus', 'seem', 'like', 'infinit', 'loop', 'algorithm', 'go', 'min', 'sure', 'ho', 'fix', 'code', 'copi', 'pre', 'class', 'problem', 'def', 'fib', 'n', 'n', 'return', 'n', 'return', 'return', 'fib', 'n', 'fib', 'n']",troubl one becaus seem like infinit loop algorithm go min sure ho fix code copi pre class problem def fib n n return n return return fib n fib n,complexity,CS,CS142
143106,My computer wasn't able to run fib() and it says maximum recursion depth exceeded. The recurrence relation of fib() is T(n) = T(n-) + T(n-) + theta(). The function ^n satisfies this equation and thus the time complexity of fib() is O(^n). I made my guess as ^n because T(n) = T(n-) + T(n-) < T(n-) + T(n-) = *T(n-)   = **T(n-)= ^i*T(n-i) ==> O(^n,#complexity,4,7113,"['My', 'computer', ""wasn't"", 'able', 'to', 'run', 'fib', 'and', 'it', 'says', 'maximum', 'recursion', 'depth', 'exceeded', 'The', 'recurrence', 'relation', 'of', 'fib', 'is', 'T', 'n', 'T', 'n', 'T', 'n', 'theta', 'The', 'function', 'n', 'satisfies', 'this', 'equation', 'and', 'thus', 'the', 'time', 'complexity', 'of', 'fib', 'is', 'O', 'n', 'I', 'made', 'my', 'guess', 'as', 'n', 'because', 'T', 'n', 'T', 'n', 'T', 'n', 'T', 'n', 'T', 'n', 'T', 'n', 'T', 'n', 'i', 'T', 'n', 'i', 'O', 'n']","['my', 'comput', ""wasn't"", 'abl', 'to', 'run', 'fib', 'and', 'it', 'say', 'maximum', 'recurs', 'depth', 'exceed', 'the', 'recurr', 'relat', 'of', 'fib', 'is', 't', 'n', 't', 'n', 't', 'n', 'theta', 'the', 'function', 'n', 'satisfi', 'this', 'equat', 'and', 'thus', 'the', 'time', 'complex', 'of', 'fib', 'is', 'o', 'n', 'i', 'made', 'my', 'guess', 'as', 'n', 'becaus', 't', 'n', 't', 'n', 't', 'n', 't', 'n', 't', 'n', 't', 'n', 't', 'n', 'i', 't', 'n', 'i', 'o', 'n']","['comput', 'abl', 'run', 'fib', 'say', 'maximum', 'recurs', 'depth', 'exceed', 'recurr', 'relat', 'fib', 'n', 'n', 'n', 'theta', 'function', 'n', 'satisfi', 'equat', 'thus', 'time', 'complex', 'fib', 'n', 'made', 'guess', 'n', 'becaus', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n']",comput abl run fib say maximum recurs depth exceed recurr relat fib n n n theta function n satisfi equat thus time complex fib n made guess n becaus n n n n n n n n n,complexity,CS,CS142
143106,"import time
def fib(n): 
    if n <= : 
        return  
    if n == : 
        return 
    else:
        return fib(n-) + fib(n-)

start = time.clock()
fib()
end = time.clock()
print str(end - start)

I used this code but my code got stuck and didn't seem to work. I tried but couldn't proceed further so I didn't reach the final answer.Theoretically, all the numbers will keep splitting into their two predecessors until all of them reach n= for which the value is . It will be like a max heap whose time complexity would be O(n^).",#complexity,2,7113,"['import', 'time', 'def', 'fib', 'n', 'if', 'n', 'return', 'if', 'n', 'return', 'else', 'return', 'fib', 'n', 'fib', 'n', 'start', 'time', 'clock', 'fib', 'end', 'time', 'clock', 'print', 'str', 'end', 'start', 'I', 'used', 'this', 'code', 'but', 'my', 'code', 'got', 'stuck', 'and', ""didn't"", 'seem', 'to', 'work', 'I', 'tried', 'but', ""couldn't"", 'proceed', 'further', 'so', 'I', ""didn't"", 'reach', 'the', 'final', 'answer', 'Theoretically', 'all', 'the', 'numbers', 'will', 'keep', 'splitting', 'into', 'their', 'two', 'predecessors', 'until', 'all', 'of', 'them', 'reach', 'n', 'for', 'which', 'the', 'value', 'is', 'It', 'will', 'be', 'like', 'a', 'max', 'heap', 'whose', 'time', 'complexity', 'would', 'be', 'O', 'n']","['import', 'time', 'def', 'fib', 'n', 'if', 'n', 'return', 'if', 'n', 'return', 'els', 'return', 'fib', 'n', 'fib', 'n', 'start', 'time', 'clock', 'fib', 'end', 'time', 'clock', 'print', 'str', 'end', 'start', 'i', 'use', 'this', 'code', 'but', 'my', 'code', 'got', 'stuck', 'and', ""didn't"", 'seem', 'to', 'work', 'i', 'tri', 'but', ""couldn't"", 'proceed', 'further', 'so', 'i', ""didn't"", 'reach', 'the', 'final', 'answer', 'theoret', 'all', 'the', 'number', 'will', 'keep', 'split', 'into', 'their', 'two', 'predecessor', 'until', 'all', 'of', 'them', 'reach', 'n', 'for', 'which', 'the', 'valu', 'is', 'it', 'will', 'be', 'like', 'a', 'max', 'heap', 'whose', 'time', 'complex', 'would', 'be', 'o', 'n']","['import', 'time', 'def', 'fib', 'n', 'n', 'return', 'n', 'return', 'els', 'return', 'fib', 'n', 'fib', 'n', 'start', 'time', 'clock', 'fib', 'end', 'time', 'clock', 'print', 'str', 'end', 'start', 'code', 'code', 'got', 'stuck', 'seem', 'work', 'tri', 'proceed', 'reach', 'final', 'answer', 'theoret', 'number', 'keep', 'split', 'two', 'predecessor', 'reach', 'n', 'valu', 'like', 'max', 'heap', 'whose', 'time', 'complex', 'n']",import time def fib n n return n return els return fib n fib n start time clock fib end time clock print str end start code code got stuck seem work tri proceed reach final answer theoret number keep split two predecessor reach n valu like max heap whose time complex n,complexity,CS,CS142
143106,"This is the code I used for the fib(): def fib(n):
if n <= :
return  
if n == :
return 
return fib(n-) + fib(n-)
n=. But I did not got the empirical answer from running the code. In theory, it should take T(n)= O(n^)",#complexity,2,7113,"['This', 'is', 'the', 'code', 'I', 'used', 'for', 'the', 'fib', 'def', 'fib', 'n', 'if', 'n', 'return', 'if', 'n', 'return', 'return', 'fib', 'n', 'fib', 'n', 'n', 'But', 'I', 'did', 'not', 'got', 'the', 'empirical', 'answer', 'from', 'running', 'the', 'code', 'In', 'theory', 'it', 'should', 'take', 'T', 'n', 'O', 'n']","['this', 'is', 'the', 'code', 'i', 'use', 'for', 'the', 'fib', 'def', 'fib', 'n', 'if', 'n', 'return', 'if', 'n', 'return', 'return', 'fib', 'n', 'fib', 'n', 'n', 'but', 'i', 'did', 'not', 'got', 'the', 'empir', 'answer', 'from', 'run', 'the', 'code', 'in', 'theori', 'it', 'should', 'take', 't', 'n', 'o', 'n']","['code', 'fib', 'def', 'fib', 'n', 'n', 'return', 'n', 'return', 'return', 'fib', 'n', 'fib', 'n', 'n', 'got', 'empir', 'answer', 'run', 'code', 'theori', 'take', 'n', 'n']",code fib def fib n n return n return return fib n fib n n got empir answer run code theori take n n,complexity,CS,CS142
143111,"import time

def fib(n): 
    if n <= : 
        return  
    if n == : 
        return  
    return fib(n-) + fib(n-)

def testFib(n, times):
    timeList = []
    for i in xrange(times):
        start = time.time()
        fib(n)
        end = time.time()
        timeList.append(end-start)
    empAvg = sum(timeList)/times
    return empAvg

testFib(,)

I attempted to reach my answer empirically but it's still running... :)",#complexity,2,7114,"['import', 'time', 'def', 'fib', 'n', 'if', 'n', 'return', 'if', 'n', 'return', 'return', 'fib', 'n', 'fib', 'n', 'def', 'testFib', 'n', 'times', 'timeList', 'for', 'i', 'in', 'xrange', 'times', 'start', 'time', 'time', 'fib', 'n', 'end', 'time', 'time', 'timeList', 'append', 'end', 'start', 'empAvg', 'sum', 'timeList', 'times', 'return', 'empAvg', 'testFib', 'I', 'attempted', 'to', 'reach', 'my', 'answer', 'empirically', 'but', ""it's"", 'still', 'running']","['import', 'time', 'def', 'fib', 'n', 'if', 'n', 'return', 'if', 'n', 'return', 'return', 'fib', 'n', 'fib', 'n', 'def', 'testfib', 'n', 'time', 'timelist', 'for', 'i', 'in', 'xrang', 'time', 'start', 'time', 'time', 'fib', 'n', 'end', 'time', 'time', 'timelist', 'append', 'end', 'start', 'empavg', 'sum', 'timelist', 'time', 'return', 'empavg', 'testfib', 'i', 'attempt', 'to', 'reach', 'my', 'answer', 'empir', 'but', 'it', 'still', 'run']","['import', 'time', 'def', 'fib', 'n', 'n', 'return', 'n', 'return', 'return', 'fib', 'n', 'fib', 'n', 'def', 'testfib', 'n', 'time', 'timelist', 'xrang', 'time', 'start', 'time', 'time', 'fib', 'n', 'end', 'time', 'time', 'timelist', 'append', 'end', 'start', 'empavg', 'sum', 'timelist', 'time', 'return', 'empavg', 'testfib', 'attempt', 'reach', 'answer', 'empir', 'still', 'run']",import time def fib n n return n return return fib n fib n def testfib n time timelist xrang time start time time fib n end time time timelist append end start empavg sum timelist time return empavg testfib attempt reach answer empir still run,complexity,CS,CS142
143111,"def fib(n): 
    if n <= : 
        return  
    if n == : 
        return  
    return fib(n-) + fib(n-)


import time
start = time.time()
fib()  
end = time.time()
print(end - start) I used the following code to arrive at the answer. My terminal crashed at value  fibonacci, but smaller values calculated correctly, eg. for  this was the time: . seconds",#complexity,2,7114,"['def', 'fib', 'n', 'if', 'n', 'return', 'if', 'n', 'return', 'return', 'fib', 'n', 'fib', 'n', 'import', 'time', 'start', 'time', 'time', 'fib', 'end', 'time', 'time', 'print', 'end', 'start', 'I', 'used', 'the', 'following', 'code', 'to', 'arrive', 'at', 'the', 'answer', 'My', 'terminal', 'crashed', 'at', 'value', 'fibonacci', 'but', 'smaller', 'values', 'calculated', 'correctly', 'eg', 'for', 'this', 'was', 'the', 'time', 'seconds']","['def', 'fib', 'n', 'if', 'n', 'return', 'if', 'n', 'return', 'return', 'fib', 'n', 'fib', 'n', 'import', 'time', 'start', 'time', 'time', 'fib', 'end', 'time', 'time', 'print', 'end', 'start', 'i', 'use', 'the', 'follow', 'code', 'to', 'arriv', 'at', 'the', 'answer', 'my', 'termin', 'crash', 'at', 'valu', 'fibonacci', 'but', 'smaller', 'valu', 'calcul', 'correct', 'eg', 'for', 'this', 'was', 'the', 'time', 'second']","['def', 'fib', 'n', 'n', 'return', 'n', 'return', 'return', 'fib', 'n', 'fib', 'n', 'import', 'time', 'start', 'time', 'time', 'fib', 'end', 'time', 'time', 'print', 'end', 'start', 'follow', 'code', 'arriv', 'answer', 'termin', 'crash', 'valu', 'fibonacci', 'smaller', 'valu', 'calcul', 'correct', 'eg', 'time', 'second']",def fib n n return n return return fib n fib n import time start time time fib end time time print end start follow code arriv answer termin crash valu fibonacci smaller valu calcul correct eg time second,complexity,CS,CS142
210851,the recursion will be n: n/i==log base n=i=o(n),#complexity,2,9977,"['the', 'recursion', 'will', 'be', 'n', 'n', 'i', 'log', 'base', 'n', 'i', 'o', 'n']","['the', 'recurs', 'will', 'be', 'n', 'n', 'i', 'log', 'base', 'n', 'i', 'o', 'n']","['recurs', 'n', 'n', 'log', 'base', 'n', 'n']",recurs n n log base n n,complexity,CS,CS142
210859,"We will sove this using the recurrence tree, where each node has two children and the value of a node is half of its parent. We assume the base case is f()=Theta() (implying that at the base case the algorithm runs in a constant time)
First level: N (sum=N)   
Second level: N/   N/  (sum = N)
Third level: N/ N/  N/  N/ (Sum=N)
....
Last level: Theta() Theta() Theta()..... 
We see that at each level the operation time is N. And there is (i+) levels where ^i=n ==> i= log(n)
So the solution is N(logN + ) = NlogN + N
In terms of big-Oh notation, it is O(NlogN)",#complexity,4,9979,"['We', 'will', 'sove', 'this', 'using', 'the', 'recurrence', 'tree', 'where', 'each', 'node', 'has', 'two', 'children', 'and', 'the', 'value', 'of', 'a', 'node', 'is', 'half', 'of', 'its', 'parent', 'We', 'assume', 'the', 'base', 'case', 'is', 'f', 'Theta', 'implying', 'that', 'at', 'the', 'base', 'case', 'the', 'algorithm', 'runs', 'in', 'a', 'constant', 'time', 'First', 'level', 'N', 'sum', 'N', 'Second', 'level', 'N', 'N', 'sum', 'N', 'Third', 'level', 'N', 'N', 'N', 'N', 'Sum', 'N', 'Last', 'level', 'Theta', 'Theta', 'Theta', 'We', 'see', 'that', 'at', 'each', 'level', 'the', 'operation', 'time', 'is', 'N', 'And', 'there', 'is', 'i', 'levels', 'where', 'i', 'n', 'i', 'log', 'n', 'So', 'the', 'solution', 'is', 'N', 'logN', 'NlogN', 'N', 'In', 'terms', 'of', 'big', 'Oh', 'notation', 'it', 'is', 'O', 'NlogN']","['we', 'will', 'sove', 'this', 'use', 'the', 'recurr', 'tree', 'where', 'each', 'node', 'has', 'two', 'children', 'and', 'the', 'valu', 'of', 'a', 'node', 'is', 'half', 'of', 'it', 'parent', 'we', 'assum', 'the', 'base', 'case', 'is', 'f', 'theta', 'impli', 'that', 'at', 'the', 'base', 'case', 'the', 'algorithm', 'run', 'in', 'a', 'constant', 'time', 'first', 'level', 'n', 'sum', 'n', 'second', 'level', 'n', 'n', 'sum', 'n', 'third', 'level', 'n', 'n', 'n', 'n', 'sum', 'n', 'last', 'level', 'theta', 'theta', 'theta', 'we', 'see', 'that', 'at', 'each', 'level', 'the', 'oper', 'time', 'is', 'n', 'and', 'there', 'is', 'i', 'level', 'where', 'i', 'n', 'i', 'log', 'n', 'so', 'the', 'solut', 'is', 'n', 'logn', 'nlogn', 'n', 'in', 'term', 'of', 'big', 'oh', 'notat', 'it', 'is', 'o', 'nlogn']","['sove', 'recurr', 'tree', 'node', 'two', 'children', 'valu', 'node', 'half', 'parent', 'assum', 'base', 'case', 'f', 'theta', 'impli', 'base', 'case', 'algorithm', 'run', 'constant', 'time', 'first', 'level', 'n', 'sum', 'n', 'second', 'level', 'n', 'n', 'sum', 'n', 'third', 'level', 'n', 'n', 'n', 'n', 'sum', 'n', 'last', 'level', 'theta', 'theta', 'theta', 'see', 'level', 'oper', 'time', 'n', 'level', 'n', 'log', 'n', 'solut', 'n', 'logn', 'nlogn', 'n', 'term', 'big', 'oh', 'notat', 'nlogn']",sove recurr tree node two children valu node half parent assum base case f theta impli base case algorithm run constant time first level n sum n second level n n sum n third level n n n n sum n last level theta theta theta see level oper time n level n log n solut n logn nlogn n term big oh notat nlogn,complexity,CS,CS142
279911,"first guess: 
for all N>: 
f(N) = f(N-) 
==> f(N) < f(N-) 
==> f(N) = O(N-)
-----------------
if we implement some sort of recursive max_subarray problem that would not only compare to the last element, but to the first too (adding one element from each side). The tree would give us something like this: 
T(n) = n/ ^logn 
(not sure how to finish this)",#complexity,1,13014,"['first', 'guess', 'for', 'all', 'N', 'f', 'N', 'f', 'N', 'f', 'N', 'f', 'N', 'f', 'N', 'O', 'N', 'if', 'we', 'implement', 'some', 'sort', 'of', 'recursive', 'max_subarray', 'problem', 'that', 'would', 'not', 'only', 'compare', 'to', 'the', 'last', 'element', 'but', 'to', 'the', 'first', 'too', 'adding', 'one', 'element', 'from', 'each', 'side', 'The', 'tree', 'would', 'give', 'us', 'something', 'like', 'this', 'T', 'n', 'n', 'logn', 'not', 'sure', 'how', 'to', 'finish', 'this']","['first', 'guess', 'for', 'all', 'n', 'f', 'n', 'f', 'n', 'f', 'n', 'f', 'n', 'f', 'n', 'o', 'n', 'if', 'we', 'implement', 'some', 'sort', 'of', 'recurs', 'max_subarray', 'problem', 'that', 'would', 'not', 'onli', 'compar', 'to', 'the', 'last', 'element', 'but', 'to', 'the', 'first', 'too', 'ad', 'one', 'element', 'from', 'each', 'side', 'the', 'tree', 'would', 'give', 'us', 'someth', 'like', 'this', 't', 'n', 'n', 'logn', 'not', 'sure', 'how', 'to', 'finish', 'this']","['first', 'guess', 'n', 'f', 'n', 'f', 'n', 'f', 'n', 'f', 'n', 'f', 'n', 'n', 'implement', 'sort', 'recurs', 'max_subarray', 'problem', 'onli', 'compar', 'last', 'element', 'first', 'ad', 'one', 'element', 'side', 'tree', 'give', 'us', 'someth', 'like', 'n', 'n', 'logn', 'sure', 'finish']",first guess n f n f n f n f n f n n implement sort recurs max_subarray problem onli compar last element first ad one element side tree give us someth like n n logn sure finish,complexity,CS,CS142
194721,"N =  , Therefore ^ =  seconds >> if , == ~~hs?",#professionalism,2,9270,"['N', 'Therefore', 'seconds', 'if', 'hs']","['n', 'therefor', 'second', 'if', 'hs']","['n', 'therefor', 'second', 'hs']",n therefor second hs,professionalism,CS,CS166
98079,"this is not an inductive argument, its a deductive one which we know A and B are  together then they are true sseparately. A n B,==> A , B.",#induction,2,2896,"['this', 'is', 'not', 'an', 'inductive', 'argument', 'its', 'a', 'deductive', 'one', 'which', 'we', 'know', 'A', 'and', 'B', 'are', 'together', 'then', 'they', 'are', 'true', 'sseparately', 'A', 'n', 'B', 'A', 'B']","['this', 'is', 'not', 'an', 'induct', 'argument', 'it', 'a', 'deduct', 'one', 'which', 'we', 'know', 'a', 'and', 'b', 'are', 'togeth', 'then', 'they', 'are', 'true', 'ssepar', 'a', 'n', 'b', 'a', 'b']","['induct', 'argument', 'deduct', 'one', 'know', 'b', 'togeth', 'true', 'ssepar', 'n', 'b', 'b']",induct argument deduct one know b togeth true ssepar n b b,induction,CS,
236738,"If one of you forget to set the seed to an agreed seed, then the nested sample() function in the ""experiment"" function would sample according to a vector of the probability weights, which in this case is the vector i""prob = c(vect......"" part of

sample(x = c(,), size = , prob = c(vector.of.probabilities[i], 
                                             - vector.of.probabilities[i])) == )",#decisiontheory,3,11015,"['If', 'one', 'of', 'you', 'forget', 'to', 'set', 'the', 'seed', 'to', 'an', 'agreed', 'seed', 'then', 'the', 'nested', 'sample', 'function', 'in', 'the', 'experiment', 'function', 'would', 'sample', 'according', 'to', 'a', 'vector', 'of', 'the', 'probability', 'weights', 'which', 'in', 'this', 'case', 'is', 'the', 'vector', 'i', 'prob', 'c', 'vect', 'part', 'of', 'sample', 'x', 'c', 'size', 'prob', 'c', 'vector', 'of', 'probabilities', 'i', 'vector', 'of', 'probabilities', 'i']","['if', 'one', 'of', 'you', 'forget', 'to', 'set', 'the', 'seed', 'to', 'an', 'agre', 'seed', 'then', 'the', 'nest', 'sampl', 'function', 'in', 'the', 'experi', 'function', 'would', 'sampl', 'accord', 'to', 'a', 'vector', 'of', 'the', 'probabl', 'weight', 'which', 'in', 'this', 'case', 'is', 'the', 'vector', 'i', 'prob', 'c', 'vect', 'part', 'of', 'sampl', 'x', 'c', 'size', 'prob', 'c', 'vector', 'of', 'probabl', 'i', 'vector', 'of', 'probabl', 'i']","['one', 'forget', 'set', 'seed', 'agre', 'seed', 'nest', 'sampl', 'function', 'experi', 'function', 'sampl', 'accord', 'vector', 'probabl', 'weight', 'case', 'vector', 'prob', 'c', 'vect', 'part', 'sampl', 'x', 'c', 'size', 'prob', 'c', 'vector', 'probabl', 'vector', 'probabl']",one forget set seed agre seed nest sampl function experi function sampl accord vector probabl weight case vector prob c vect part sampl x c size prob c vector probabl vector probabl,decisiontheory,CS,CS112
257647,"No

Code: 
assigned_and_treated <- sum((jtpa_data$assignmt ==  & jtpa_data$training == ))
total_assigned <- sum(jtpa_data$assignmt == )

#assigned to treatment and treated
compliance <- (assigned_and_treated / total_assigned)

Compliance = . 


Our compliance rate was only %, meaning about % of people who were encouraged to treatment, did not get treatment.",#decisionreview,4,11865,"['No', 'Code', 'assigned_and_treated', 'sum', 'jtpa_data', 'assignmt', 'jtpa_data', 'training', 'total_assigned', 'sum', 'jtpa_data', 'assignmt', 'assigned', 'to', 'treatment', 'and', 'treated', 'compliance', 'assigned_and_treated', 'total_assigned', 'Compliance', 'Our', 'compliance', 'rate', 'was', 'only', 'meaning', 'about', 'of', 'people', 'who', 'were', 'encouraged', 'to', 'treatment', 'did', 'not', 'get', 'treatment']","['no', 'code', 'assigned_and_tr', 'sum', 'jtpa_data', 'assignmt', 'jtpa_data', 'train', 'total_assign', 'sum', 'jtpa_data', 'assignmt', 'assign', 'to', 'treatment', 'and', 'treat', 'complianc', 'assigned_and_tr', 'total_assign', 'complianc', 'our', 'complianc', 'rate', 'was', 'onli', 'mean', 'about', 'of', 'peopl', 'who', 'were', 'encourag', 'to', 'treatment', 'did', 'not', 'get', 'treatment']","['code', 'assigned_and_tr', 'sum', 'jtpa_data', 'assignmt', 'jtpa_data', 'train', 'total_assign', 'sum', 'jtpa_data', 'assignmt', 'assign', 'treatment', 'treat', 'complianc', 'assigned_and_tr', 'total_assign', 'complianc', 'complianc', 'rate', 'onli', 'mean', 'peopl', 'encourag', 'treatment', 'get', 'treatment']",code assigned_and_tr sum jtpa_data assignmt jtpa_data train total_assign sum jtpa_data assignmt assign treatment treat complianc assigned_and_tr total_assign complianc complianc rate onli mean peopl encourag treatment get treatment,decisionreview,CS,CS112
257647,"No. Even though I was not able to complete the calculations for the women and men, simply by looking at the data I can see that there are women that were assigned to treatment but did not enrol for training, ie women, assignmt ==  & training == .",#decisionreview,4,11865,"['No', 'Even', 'though', 'I', 'was', 'not', 'able', 'to', 'complete', 'the', 'calculations', 'for', 'the', 'women', 'and', 'men', 'simply', 'by', 'looking', 'at', 'the', 'data', 'I', 'can', 'see', 'that', 'there', 'are', 'women', 'that', 'were', 'assigned', 'to', 'treatment', 'but', 'did', 'not', 'enrol', 'for', 'training', 'ie', 'women', 'assignmt', 'training']","['no', 'even', 'though', 'i', 'was', 'not', 'abl', 'to', 'complet', 'the', 'calcul', 'for', 'the', 'women', 'and', 'men', 'simpli', 'by', 'look', 'at', 'the', 'data', 'i', 'can', 'see', 'that', 'there', 'are', 'women', 'that', 'were', 'assign', 'to', 'treatment', 'but', 'did', 'not', 'enrol', 'for', 'train', 'ie', 'women', 'assignmt', 'train']","['even', 'though', 'abl', 'complet', 'calcul', 'women', 'men', 'simpli', 'look', 'data', 'see', 'women', 'assign', 'treatment', 'enrol', 'train', 'ie', 'women', 'assignmt', 'train']",even though abl complet calcul women men simpli look data see women assign treatment enrol train ie women assignmt train,decisionreview,CS,CS112
257652,"Imperfect compliance was calculated:

a <- length(which(men$training == &men$assignmt==))
b <- length(which(men$assignmt==))
e <- a/b
.

c <- length(which(men$training == &men$assignmt==))
d <- length(which(men$assignmt==))
f <- c/d
.

compliance = e - f
compliance
.",#decisionreview,4,11866,"['Imperfect', 'compliance', 'was', 'calculated', 'a', 'length', 'which', 'men', 'training', 'men', 'assignmt', 'b', 'length', 'which', 'men', 'assignmt', 'e', 'a', 'b', 'c', 'length', 'which', 'men', 'training', 'men', 'assignmt', 'd', 'length', 'which', 'men', 'assignmt', 'f', 'c', 'd', 'compliance', 'e', 'f', 'compliance']","['imperfect', 'complianc', 'was', 'calcul', 'a', 'length', 'which', 'men', 'train', 'men', 'assignmt', 'b', 'length', 'which', 'men', 'assignmt', 'e', 'a', 'b', 'c', 'length', 'which', 'men', 'train', 'men', 'assignmt', 'd', 'length', 'which', 'men', 'assignmt', 'f', 'c', 'd', 'complianc', 'e', 'f', 'complianc']","['imperfect', 'complianc', 'calcul', 'length', 'men', 'train', 'men', 'assignmt', 'b', 'length', 'men', 'assignmt', 'e', 'b', 'c', 'length', 'men', 'train', 'men', 'assignmt', 'length', 'men', 'assignmt', 'f', 'c', 'complianc', 'e', 'f', 'complianc']",imperfect complianc calcul length men train men assignmt b length men assignmt e b c length men train men assignmt length men assignmt f c complianc e f complianc,decisionreview,CS,CS112
257657,"No, it was not with perfect compliance. I checked if people received encouragement all took treatment & if people didnt receive encouragement all did not take treatment. It turns out that ~ people who received encouragement 

which(foo$training[which(foo$assignmt==)]==)
which(foo$training[which(foo$assignmt==)]==)",#decisionreview,4,11867,"['No', 'it', 'was', 'not', 'with', 'perfect', 'compliance', 'I', 'checked', 'if', 'people', 'received', 'encouragement', 'all', 'took', 'treatment', 'if', 'people', 'didnt', 'receive', 'encouragement', 'all', 'did', 'not', 'take', 'treatment', 'It', 'turns', 'out', 'that', 'people', 'who', 'received', 'encouragement', 'which', 'foo', 'training', 'which', 'foo', 'assignmt', 'which', 'foo', 'training', 'which', 'foo', 'assignmt']","['no', 'it', 'was', 'not', 'with', 'perfect', 'complianc', 'i', 'check', 'if', 'peopl', 'receiv', 'encourag', 'all', 'took', 'treatment', 'if', 'peopl', 'didnt', 'receiv', 'encourag', 'all', 'did', 'not', 'take', 'treatment', 'it', 'turn', 'out', 'that', 'peopl', 'who', 'receiv', 'encourag', 'which', 'foo', 'train', 'which', 'foo', 'assignmt', 'which', 'foo', 'train', 'which', 'foo', 'assignmt']","['perfect', 'complianc', 'check', 'peopl', 'receiv', 'encourag', 'took', 'treatment', 'peopl', 'didnt', 'receiv', 'encourag', 'take', 'treatment', 'turn', 'peopl', 'receiv', 'encourag', 'foo', 'train', 'foo', 'assignmt', 'foo', 'train', 'foo', 'assignmt']",perfect complianc check peopl receiv encourag took treatment peopl didnt receiv encourag take treatment turn peopl receiv encourag foo train foo assignmt foo train foo assignmt,decisionreview,CS,CS112
257662,"No. Perfect compliance means that units do what they are assigned to - treatment if treat, control if control.
In this case:
length(which(jtpa.men.control$training == )) returns , which means  men who were assigned to control ended up taking the treatment any ways. This means there was not perfect compliance.
Similength(which(jtpa.men.treat$training == ))
#men treated not in training ",#decisionreview,4,11868,"['No', 'Perfect', 'compliance', 'means', 'that', 'units', 'do', 'what', 'they', 'are', 'assigned', 'to', 'treatment', 'if', 'treat', 'control', 'if', 'control', 'In', 'this', 'case', 'length', 'which', 'jtpa', 'men', 'control', 'training', 'returns', 'which', 'means', 'men', 'who', 'were', 'assigned', 'to', 'control', 'ended', 'up', 'taking', 'the', 'treatment', 'any', 'ways', 'This', 'means', 'there', 'was', 'not', 'perfect', 'compliance', 'Similength', 'which', 'jtpa', 'men', 'treat', 'training', 'men', 'treated', 'not', 'in', 'training']","['no', 'perfect', 'complianc', 'mean', 'that', 'unit', 'do', 'what', 'they', 'are', 'assign', 'to', 'treatment', 'if', 'treat', 'control', 'if', 'control', 'in', 'this', 'case', 'length', 'which', 'jtpa', 'men', 'control', 'train', 'return', 'which', 'mean', 'men', 'who', 'were', 'assign', 'to', 'control', 'end', 'up', 'take', 'the', 'treatment', 'ani', 'way', 'this', 'mean', 'there', 'was', 'not', 'perfect', 'complianc', 'similength', 'which', 'jtpa', 'men', 'treat', 'train', 'men', 'treat', 'not', 'in', 'train']","['perfect', 'complianc', 'mean', 'unit', 'assign', 'treatment', 'treat', 'control', 'control', 'case', 'length', 'jtpa', 'men', 'control', 'train', 'return', 'mean', 'men', 'assign', 'control', 'end', 'take', 'treatment', 'ani', 'way', 'mean', 'perfect', 'complianc', 'similength', 'jtpa', 'men', 'treat', 'train', 'men', 'treat', 'train']",perfect complianc mean unit assign treatment treat control control case length jtpa men control train return mean men assign control end take treatment ani way mean perfect complianc similength jtpa men treat train men treat train,decisionreview,CS,CS112
257662,"No. There were  +  compliers and  +  non-compliers. 

 where assignmt ==  and training == 
 where assignmt ==  and training == ",#decisionreview,4,11868,"['No', 'There', 'were', 'compliers', 'and', 'non', 'compliers', 'where', 'assignmt', 'and', 'training', 'where', 'assignmt', 'and', 'training']","['no', 'there', 'were', 'complier', 'and', 'non', 'complier', 'where', 'assignmt', 'and', 'train', 'where', 'assignmt', 'and', 'train']","['complier', 'non', 'complier', 'assignmt', 'train', 'assignmt', 'train']",complier non complier assignmt train assignmt train,decisionreview,CS,CS112
258001,"No: there were individuals assigned to training (assign = = ) but who didn't ultimatly use the training.
This group was identified by subsetting conditional (assing ==  & traing =",#decisionreview,3,11879,"['No', 'there', 'were', 'individuals', 'assigned', 'to', 'training', 'assign', 'but', 'who', ""didn't"", 'ultimatly', 'use', 'the', 'training', 'This', 'group', 'was', 'identified', 'by', 'subsetting', 'conditional', 'assing', 'traing']","['no', 'there', 'were', 'individu', 'assign', 'to', 'train', 'assign', 'but', 'who', ""didn't"", 'ultimat', 'use', 'the', 'train', 'this', 'group', 'was', 'identifi', 'by', 'subset', 'condit', 'ass', 'tra']","['individu', 'assign', 'train', 'assign', 'ultimat', 'train', 'group', 'identifi', 'subset', 'condit', 'ass', 'tra']",individu assign train assign ultimat train group identifi subset condit ass tra,decisionreview,CS,CS112
41794,"Yes. in Directions, we need to compare each instruction across all people, and find the person with the most mistakes, which is actually the largest - NON-Common Subsequence. The Common Subsequence checks for the similar items. both account for non-consequitive streaks. We justneed to flip what we search for: != instead of ==. //unfortunately I couldn't hear most of the discussion here too. :(",#algorithms,3,386,"['Yes', 'in', 'Directions', 'we', 'need', 'to', 'compare', 'each', 'instruction', 'across', 'all', 'people', 'and', 'find', 'the', 'person', 'with', 'the', 'most', 'mistakes', 'which', 'is', 'actually', 'the', 'largest', 'NON', 'Common', 'Subsequence', 'The', 'Common', 'Subsequence', 'checks', 'for', 'the', 'similar', 'items', 'both', 'account', 'for', 'non', 'consequitive', 'streaks', 'We', 'justneed', 'to', 'flip', 'what', 'we', 'search', 'for', 'instead', 'of', 'unfortunately', 'I', ""couldn't"", 'hear', 'most', 'of', 'the', 'discussion', 'here', 'too']","['yes', 'in', 'direct', 'we', 'need', 'to', 'compar', 'each', 'instruct', 'across', 'all', 'peopl', 'and', 'find', 'the', 'person', 'with', 'the', 'most', 'mistak', 'which', 'is', 'actual', 'the', 'largest', 'non', 'common', 'subsequ', 'the', 'common', 'subsequ', 'check', 'for', 'the', 'similar', 'item', 'both', 'account', 'for', 'non', 'consequit', 'streak', 'we', 'justne', 'to', 'flip', 'what', 'we', 'search', 'for', 'instead', 'of', 'unfortun', 'i', ""couldn't"", 'hear', 'most', 'of', 'the', 'discuss', 'here', 'too']","['yes', 'direct', 'need', 'compar', 'instruct', 'across', 'peopl', 'find', 'person', 'mistak', 'actual', 'largest', 'non', 'common', 'subsequ', 'common', 'subsequ', 'check', 'similar', 'item', 'account', 'non', 'consequit', 'streak', 'justne', 'flip', 'search', 'instead', 'unfortun', 'hear', 'discuss']",yes direct need compar instruct across peopl find person mistak actual largest non common subsequ common subsequ check similar item account non consequit streak justne flip search instead unfortun hear discuss,algorithms,CS,
92195,"Activity : I learned that we had to make sure that our code was very direct and not ambiguous about anything.
Ativity : When fixing code, we had to make sure that the number of inputs a function was programmed to accept == the number of inputs we actually gave the code. 

What we needed to do in Activity  was eliminate the ambiguities which we learned in Activity ",#algorithms,3,2202,"['Activity', 'I', 'learned', 'that', 'we', 'had', 'to', 'make', 'sure', 'that', 'our', 'code', 'was', 'very', 'direct', 'and', 'not', 'ambiguous', 'about', 'anything', 'Ativity', 'When', 'fixing', 'code', 'we', 'had', 'to', 'make', 'sure', 'that', 'the', 'number', 'of', 'inputs', 'a', 'function', 'was', 'programmed', 'to', 'accept', 'the', 'number', 'of', 'inputs', 'we', 'actually', 'gave', 'the', 'code', 'What', 'we', 'needed', 'to', 'do', 'in', 'Activity', 'was', 'eliminate', 'the', 'ambiguities', 'which', 'we', 'learned', 'in', 'Activity']","['activ', 'i', 'learn', 'that', 'we', 'had', 'to', 'make', 'sure', 'that', 'our', 'code', 'was', 'veri', 'direct', 'and', 'not', 'ambigu', 'about', 'anyth', 'ativ', 'when', 'fix', 'code', 'we', 'had', 'to', 'make', 'sure', 'that', 'the', 'number', 'of', 'input', 'a', 'function', 'was', 'program', 'to', 'accept', 'the', 'number', 'of', 'input', 'we', 'actual', 'gave', 'the', 'code', 'what', 'we', 'need', 'to', 'do', 'in', 'activ', 'was', 'elimin', 'the', 'ambigu', 'which', 'we', 'learn', 'in', 'activ']","['activ', 'learn', 'make', 'sure', 'code', 'veri', 'direct', 'ambigu', 'anyth', 'ativ', 'fix', 'code', 'make', 'sure', 'number', 'input', 'function', 'program', 'accept', 'number', 'input', 'actual', 'gave', 'code', 'need', 'activ', 'elimin', 'ambigu', 'learn', 'activ']",activ learn make sure code veri direct ambigu anyth ativ fix code make sure number input function program accept number input actual gave code need activ elimin ambigu learn activ,algorithms,CS,
99262,"The hardest thing about the pre-class work was trying to figure out ) why I kept getting the error ""there is no package called 'tree'"" in library(tree) and ) using the code to create the conditional to separate the brahmin class (I knew how to create the conditional in theory, I did not know the code execution for it, which resulted in a lot of trial and errors, & googling). Ultimately I got: brahmin = ifelse(caste == ""brahmin"", ""No"", ""Yes"")",#algorithms,3,3127,"['The', 'hardest', 'thing', 'about', 'the', 'pre', 'class', 'work', 'was', 'trying', 'to', 'figure', 'out', 'why', 'I', 'kept', 'getting', 'the', 'error', 'there', 'is', 'no', 'package', 'called', ""'tree'"", 'in', 'library', 'tree', 'and', 'using', 'the', 'code', 'to', 'create', 'the', 'conditional', 'to', 'separate', 'the', 'brahmin', 'class', 'I', 'knew', 'how', 'to', 'create', 'the', 'conditional', 'in', 'theory', 'I', 'did', 'not', 'know', 'the', 'code', 'execution', 'for', 'it', 'which', 'resulted', 'in', 'a', 'lot', 'of', 'trial', 'and', 'errors', 'googling', 'Ultimately', 'I', 'got', 'brahmin', 'ifelse', 'caste', 'brahmin', 'No', 'Yes']","['the', 'hardest', 'thing', 'about', 'the', 'pre', 'class', 'work', 'was', 'tri', 'to', 'figur', 'out', 'whi', 'i', 'kept', 'get', 'the', 'error', 'there', 'is', 'no', 'packag', 'call', 'tree', 'in', 'librari', 'tree', 'and', 'use', 'the', 'code', 'to', 'creat', 'the', 'condit', 'to', 'separ', 'the', 'brahmin', 'class', 'i', 'knew', 'how', 'to', 'creat', 'the', 'condit', 'in', 'theori', 'i', 'did', 'not', 'know', 'the', 'code', 'execut', 'for', 'it', 'which', 'result', 'in', 'a', 'lot', 'of', 'trial', 'and', 'error', 'googl', 'ultim', 'i', 'got', 'brahmin', 'ifels', 'cast', 'brahmin', 'no', 'yes']","['hardest', 'thing', 'pre', 'class', 'work', 'tri', 'figur', 'whi', 'kept', 'get', 'error', 'packag', 'call', 'tree', 'librari', 'tree', 'code', 'creat', 'condit', 'separ', 'brahmin', 'class', 'knew', 'creat', 'condit', 'theori', 'know', 'code', 'execut', 'result', 'lot', 'trial', 'error', 'googl', 'ultim', 'got', 'brahmin', 'ifels', 'cast', 'brahmin', 'yes']",hardest thing pre class work tri figur whi kept get error packag call tree librari tree code creat condit separ brahmin class knew creat condit theori know code execut result lot trial error googl ultim got brahmin ifels cast brahmin yes,algorithms,CS,
207010,"First, if want to go to the beach is B, and having fun is F, the statement would be written as B V-F
Then we add a negation to the equation, so we get -(B V-F)
Distribute the negation to each term, and according to the De Morgan's law(-pVq)==(-P)&(-Q), we got - B&- -F
Simplify the statement: -B&F",#algorithms,4,9771,"['First', 'if', 'want', 'to', 'go', 'to', 'the', 'beach', 'is', 'B', 'and', 'having', 'fun', 'is', 'F', 'the', 'statement', 'would', 'be', 'written', 'as', 'B', 'V', 'F', 'Then', 'we', 'add', 'a', 'negation', 'to', 'the', 'equation', 'so', 'we', 'get', 'B', 'V', 'F', 'Distribute', 'the', 'negation', 'to', 'each', 'term', 'and', 'according', 'to', 'the', 'De', ""Morgan's"", 'law', 'pVq', 'P', 'Q', 'we', 'got', 'B', 'F', 'Simplify', 'the', 'statement', 'B', 'F']","['first', 'if', 'want', 'to', 'go', 'to', 'the', 'beach', 'is', 'b', 'and', 'have', 'fun', 'is', 'f', 'the', 'statement', 'would', 'be', 'written', 'as', 'b', 'v', 'f', 'then', 'we', 'add', 'a', 'negat', 'to', 'the', 'equat', 'so', 'we', 'get', 'b', 'v', 'f', 'distribut', 'the', 'negat', 'to', 'each', 'term', 'and', 'accord', 'to', 'the', 'de', 'morgan', 'law', 'pvq', 'p', 'q', 'we', 'got', 'b', 'f', 'simplifi', 'the', 'statement', 'b', 'f']","['first', 'want', 'go', 'beach', 'b', 'fun', 'f', 'statement', 'written', 'b', 'v', 'f', 'add', 'negat', 'equat', 'get', 'b', 'v', 'f', 'distribut', 'negat', 'term', 'accord', 'de', 'morgan', 'law', 'pvq', 'p', 'q', 'got', 'b', 'f', 'simplifi', 'statement', 'b', 'f']",first want go beach b fun f statement written b v f add negat equat get b v f distribut negat term accord de morgan law pvq p q got b f simplifi statement b f,algorithms,CS,
207020,"G = Lee won the gold medal.
W = Lee won the tournament.
(G & W)

Negate: ~(G & W) == (~G) V (~W)

I performed this negation using De Morgan's laws by breaking down the initial logical sentences. The negation effects both of the atomic sentences (~G and ~W), separates them, and converts the conjunction into a disjunction (& -> V).",#algorithms,4,9772,"['G', 'Lee', 'won', 'the', 'gold', 'medal', 'W', 'Lee', 'won', 'the', 'tournament', 'G', 'W', 'Negate', 'G', 'W', 'G', 'V', 'W', 'I', 'performed', 'this', 'negation', 'using', 'De', ""Morgan's"", 'laws', 'by', 'breaking', 'down', 'the', 'initial', 'logical', 'sentences', 'The', 'negation', 'effects', 'both', 'of', 'the', 'atomic', 'sentences', 'G', 'and', 'W', 'separates', 'them', 'and', 'converts', 'the', 'conjunction', 'into', 'a', 'disjunction', 'V']","['g', 'lee', 'won', 'the', 'gold', 'medal', 'w', 'lee', 'won', 'the', 'tournament', 'g', 'w', 'negat', 'g', 'w', 'g', 'v', 'w', 'i', 'perform', 'this', 'negat', 'use', 'de', 'morgan', 'law', 'by', 'break', 'down', 'the', 'initi', 'logic', 'sentenc', 'the', 'negat', 'effect', 'both', 'of', 'the', 'atom', 'sentenc', 'g', 'and', 'w', 'separ', 'them', 'and', 'convert', 'the', 'conjunct', 'into', 'a', 'disjunct', 'v']","['g', 'lee', 'gold', 'medal', 'w', 'lee', 'tournament', 'g', 'w', 'negat', 'g', 'w', 'g', 'v', 'w', 'perform', 'negat', 'de', 'morgan', 'law', 'break', 'initi', 'logic', 'sentenc', 'negat', 'effect', 'atom', 'sentenc', 'g', 'w', 'separ', 'convert', 'conjunct', 'disjunct', 'v']",g lee gold medal w lee tournament g w negat g w g v w perform negat de morgan law break initi logic sentenc negat effect atom sentenc g w separ convert conjunct disjunct v,algorithms,CS,
207026,"A -> She is from Germany
B -> She is from Berlin
~B -> She is not from Berlin

But = and = ^
~(A^~B) => ~A U (=or) ~~B (nd De Morgan`s rule)
~~B => B 
===> She is not from Germany or she is from Berlin 
We should understand that negation is not a completeb opposite and that operands ""not"" ""or"" ""and"" play a crucial role in sentential logic. 
To prove it, we can also apply truth-tables and check.",#algorithms,4,9773,"['A', 'She', 'is', 'from', 'Germany', 'B', 'She', 'is', 'from', 'Berlin', 'B', 'She', 'is', 'not', 'from', 'Berlin', 'But', 'and', 'A', 'B', 'A', 'U', 'or', 'B', 'nd', 'De', 'Morgan', 's', 'rule', 'B', 'B', 'She', 'is', 'not', 'from', 'Germany', 'or', 'she', 'is', 'from', 'Berlin', 'We', 'should', 'understand', 'that', 'negation', 'is', 'not', 'a', 'completeb', 'opposite', 'and', 'that', 'operands', 'not', 'or', 'and', 'play', 'a', 'crucial', 'role', 'in', 'sentential', 'logic', 'To', 'prove', 'it', 'we', 'can', 'also', 'apply', 'truth', 'tables', 'and', 'check']","['a', 'she', 'is', 'from', 'germani', 'b', 'she', 'is', 'from', 'berlin', 'b', 'she', 'is', 'not', 'from', 'berlin', 'but', 'and', 'a', 'b', 'a', 'u', 'or', 'b', 'nd', 'de', 'morgan', 's', 'rule', 'b', 'b', 'she', 'is', 'not', 'from', 'germani', 'or', 'she', 'is', 'from', 'berlin', 'we', 'should', 'understand', 'that', 'negat', 'is', 'not', 'a', 'completeb', 'opposit', 'and', 'that', 'operand', 'not', 'or', 'and', 'play', 'a', 'crucial', 'role', 'in', 'sententi', 'logic', 'to', 'prove', 'it', 'we', 'can', 'also', 'appli', 'truth', 'tabl', 'and', 'check']","['germani', 'b', 'berlin', 'b', 'berlin', 'b', 'u', 'b', 'nd', 'de', 'morgan', 'rule', 'b', 'b', 'germani', 'berlin', 'understand', 'negat', 'completeb', 'opposit', 'operand', 'play', 'crucial', 'role', 'sententi', 'logic', 'prove', 'appli', 'truth', 'tabl', 'check']",germani b berlin b berlin b u b nd de morgan rule b b germani berlin understand negat completeb opposit operand play crucial role sententi logic prove appli truth tabl check,algorithms,CS,
280296,") We already have the list of unsorted numbers. 
) Set a marker for the sorted section, in this case, after the number  on our list to keep track of the sorting proces
) Repeat the following three steps until the unsorted section of the list == 
) Select the first unsorted number (to the right of the marker)
) Compare the selected number with the sorted numbers to the left of its position
) Swap the number to the left until it arrives to a position where the number to its left is smaller
)Once finished the swapping process, advance the marker one positive position to the right
)Stop",#algorithms,3,13025,"['We', 'already', 'have', 'the', 'list', 'of', 'unsorted', 'numbers', 'Set', 'a', 'marker', 'for', 'the', 'sorted', 'section', 'in', 'this', 'case', 'after', 'the', 'number', 'on', 'our', 'list', 'to', 'keep', 'track', 'of', 'the', 'sorting', 'proces', 'Repeat', 'the', 'following', 'three', 'steps', 'until', 'the', 'unsorted', 'section', 'of', 'the', 'list', 'Select', 'the', 'first', 'unsorted', 'number', 'to', 'the', 'right', 'of', 'the', 'marker', 'Compare', 'the', 'selected', 'number', 'with', 'the', 'sorted', 'numbers', 'to', 'the', 'left', 'of', 'its', 'position', 'Swap', 'the', 'number', 'to', 'the', 'left', 'until', 'it', 'arrives', 'to', 'a', 'position', 'where', 'the', 'number', 'to', 'its', 'left', 'is', 'smaller', 'Once', 'finished', 'the', 'swapping', 'process', 'advance', 'the', 'marker', 'one', 'positive', 'position', 'to', 'the', 'right', 'Stop']","['we', 'alreadi', 'have', 'the', 'list', 'of', 'unsort', 'number', 'set', 'a', 'marker', 'for', 'the', 'sort', 'section', 'in', 'this', 'case', 'after', 'the', 'number', 'on', 'our', 'list', 'to', 'keep', 'track', 'of', 'the', 'sort', 'proce', 'repeat', 'the', 'follow', 'three', 'step', 'until', 'the', 'unsort', 'section', 'of', 'the', 'list', 'select', 'the', 'first', 'unsort', 'number', 'to', 'the', 'right', 'of', 'the', 'marker', 'compar', 'the', 'select', 'number', 'with', 'the', 'sort', 'number', 'to', 'the', 'left', 'of', 'it', 'posit', 'swap', 'the', 'number', 'to', 'the', 'left', 'until', 'it', 'arriv', 'to', 'a', 'posit', 'where', 'the', 'number', 'to', 'it', 'left', 'is', 'smaller', 'onc', 'finish', 'the', 'swap', 'process', 'advanc', 'the', 'marker', 'one', 'posit', 'posit', 'to', 'the', 'right', 'stop']","['alreadi', 'list', 'unsort', 'number', 'set', 'marker', 'sort', 'section', 'case', 'number', 'list', 'keep', 'track', 'sort', 'proce', 'repeat', 'follow', 'three', 'step', 'unsort', 'section', 'list', 'select', 'first', 'unsort', 'number', 'right', 'marker', 'compar', 'select', 'number', 'sort', 'number', 'left', 'posit', 'swap', 'number', 'left', 'arriv', 'posit', 'number', 'left', 'smaller', 'onc', 'finish', 'swap', 'process', 'advanc', 'marker', 'one', 'posit', 'posit', 'right', 'stop']",alreadi list unsort number set marker sort section case number list keep track sort proce repeat follow three step unsort section list select first unsort number right marker compar select number sort number left posit swap number left arriv posit number left smaller onc finish swap process advanc marker one posit posit right stop,algorithms,CS,
280361,". Create an empty list
. Repeat the following steps while unsorted list is not empty
   a. Loop through the unsorted list and compare the numbers
   b. Select the minimum number
   c. Append the selected number to the empty list
   d. Replace the selected number in the original list with MAX, NULL if you're a computer or remove it from the list
. Enjoy [, , , ]


[, , , ] : [] == Step 
[, , ] : [] == Step 
[, ]: [, ] == Step 
[] : [,,] == Step 
[] : [,,,] == Terminate",#algorithms,4,13033,"['Create', 'an', 'empty', 'list', 'Repeat', 'the', 'following', 'steps', 'while', 'unsorted', 'list', 'is', 'not', 'empty', 'a', 'Loop', 'through', 'the', 'unsorted', 'list', 'and', 'compare', 'the', 'numbers', 'b', 'Select', 'the', 'minimum', 'number', 'c', 'Append', 'the', 'selected', 'number', 'to', 'the', 'empty', 'list', 'd', 'Replace', 'the', 'selected', 'number', 'in', 'the', 'original', 'list', 'with', 'MAX', 'NULL', 'if', ""you're"", 'a', 'computer', 'or', 'remove', 'it', 'from', 'the', 'list', 'Enjoy', 'Step', 'Step', 'Step', 'Step', 'Terminate']","['creat', 'an', 'empti', 'list', 'repeat', 'the', 'follow', 'step', 'while', 'unsort', 'list', 'is', 'not', 'empti', 'a', 'loop', 'through', 'the', 'unsort', 'list', 'and', 'compar', 'the', 'number', 'b', 'select', 'the', 'minimum', 'number', 'c', 'append', 'the', 'select', 'number', 'to', 'the', 'empti', 'list', 'd', 'replac', 'the', 'select', 'number', 'in', 'the', 'origin', 'list', 'with', 'max', 'null', 'if', ""you'r"", 'a', 'comput', 'or', 'remov', 'it', 'from', 'the', 'list', 'enjoy', 'step', 'step', 'step', 'step', 'termin']","['creat', 'empti', 'list', 'repeat', 'follow', 'step', 'unsort', 'list', 'empti', 'loop', 'unsort', 'list', 'compar', 'number', 'b', 'select', 'minimum', 'number', 'c', 'append', 'select', 'number', 'empti', 'list', 'replac', 'select', 'number', 'origin', 'list', 'max', 'null', ""you'r"", 'comput', 'remov', 'list', 'enjoy', 'step', 'step', 'step', 'step', 'termin']",creat empti list repeat follow step unsort list empti loop unsort list compar number b select minimum number c append select number empti list replac select number origin list max null you'r comput remov list enjoy step step step step termin,algorithms,CS,
280369,"There will be a separate empty list created. The algorithm would go through each number in the list and find the smallest number and move it to the empty list. Then, the algorithm would go through each number in the original list again to find the smallest number again to move it in front of the number of the new list. This would be repeated until there was no more numbers in the original list.
lst = [, , , ]
newlst = []
for x in range(len(lst)):
for x in lst:
if x == min(lst):
newlst.append(x)
else:
continue",#algorithms,3,13034,"['There', 'will', 'be', 'a', 'separate', 'empty', 'list', 'created', 'The', 'algorithm', 'would', 'go', 'through', 'each', 'number', 'in', 'the', 'list', 'and', 'find', 'the', 'smallest', 'number', 'and', 'move', 'it', 'to', 'the', 'empty', 'list', 'Then', 'the', 'algorithm', 'would', 'go', 'through', 'each', 'number', 'in', 'the', 'original', 'list', 'again', 'to', 'find', 'the', 'smallest', 'number', 'again', 'to', 'move', 'it', 'in', 'front', 'of', 'the', 'number', 'of', 'the', 'new', 'list', 'This', 'would', 'be', 'repeated', 'until', 'there', 'was', 'no', 'more', 'numbers', 'in', 'the', 'original', 'list', 'lst', 'newlst', 'for', 'x', 'in', 'range', 'len', 'lst', 'for', 'x', 'in', 'lst', 'if', 'x', 'min', 'lst', 'newlst', 'append', 'x', 'else', 'continue']","['there', 'will', 'be', 'a', 'separ', 'empti', 'list', 'creat', 'the', 'algorithm', 'would', 'go', 'through', 'each', 'number', 'in', 'the', 'list', 'and', 'find', 'the', 'smallest', 'number', 'and', 'move', 'it', 'to', 'the', 'empti', 'list', 'then', 'the', 'algorithm', 'would', 'go', 'through', 'each', 'number', 'in', 'the', 'origin', 'list', 'again', 'to', 'find', 'the', 'smallest', 'number', 'again', 'to', 'move', 'it', 'in', 'front', 'of', 'the', 'number', 'of', 'the', 'new', 'list', 'this', 'would', 'be', 'repeat', 'until', 'there', 'was', 'no', 'more', 'number', 'in', 'the', 'origin', 'list', 'lst', 'newlst', 'for', 'x', 'in', 'rang', 'len', 'lst', 'for', 'x', 'in', 'lst', 'if', 'x', 'min', 'lst', 'newlst', 'append', 'x', 'els', 'continu']","['separ', 'empti', 'list', 'creat', 'algorithm', 'go', 'number', 'list', 'find', 'smallest', 'number', 'move', 'empti', 'list', 'algorithm', 'go', 'number', 'origin', 'list', 'find', 'smallest', 'number', 'move', 'front', 'number', 'new', 'list', 'repeat', 'number', 'origin', 'list', 'lst', 'newlst', 'x', 'rang', 'len', 'lst', 'x', 'lst', 'x', 'min', 'lst', 'newlst', 'append', 'x', 'els', 'continu']",separ empti list creat algorithm go number list find smallest number move empti list algorithm go number origin list find smallest number move front number new list repeat number origin list lst newlst x rang len lst x lst x min lst newlst append x els continu,algorithms,CS,
180440,"I believe it was not because although some people were assigned treatment, not all of them ended up enrolling in the training (so there were a bunch of people for whom assignmt==, but training==), if I understood correctly.",#decisionanalysis,4,8832,"['I', 'believe', 'it', 'was', 'not', 'because', 'although', 'some', 'people', 'were', 'assigned', 'treatment', 'not', 'all', 'of', 'them', 'ended', 'up', 'enrolling', 'in', 'the', 'training', 'so', 'there', 'were', 'a', 'bunch', 'of', 'people', 'for', 'whom', 'assignmt', 'but', 'training', 'if', 'I', 'understood', 'correctly']","['i', 'believ', 'it', 'was', 'not', 'becaus', 'although', 'some', 'peopl', 'were', 'assign', 'treatment', 'not', 'all', 'of', 'them', 'end', 'up', 'enrol', 'in', 'the', 'train', 'so', 'there', 'were', 'a', 'bunch', 'of', 'peopl', 'for', 'whom', 'assignmt', 'but', 'train', 'if', 'i', 'understood', 'correct']","['believ', 'becaus', 'although', 'peopl', 'assign', 'treatment', 'end', 'enrol', 'train', 'bunch', 'peopl', 'assignmt', 'train', 'understood', 'correct']",believ becaus although peopl assign treatment end enrol train bunch peopl assignmt train understood correct,decisionanalysis,CS,CS112
73033,"Our FF discusses self control and temptations.In this case heuristics are on the mainstage.we analyzed people decision making(especially,the quick ones that don't contain much thinking==heuristics)and tries to manipulate them using other heuristics. we leverage our knowledge about biases and decision making to utilize the predictability of heuristics to help people make better decisions.   ",#decisionselection,3,1034,"['Our', 'FF', 'discusses', 'self', 'control', 'and', 'temptations', 'In', 'this', 'case', 'heuristics', 'are', 'on', 'the', 'mainstage', 'we', 'analyzed', 'people', 'decision', 'making', 'especially', 'the', 'quick', 'ones', 'that', ""don't"", 'contain', 'much', 'thinking', 'heuristics', 'and', 'tries', 'to', 'manipulate', 'them', 'using', 'other', 'heuristics', 'we', 'leverage', 'our', 'knowledge', 'about', 'biases', 'and', 'decision', 'making', 'to', 'utilize', 'the', 'predictability', 'of', 'heuristics', 'to', 'help', 'people', 'make', 'better', 'decisions']","['our', 'ff', 'discuss', 'self', 'control', 'and', 'temptat', 'in', 'this', 'case', 'heurist', 'are', 'on', 'the', 'mainstag', 'we', 'analyz', 'peopl', 'decis', 'make', 'especi', 'the', 'quick', 'one', 'that', ""don't"", 'contain', 'much', 'think', 'heurist', 'and', 'tri', 'to', 'manipul', 'them', 'use', 'other', 'heurist', 'we', 'leverag', 'our', 'knowledg', 'about', 'bias', 'and', 'decis', 'make', 'to', 'util', 'the', 'predict', 'of', 'heurist', 'to', 'help', 'peopl', 'make', 'better', 'decis']","['ff', 'discuss', 'self', 'control', 'temptat', 'case', 'heurist', 'mainstag', 'analyz', 'peopl', 'decis', 'make', 'especi', 'quick', 'one', 'contain', 'much', 'think', 'heurist', 'tri', 'manipul', 'heurist', 'leverag', 'knowledg', 'bias', 'decis', 'make', 'util', 'predict', 'heurist', 'help', 'peopl', 'make', 'better', 'decis']",ff discuss self control temptat case heurist mainstag analyz peopl decis make especi quick one contain much think heurist tri manipul heurist leverag knowledg bias decis make util predict heurist help peopl make better decis,decisionquestion,CS,CS112
297227,"Calculating for vendors; we get
- length(which(dupas$bg_malevendor == ))
= 
- length(which(dupas$bg_malevendor == ))
= 
- length(which(dupas$bg_femalevendor == ))
= 
- length(which(dupas$bg_femalevendor == ))
= 

Ratio of male to female vendors: :

Calculating for drivers

 female (which(dupas$bg_gender ==  & dupas$bg_boda == )
 male (which(dupas$bg_gender ==  & dupas$bg_boda == )",#decisionquestion,2,13959,"['Calculating', 'for', 'vendors', 'we', 'get', 'length', 'which', 'dupas', 'bg_malevendor', 'length', 'which', 'dupas', 'bg_malevendor', 'length', 'which', 'dupas', 'bg_femalevendor', 'length', 'which', 'dupas', 'bg_femalevendor', 'Ratio', 'of', 'male', 'to', 'female', 'vendors', 'Calculating', 'for', 'drivers', 'female', 'which', 'dupas', 'bg_gender', 'dupas', 'bg_boda', 'male', 'which', 'dupas', 'bg_gender', 'dupas', 'bg_boda']","['calcul', 'for', 'vendor', 'we', 'get', 'length', 'which', 'dupa', 'bg_malevendor', 'length', 'which', 'dupa', 'bg_malevendor', 'length', 'which', 'dupa', 'bg_femalevendor', 'length', 'which', 'dupa', 'bg_femalevendor', 'ratio', 'of', 'male', 'to', 'femal', 'vendor', 'calcul', 'for', 'driver', 'femal', 'which', 'dupa', 'bg_gender', 'dupa', 'bg_boda', 'male', 'which', 'dupa', 'bg_gender', 'dupa', 'bg_boda']","['calcul', 'vendor', 'get', 'length', 'dupa', 'bg_malevendor', 'length', 'dupa', 'bg_malevendor', 'length', 'dupa', 'bg_femalevendor', 'length', 'dupa', 'bg_femalevendor', 'ratio', 'male', 'femal', 'vendor', 'calcul', 'driver', 'femal', 'dupa', 'bg_gender', 'dupa', 'bg_boda', 'male', 'dupa', 'bg_gender', 'dupa', 'bg_boda']",calcul vendor get length dupa bg_malevendor length dupa bg_malevendor length dupa bg_femalevendor length dupa bg_femalevendor ratio male femal vendor calcul driver femal dupa bg_gender dupa bg_boda male dupa bg_gender dupa bg_boda,decisionquestion,CS,CS112
297232,"(Question )
Taxi drivers (boda-boda):
 male (which(dupas$bg_gender ==  & dupas$bg_boda == )
 female (which(dupas$bg_gender ==  & dupas$bg_boda == )

Ratio of male to female taxi drivers: :

Vendors:
> length(which(dupas$bg_malevendor == ))
[] 
> length(which(dupas$bg_malevendor == ))
[] 
> length(which(dupas$bg_femalevendor == ))
[] 
> length(which(dupas$bg_femalevendor == ))
[] 

Ratio of male to female vendors: :

(Question )
There seems to be more female taxi drivers than male and more female vendors than there are male vendors. However, I am not sure how this study shows the impact on females in the boda boda and vendor workforce.",#decisionquestion,2,13960,"['Question', 'Taxi', 'drivers', 'boda', 'boda', 'male', 'which', 'dupas', 'bg_gender', 'dupas', 'bg_boda', 'female', 'which', 'dupas', 'bg_gender', 'dupas', 'bg_boda', 'Ratio', 'of', 'male', 'to', 'female', 'taxi', 'drivers', 'Vendors', 'length', 'which', 'dupas', 'bg_malevendor', 'length', 'which', 'dupas', 'bg_malevendor', 'length', 'which', 'dupas', 'bg_femalevendor', 'length', 'which', 'dupas', 'bg_femalevendor', 'Ratio', 'of', 'male', 'to', 'female', 'vendors', 'Question', 'There', 'seems', 'to', 'be', 'more', 'female', 'taxi', 'drivers', 'than', 'male', 'and', 'more', 'female', 'vendors', 'than', 'there', 'are', 'male', 'vendors', 'However', 'I', 'am', 'not', 'sure', 'how', 'this', 'study', 'shows', 'the', 'impact', 'on', 'females', 'in', 'the', 'boda', 'boda', 'and', 'vendor', 'workforce']","['question', 'taxi', 'driver', 'boda', 'boda', 'male', 'which', 'dupa', 'bg_gender', 'dupa', 'bg_boda', 'femal', 'which', 'dupa', 'bg_gender', 'dupa', 'bg_boda', 'ratio', 'of', 'male', 'to', 'femal', 'taxi', 'driver', 'vendor', 'length', 'which', 'dupa', 'bg_malevendor', 'length', 'which', 'dupa', 'bg_malevendor', 'length', 'which', 'dupa', 'bg_femalevendor', 'length', 'which', 'dupa', 'bg_femalevendor', 'ratio', 'of', 'male', 'to', 'femal', 'vendor', 'question', 'there', 'seem', 'to', 'be', 'more', 'femal', 'taxi', 'driver', 'than', 'male', 'and', 'more', 'femal', 'vendor', 'than', 'there', 'are', 'male', 'vendor', 'howev', 'i', 'am', 'not', 'sure', 'how', 'this', 'studi', 'show', 'the', 'impact', 'on', 'femal', 'in', 'the', 'boda', 'boda', 'and', 'vendor', 'workforc']","['question', 'taxi', 'driver', 'boda', 'boda', 'male', 'dupa', 'bg_gender', 'dupa', 'bg_boda', 'femal', 'dupa', 'bg_gender', 'dupa', 'bg_boda', 'ratio', 'male', 'femal', 'taxi', 'driver', 'vendor', 'length', 'dupa', 'bg_malevendor', 'length', 'dupa', 'bg_malevendor', 'length', 'dupa', 'bg_femalevendor', 'length', 'dupa', 'bg_femalevendor', 'ratio', 'male', 'femal', 'vendor', 'question', 'seem', 'femal', 'taxi', 'driver', 'male', 'femal', 'vendor', 'male', 'vendor', 'howev', 'sure', 'studi', 'show', 'impact', 'femal', 'boda', 'boda', 'vendor', 'workforc']",question taxi driver boda boda male dupa bg_gender dupa bg_boda femal dupa bg_gender dupa bg_boda ratio male femal taxi driver vendor length dupa bg_malevendor length dupa bg_malevendor length dupa bg_femalevendor length dupa bg_femalevendor ratio male femal vendor question seem femal taxi driver male femal vendor male vendor howev sure studi show impact femal boda boda vendor workforc,decisionquestion,CS,CS112
297237,")From my calculations the percentage was a % for vendors
Percentage<-Preclass_work$bg_femalevendor==
length(Percentage==""True"")
Percentage_<-Preclass_work$bg_malevendor==
length(Percentage_==""True"")
)From my results we can see that perhaps there is no apparent effect of having either attributes thus the claim may not be right.",#decisionquestion,2,13961,"['From', 'my', 'calculations', 'the', 'percentage', 'was', 'a', 'for', 'vendors', 'Percentage', 'Preclass_work', 'bg_femalevendor', 'length', 'Percentage', 'True', 'Percentage_', 'Preclass_work', 'bg_malevendor', 'length', 'Percentage_', 'True', 'From', 'my', 'results', 'we', 'can', 'see', 'that', 'perhaps', 'there', 'is', 'no', 'apparent', 'effect', 'of', 'having', 'either', 'attributes', 'thus', 'the', 'claim', 'may', 'not', 'be', 'right']","['from', 'my', 'calcul', 'the', 'percentag', 'was', 'a', 'for', 'vendor', 'percentag', 'preclass_work', 'bg_femalevendor', 'length', 'percentag', 'true', 'percentage_', 'preclass_work', 'bg_malevendor', 'length', 'percentage_', 'true', 'from', 'my', 'result', 'we', 'can', 'see', 'that', 'perhap', 'there', 'is', 'no', 'appar', 'effect', 'of', 'have', 'either', 'attribut', 'thus', 'the', 'claim', 'may', 'not', 'be', 'right']","['calcul', 'percentag', 'vendor', 'percentag', 'preclass_work', 'bg_femalevendor', 'length', 'percentag', 'true', 'percentage_', 'preclass_work', 'bg_malevendor', 'length', 'percentage_', 'true', 'result', 'see', 'perhap', 'appar', 'effect', 'either', 'attribut', 'thus', 'claim', 'may', 'right']",calcul percentag vendor percentag preclass_work bg_femalevendor length percentag true percentage_ preclass_work bg_malevendor length percentage_ true result see perhap appar effect either attribut thus claim may right,decisionquestion,CS,CS112
102204,"Estimations:
Blocks in SF * Pigeons per block
==  * 
== ,

Then you would see if your fermi answer was within  sf of the value you're checking, if it is then the the value is plausible.

In this case, yes it is.",#estimation,3,3355,"['Estimations', 'Blocks', 'in', 'SF', 'Pigeons', 'per', 'block', 'Then', 'you', 'would', 'see', 'if', 'your', 'fermi', 'answer', 'was', 'within', 'sf', 'of', 'the', 'value', ""you're"", 'checking', 'if', 'it', 'is', 'then', 'the', 'the', 'value', 'is', 'plausible', 'In', 'this', 'case', 'yes', 'it', 'is']","['estim', 'block', 'in', 'sf', 'pigeon', 'per', 'block', 'then', 'you', 'would', 'see', 'if', 'your', 'fermi', 'answer', 'was', 'within', 'sf', 'of', 'the', 'valu', ""you'r"", 'check', 'if', 'it', 'is', 'then', 'the', 'the', 'valu', 'is', 'plausibl', 'in', 'this', 'case', 'yes', 'it', 'is']","['estim', 'block', 'sf', 'pigeon', 'per', 'block', 'see', 'fermi', 'answer', 'within', 'sf', 'valu', ""you'r"", 'check', 'valu', 'plausibl', 'case', 'yes']",estim block sf pigeon per block see fermi answer within sf valu you'r check valu plausibl case yes,estimation,CS,
141019,"The worth of the money would go down (because there's more of it), thus resulting in higher prices to maintain the same value per goods(since goods hold constant here, as an assumption == ceteris paribus). This can also be seen as with constant velocity, the M goes up , has to have a respond on the right hand side of the equation with prices go up.",#variables,4,6991,"['The', 'worth', 'of', 'the', 'money', 'would', 'go', 'down', 'because', ""there's"", 'more', 'of', 'it', 'thus', 'resulting', 'in', 'higher', 'prices', 'to', 'maintain', 'the', 'same', 'value', 'per', 'goods', 'since', 'goods', 'hold', 'constant', 'here', 'as', 'an', 'assumption', 'ceteris', 'paribus', 'This', 'can', 'also', 'be', 'seen', 'as', 'with', 'constant', 'velocity', 'the', 'M', 'goes', 'up', 'has', 'to', 'have', 'a', 'respond', 'on', 'the', 'right', 'hand', 'side', 'of', 'the', 'equation', 'with', 'prices', 'go', 'up']","['the', 'worth', 'of', 'the', 'money', 'would', 'go', 'down', 'becaus', 'there', 'more', 'of', 'it', 'thus', 'result', 'in', 'higher', 'price', 'to', 'maintain', 'the', 'same', 'valu', 'per', 'good', 'sinc', 'good', 'hold', 'constant', 'here', 'as', 'an', 'assumpt', 'ceteri', 'paribus', 'this', 'can', 'also', 'be', 'seen', 'as', 'with', 'constant', 'veloc', 'the', 'm', 'goe', 'up', 'has', 'to', 'have', 'a', 'respond', 'on', 'the', 'right', 'hand', 'side', 'of', 'the', 'equat', 'with', 'price', 'go', 'up']","['worth', 'money', 'go', 'becaus', 'thus', 'result', 'higher', 'price', 'maintain', 'valu', 'per', 'good', 'sinc', 'good', 'hold', 'constant', 'assumpt', 'ceteri', 'paribus', 'seen', 'constant', 'veloc', 'goe', 'respond', 'right', 'hand', 'side', 'equat', 'price', 'go']",worth money go becaus thus result higher price maintain valu per good sinc good hold constant assumpt ceteri paribus seen constant veloc goe respond right hand side equat price go,variables,CS,
291759,"u is the column in the Lalonde data that shows whether or not a population of people are employed. My model was to classify the 
####Decision Trees
library(tree)
library('Matching')
data(lalonde)
###to create a condition
Unemployed = ifelse(lalonde$u==, ""No"",""Yes"")
Unemployment = data.frame(lalonde,Unemployed)
Unemployment
###Using the tree function to fit the classificatio
##Using all the data except re
tree.Unemployment = tree(Unemployment ~. -lalonde$re, lalonde)
summary(tree.Unemployment)",#variables,3,13585,"['u', 'is', 'the', 'column', 'in', 'the', 'Lalonde', 'data', 'that', 'shows', 'whether', 'or', 'not', 'a', 'population', 'of', 'people', 'are', 'employed', 'My', 'model', 'was', 'to', 'classify', 'the', 'Decision', 'Trees', 'library', 'tree', 'library', ""'Matching'"", 'data', 'lalonde', 'to', 'create', 'a', 'condition', 'Unemployed', 'ifelse', 'lalonde', 'u', 'No', 'Yes', 'Unemployment', 'data', 'frame', 'lalonde', 'Unemployed', 'Unemployment', 'Using', 'the', 'tree', 'function', 'to', 'fit', 'the', 'classificatio', 'Using', 'all', 'the', 'data', 'except', 're', 'tree', 'Unemployment', 'tree', 'Unemployment', 'lalonde', 're', 'lalonde', 'summary', 'tree', 'Unemployment']","['u', 'is', 'the', 'column', 'in', 'the', 'lalond', 'data', 'that', 'show', 'whether', 'or', 'not', 'a', 'popul', 'of', 'peopl', 'are', 'employ', 'my', 'model', 'was', 'to', 'classifi', 'the', 'decis', 'tree', 'librari', 'tree', 'librari', 'match', 'data', 'lalond', 'to', 'creat', 'a', 'condit', 'unemploy', 'ifels', 'lalond', 'u', 'no', 'yes', 'unemploy', 'data', 'frame', 'lalond', 'unemploy', 'unemploy', 'use', 'the', 'tree', 'function', 'to', 'fit', 'the', 'classificatio', 'use', 'all', 'the', 'data', 'except', 're', 'tree', 'unemploy', 'tree', 'unemploy', 'lalond', 're', 'lalond', 'summari', 'tree', 'unemploy']","['u', 'column', 'lalond', 'data', 'show', 'whether', 'popul', 'peopl', 'employ', 'model', 'classifi', 'decis', 'tree', 'librari', 'tree', 'librari', 'match', 'data', 'lalond', 'creat', 'condit', 'unemploy', 'ifels', 'lalond', 'u', 'yes', 'unemploy', 'data', 'frame', 'lalond', 'unemploy', 'unemploy', 'tree', 'function', 'fit', 'classificatio', 'data', 'except', 'tree', 'unemploy', 'tree', 'unemploy', 'lalond', 'lalond', 'summari', 'tree', 'unemploy']",u column lalond data show whether popul peopl employ model classifi decis tree librari tree librari match data lalond creat condit unemploy ifels lalond u yes unemploy data frame lalond unemploy unemploy tree function fit classificatio data except tree unemploy tree unemploy lalond lalond summari tree unemploy,variables,CS,
140707,"The hash function is a one to one mapping from an object to an integer, each individual object with its own unique hash value. The resulting hash value changes with every new instance of python. This is useful when checking for equivalence between objects, e.g. when comparing two lists A = [,,,] and B = [,,,], instead of iterating through the lists or using some checking function, you can simply use the boolean hash(A)==hash(B) to check if their hash values match since the mapping is unique for every individual object with the same properties.",#abstraction,2,6964,"['The', 'hash', 'function', 'is', 'a', 'one', 'to', 'one', 'mapping', 'from', 'an', 'object', 'to', 'an', 'integer', 'each', 'individual', 'object', 'with', 'its', 'own', 'unique', 'hash', 'value', 'The', 'resulting', 'hash', 'value', 'changes', 'with', 'every', 'new', 'instance', 'of', 'python', 'This', 'is', 'useful', 'when', 'checking', 'for', 'equivalence', 'between', 'objects', 'e', 'g', 'when', 'comparing', 'two', 'lists', 'A', 'and', 'B', 'instead', 'of', 'iterating', 'through', 'the', 'lists', 'or', 'using', 'some', 'checking', 'function', 'you', 'can', 'simply', 'use', 'the', 'boolean', 'hash', 'A', 'hash', 'B', 'to', 'check', 'if', 'their', 'hash', 'values', 'match', 'since', 'the', 'mapping', 'is', 'unique', 'for', 'every', 'individual', 'object', 'with', 'the', 'same', 'properties']","['the', 'hash', 'function', 'is', 'a', 'one', 'to', 'one', 'map', 'from', 'an', 'object', 'to', 'an', 'integ', 'each', 'individu', 'object', 'with', 'it', 'own', 'uniqu', 'hash', 'valu', 'the', 'result', 'hash', 'valu', 'chang', 'with', 'everi', 'new', 'instanc', 'of', 'python', 'this', 'is', 'use', 'when', 'check', 'for', 'equival', 'between', 'object', 'e', 'g', 'when', 'compar', 'two', 'list', 'a', 'and', 'b', 'instead', 'of', 'iter', 'through', 'the', 'list', 'or', 'use', 'some', 'check', 'function', 'you', 'can', 'simpli', 'use', 'the', 'boolean', 'hash', 'a', 'hash', 'b', 'to', 'check', 'if', 'their', 'hash', 'valu', 'match', 'sinc', 'the', 'map', 'is', 'uniqu', 'for', 'everi', 'individu', 'object', 'with', 'the', 'same', 'properti']","['hash', 'function', 'one', 'one', 'map', 'object', 'integ', 'individu', 'object', 'uniqu', 'hash', 'valu', 'result', 'hash', 'valu', 'chang', 'everi', 'new', 'instanc', 'python', 'check', 'equival', 'object', 'e', 'g', 'compar', 'two', 'list', 'b', 'instead', 'iter', 'list', 'check', 'function', 'simpli', 'boolean', 'hash', 'hash', 'b', 'check', 'hash', 'valu', 'match', 'sinc', 'map', 'uniqu', 'everi', 'individu', 'object', 'properti']",hash function one one map object integ individu object uniqu hash valu result hash valu chang everi new instanc python check equival object e g compar two list b instead iter list check function simpli boolean hash hash b check hash valu match sinc map uniqu everi individu object properti,abstraction,CS,CS162
140713,"Yes, the two are different. Each object has a unique id number which is the memory adress in which x and y are stored. id() returns the memory address and here, id(x) == id(y) check whether x and y are exactly the same variables or object. x==y checks for what both x and y contain and whether they are equal. For eg. if x= and y=,  x == y would return true.",#abstraction,4,6967,"['Yes', 'the', 'two', 'are', 'different', 'Each', 'object', 'has', 'a', 'unique', 'id', 'number', 'which', 'is', 'the', 'memory', 'adress', 'in', 'which', 'x', 'and', 'y', 'are', 'stored', 'id', 'returns', 'the', 'memory', 'address', 'and', 'here', 'id', 'x', 'id', 'y', 'check', 'whether', 'x', 'and', 'y', 'are', 'exactly', 'the', 'same', 'variables', 'or', 'object', 'x', 'y', 'checks', 'for', 'what', 'both', 'x', 'and', 'y', 'contain', 'and', 'whether', 'they', 'are', 'equal', 'For', 'eg', 'if', 'x', 'and', 'y', 'x', 'y', 'would', 'return', 'true']","['yes', 'the', 'two', 'are', 'differ', 'each', 'object', 'has', 'a', 'uniqu', 'id', 'number', 'which', 'is', 'the', 'memori', 'adress', 'in', 'which', 'x', 'and', 'y', 'are', 'store', 'id', 'return', 'the', 'memori', 'address', 'and', 'here', 'id', 'x', 'id', 'y', 'check', 'whether', 'x', 'and', 'y', 'are', 'exact', 'the', 'same', 'variabl', 'or', 'object', 'x', 'y', 'check', 'for', 'what', 'both', 'x', 'and', 'y', 'contain', 'and', 'whether', 'they', 'are', 'equal', 'for', 'eg', 'if', 'x', 'and', 'y', 'x', 'y', 'would', 'return', 'true']","['yes', 'two', 'differ', 'object', 'uniqu', 'id', 'number', 'memori', 'adress', 'x', 'store', 'id', 'return', 'memori', 'address', 'id', 'x', 'id', 'check', 'whether', 'x', 'exact', 'variabl', 'object', 'x', 'check', 'x', 'contain', 'whether', 'equal', 'eg', 'x', 'x', 'return', 'true']",yes two differ object uniqu id number memori adress x store id return memori address id x id check whether x exact variabl object x check x contain whether equal eg x x return true,abstraction,CS,CS162
140713,"Every object in the Python language has its own unique id number that is guaranteed to remain the same for that object during their lifetime. However, two objects might have the same id values if their lifetimes don't overlap id(x) == id(y) can mean that obtain the id of one object briefly to use it, then you would call this. Once you get that id, the previous object is dead. This is different from x == y because in this case, you are setting the value of the variable x to be equal to the value of variable y (not their ids).",#abstraction,4,6967,"['Every', 'object', 'in', 'the', 'Python', 'language', 'has', 'its', 'own', 'unique', 'id', 'number', 'that', 'is', 'guaranteed', 'to', 'remain', 'the', 'same', 'for', 'that', 'object', 'during', 'their', 'lifetime', 'However', 'two', 'objects', 'might', 'have', 'the', 'same', 'id', 'values', 'if', 'their', 'lifetimes', ""don't"", 'overlap', 'id', 'x', 'id', 'y', 'can', 'mean', 'that', 'obtain', 'the', 'id', 'of', 'one', 'object', 'briefly', 'to', 'use', 'it', 'then', 'you', 'would', 'call', 'this', 'Once', 'you', 'get', 'that', 'id', 'the', 'previous', 'object', 'is', 'dead', 'This', 'is', 'different', 'from', 'x', 'y', 'because', 'in', 'this', 'case', 'you', 'are', 'setting', 'the', 'value', 'of', 'the', 'variable', 'x', 'to', 'be', 'equal', 'to', 'the', 'value', 'of', 'variable', 'y', 'not', 'their', 'ids']","['everi', 'object', 'in', 'the', 'python', 'languag', 'has', 'it', 'own', 'uniqu', 'id', 'number', 'that', 'is', 'guarante', 'to', 'remain', 'the', 'same', 'for', 'that', 'object', 'dure', 'their', 'lifetim', 'howev', 'two', 'object', 'might', 'have', 'the', 'same', 'id', 'valu', 'if', 'their', 'lifetim', ""don't"", 'overlap', 'id', 'x', 'id', 'y', 'can', 'mean', 'that', 'obtain', 'the', 'id', 'of', 'one', 'object', 'briefli', 'to', 'use', 'it', 'then', 'you', 'would', 'call', 'this', 'onc', 'you', 'get', 'that', 'id', 'the', 'previous', 'object', 'is', 'dead', 'this', 'is', 'differ', 'from', 'x', 'y', 'becaus', 'in', 'this', 'case', 'you', 'are', 'set', 'the', 'valu', 'of', 'the', 'variabl', 'x', 'to', 'be', 'equal', 'to', 'the', 'valu', 'of', 'variabl', 'y', 'not', 'their', 'id']","['everi', 'object', 'python', 'languag', 'uniqu', 'id', 'number', 'guarante', 'remain', 'object', 'dure', 'lifetim', 'howev', 'two', 'object', 'id', 'valu', 'lifetim', 'overlap', 'id', 'x', 'id', 'mean', 'obtain', 'id', 'one', 'object', 'briefli', 'call', 'onc', 'get', 'id', 'previous', 'object', 'dead', 'differ', 'x', 'becaus', 'case', 'set', 'valu', 'variabl', 'x', 'equal', 'valu', 'variabl', 'id']",everi object python languag uniqu id number guarante remain object dure lifetim howev two object id valu lifetim overlap id x id mean obtain id one object briefli call onc get id previous object dead differ x becaus case set valu variabl x equal valu variabl id,abstraction,CS,CS162
140713,"The unique id number is the memory address for each object in the memory. Since variables only store the link to the memory address rather than the actual object. id(x) == id(y) mean that both x and y are referencing to the same object and even the same memory address. However, x==y means that the object and value are compared as same or not. In this case, x and y are referencing to a different memory address. If id(x) and id(y) is equal, changing x would change y as they are actually the same object whereas, for second case x and y are indpendent.",#abstraction,4,6967,"['The', 'unique', 'id', 'number', 'is', 'the', 'memory', 'address', 'for', 'each', 'object', 'in', 'the', 'memory', 'Since', 'variables', 'only', 'store', 'the', 'link', 'to', 'the', 'memory', 'address', 'rather', 'than', 'the', 'actual', 'object', 'id', 'x', 'id', 'y', 'mean', 'that', 'both', 'x', 'and', 'y', 'are', 'referencing', 'to', 'the', 'same', 'object', 'and', 'even', 'the', 'same', 'memory', 'address', 'However', 'x', 'y', 'means', 'that', 'the', 'object', 'and', 'value', 'are', 'compared', 'as', 'same', 'or', 'not', 'In', 'this', 'case', 'x', 'and', 'y', 'are', 'referencing', 'to', 'a', 'different', 'memory', 'address', 'If', 'id', 'x', 'and', 'id', 'y', 'is', 'equal', 'changing', 'x', 'would', 'change', 'y', 'as', 'they', 'are', 'actually', 'the', 'same', 'object', 'whereas', 'for', 'second', 'case', 'x', 'and', 'y', 'are', 'indpendent']","['the', 'uniqu', 'id', 'number', 'is', 'the', 'memori', 'address', 'for', 'each', 'object', 'in', 'the', 'memori', 'sinc', 'variabl', 'onli', 'store', 'the', 'link', 'to', 'the', 'memori', 'address', 'rather', 'than', 'the', 'actual', 'object', 'id', 'x', 'id', 'y', 'mean', 'that', 'both', 'x', 'and', 'y', 'are', 'referenc', 'to', 'the', 'same', 'object', 'and', 'even', 'the', 'same', 'memori', 'address', 'howev', 'x', 'y', 'mean', 'that', 'the', 'object', 'and', 'valu', 'are', 'compar', 'as', 'same', 'or', 'not', 'in', 'this', 'case', 'x', 'and', 'y', 'are', 'referenc', 'to', 'a', 'differ', 'memori', 'address', 'if', 'id', 'x', 'and', 'id', 'y', 'is', 'equal', 'chang', 'x', 'would', 'chang', 'y', 'as', 'they', 'are', 'actual', 'the', 'same', 'object', 'wherea', 'for', 'second', 'case', 'x', 'and', 'y', 'are', 'indpend']","['uniqu', 'id', 'number', 'memori', 'address', 'object', 'memori', 'sinc', 'variabl', 'onli', 'store', 'link', 'memori', 'address', 'rather', 'actual', 'object', 'id', 'x', 'id', 'mean', 'x', 'referenc', 'object', 'even', 'memori', 'address', 'howev', 'x', 'mean', 'object', 'valu', 'compar', 'case', 'x', 'referenc', 'differ', 'memori', 'address', 'id', 'x', 'id', 'equal', 'chang', 'x', 'chang', 'actual', 'object', 'wherea', 'second', 'case', 'x', 'indpend']",uniqu id number memori address object memori sinc variabl onli store link memori address rather actual object id x id mean x referenc object even memori address howev x mean object valu compar case x referenc differ memori address id x id equal chang x chang actual object wherea second case x indpend,abstraction,CS,CS162
140713,"In Python, variable names (like x and y) only store a memory reference (and therefore no value or type). In practice, when we use x and y for anything, Python goes to the referred place in memory and retrieves whatever it finds there and uses that, as clearly we wanted to use whatever we stored in x and y and not the references. ID is a unique integer assigned to every variable and which remains constant during its lifetime - essentially it is conceptually identical to pointers. If the IDs of two variables are the same, it means that they point to the same place in memory, x==y is value.",#abstraction,4,6967,"['In', 'Python', 'variable', 'names', 'like', 'x', 'and', 'y', 'only', 'store', 'a', 'memory', 'reference', 'and', 'therefore', 'no', 'value', 'or', 'type', 'In', 'practice', 'when', 'we', 'use', 'x', 'and', 'y', 'for', 'anything', 'Python', 'goes', 'to', 'the', 'referred', 'place', 'in', 'memory', 'and', 'retrieves', 'whatever', 'it', 'finds', 'there', 'and', 'uses', 'that', 'as', 'clearly', 'we', 'wanted', 'to', 'use', 'whatever', 'we', 'stored', 'in', 'x', 'and', 'y', 'and', 'not', 'the', 'references', 'ID', 'is', 'a', 'unique', 'integer', 'assigned', 'to', 'every', 'variable', 'and', 'which', 'remains', 'constant', 'during', 'its', 'lifetime', 'essentially', 'it', 'is', 'conceptually', 'identical', 'to', 'pointers', 'If', 'the', 'IDs', 'of', 'two', 'variables', 'are', 'the', 'same', 'it', 'means', 'that', 'they', 'point', 'to', 'the', 'same', 'place', 'in', 'memory', 'x', 'y', 'is', 'value']","['in', 'python', 'variabl', 'name', 'like', 'x', 'and', 'y', 'onli', 'store', 'a', 'memori', 'refer', 'and', 'therefor', 'no', 'valu', 'or', 'type', 'in', 'practic', 'when', 'we', 'use', 'x', 'and', 'y', 'for', 'anyth', 'python', 'goe', 'to', 'the', 'refer', 'place', 'in', 'memori', 'and', 'retriev', 'whatev', 'it', 'find', 'there', 'and', 'use', 'that', 'as', 'clear', 'we', 'want', 'to', 'use', 'whatev', 'we', 'store', 'in', 'x', 'and', 'y', 'and', 'not', 'the', 'refer', 'id', 'is', 'a', 'uniqu', 'integ', 'assign', 'to', 'everi', 'variabl', 'and', 'which', 'remain', 'constant', 'dure', 'it', 'lifetim', 'essenti', 'it', 'is', 'conceptu', 'ident', 'to', 'pointer', 'if', 'the', 'id', 'of', 'two', 'variabl', 'are', 'the', 'same', 'it', 'mean', 'that', 'they', 'point', 'to', 'the', 'same', 'place', 'in', 'memori', 'x', 'y', 'is', 'valu']","['python', 'variabl', 'name', 'like', 'x', 'onli', 'store', 'memori', 'refer', 'therefor', 'valu', 'type', 'practic', 'x', 'anyth', 'python', 'goe', 'refer', 'place', 'memori', 'retriev', 'whatev', 'find', 'clear', 'want', 'whatev', 'store', 'x', 'refer', 'id', 'uniqu', 'integ', 'assign', 'everi', 'variabl', 'remain', 'constant', 'dure', 'lifetim', 'essenti', 'conceptu', 'ident', 'pointer', 'id', 'two', 'variabl', 'mean', 'point', 'place', 'memori', 'x', 'valu']",python variabl name like x onli store memori refer therefor valu type practic x anyth python goe refer place memori retriev whatev find clear want whatev store x refer id uniqu integ assign everi variabl remain constant dure lifetim essenti conceptu ident pointer id two variabl mean point place memori x valu,abstraction,CS,CS162
140713,Python variables are basically pointers to memory locations where the value is stored. The uniquie id is the unique memory address of the value the variable is respresenting. Every object has Its own unique address and can be refered to by multiple variables. If id(x)==id(y) it simply means the address saved in x and in y are the of same Object. The variabes should returnn the value thus (x==y)==(id(x)==id(y))==True. It is different in the context that one is a variable and the other an address but the expressions should return similar values.,#abstraction,3,6967,"['Python', 'variables', 'are', 'basically', 'pointers', 'to', 'memory', 'locations', 'where', 'the', 'value', 'is', 'stored', 'The', 'uniquie', 'id', 'is', 'the', 'unique', 'memory', 'address', 'of', 'the', 'value', 'the', 'variable', 'is', 'respresenting', 'Every', 'object', 'has', 'Its', 'own', 'unique', 'address', 'and', 'can', 'be', 'refered', 'to', 'by', 'multiple', 'variables', 'If', 'id', 'x', 'id', 'y', 'it', 'simply', 'means', 'the', 'address', 'saved', 'in', 'x', 'and', 'in', 'y', 'are', 'the', 'of', 'same', 'Object', 'The', 'variabes', 'should', 'returnn', 'the', 'value', 'thus', 'x', 'y', 'id', 'x', 'id', 'y', 'True', 'It', 'is', 'different', 'in', 'the', 'context', 'that', 'one', 'is', 'a', 'variable', 'and', 'the', 'other', 'an', 'address', 'but', 'the', 'expressions', 'should', 'return', 'similar', 'values']","['python', 'variabl', 'are', 'basic', 'pointer', 'to', 'memori', 'locat', 'where', 'the', 'valu', 'is', 'store', 'the', 'uniqui', 'id', 'is', 'the', 'uniqu', 'memori', 'address', 'of', 'the', 'valu', 'the', 'variabl', 'is', 'respres', 'everi', 'object', 'has', 'it', 'own', 'uniqu', 'address', 'and', 'can', 'be', 'refer', 'to', 'by', 'multipl', 'variabl', 'if', 'id', 'x', 'id', 'y', 'it', 'simpli', 'mean', 'the', 'address', 'save', 'in', 'x', 'and', 'in', 'y', 'are', 'the', 'of', 'same', 'object', 'the', 'variab', 'should', 'returnn', 'the', 'valu', 'thus', 'x', 'y', 'id', 'x', 'id', 'y', 'true', 'it', 'is', 'differ', 'in', 'the', 'context', 'that', 'one', 'is', 'a', 'variabl', 'and', 'the', 'other', 'an', 'address', 'but', 'the', 'express', 'should', 'return', 'similar', 'valu']","['python', 'variabl', 'basic', 'pointer', 'memori', 'locat', 'valu', 'store', 'uniqui', 'id', 'uniqu', 'memori', 'address', 'valu', 'variabl', 'respres', 'everi', 'object', 'uniqu', 'address', 'refer', 'multipl', 'variabl', 'id', 'x', 'id', 'simpli', 'mean', 'address', 'save', 'x', 'object', 'variab', 'returnn', 'valu', 'thus', 'x', 'id', 'x', 'id', 'true', 'differ', 'context', 'one', 'variabl', 'address', 'express', 'return', 'similar', 'valu']",python variabl basic pointer memori locat valu store uniqui id uniqu memori address valu variabl respres everi object uniqu address refer multipl variabl id x id simpli mean address save x object variab returnn valu thus x id x id true differ context one variabl address express return similar valu,abstraction,CS,CS162
140713,"In python, every object has a unique id number; different object has different number. Think of that as a better fingerprint of a human, so that no two living being has the same number.

Technically, id() shows the identity of the location of the object in memory; each object has its unique place in memory and can't be overlapped.

id(x) == id(y) is different from x == y; the latter one shows that the two objects is the same type and has the same value, while the former one shows that x and y are literallt the same thing that shared the same memory (x and y are nickname of the same thing).",#abstraction,4,6967,"['In', 'python', 'every', 'object', 'has', 'a', 'unique', 'id', 'number', 'different', 'object', 'has', 'different', 'number', 'Think', 'of', 'that', 'as', 'a', 'better', 'fingerprint', 'of', 'a', 'human', 'so', 'that', 'no', 'two', 'living', 'being', 'has', 'the', 'same', 'number', 'Technically', 'id', 'shows', 'the', 'identity', 'of', 'the', 'location', 'of', 'the', 'object', 'in', 'memory', 'each', 'object', 'has', 'its', 'unique', 'place', 'in', 'memory', 'and', ""can't"", 'be', 'overlapped', 'id', 'x', 'id', 'y', 'is', 'different', 'from', 'x', 'y', 'the', 'latter', 'one', 'shows', 'that', 'the', 'two', 'objects', 'is', 'the', 'same', 'type', 'and', 'has', 'the', 'same', 'value', 'while', 'the', 'former', 'one', 'shows', 'that', 'x', 'and', 'y', 'are', 'literallt', 'the', 'same', 'thing', 'that', 'shared', 'the', 'same', 'memory', 'x', 'and', 'y', 'are', 'nickname', 'of', 'the', 'same', 'thing']","['in', 'python', 'everi', 'object', 'has', 'a', 'uniqu', 'id', 'number', 'differ', 'object', 'has', 'differ', 'number', 'think', 'of', 'that', 'as', 'a', 'better', 'fingerprint', 'of', 'a', 'human', 'so', 'that', 'no', 'two', 'live', 'be', 'has', 'the', 'same', 'number', 'technic', 'id', 'show', 'the', 'ident', 'of', 'the', 'locat', 'of', 'the', 'object', 'in', 'memori', 'each', 'object', 'has', 'it', 'uniqu', 'place', 'in', 'memori', 'and', ""can't"", 'be', 'overlap', 'id', 'x', 'id', 'y', 'is', 'differ', 'from', 'x', 'y', 'the', 'latter', 'one', 'show', 'that', 'the', 'two', 'object', 'is', 'the', 'same', 'type', 'and', 'has', 'the', 'same', 'valu', 'while', 'the', 'former', 'one', 'show', 'that', 'x', 'and', 'y', 'are', 'literallt', 'the', 'same', 'thing', 'that', 'share', 'the', 'same', 'memori', 'x', 'and', 'y', 'are', 'nicknam', 'of', 'the', 'same', 'thing']","['python', 'everi', 'object', 'uniqu', 'id', 'number', 'differ', 'object', 'differ', 'number', 'think', 'better', 'fingerprint', 'human', 'two', 'live', 'number', 'technic', 'id', 'show', 'ident', 'locat', 'object', 'memori', 'object', 'uniqu', 'place', 'memori', ""can't"", 'overlap', 'id', 'x', 'id', 'differ', 'x', 'latter', 'one', 'show', 'two', 'object', 'type', 'valu', 'former', 'one', 'show', 'x', 'literallt', 'thing', 'share', 'memori', 'x', 'nicknam', 'thing']",python everi object uniqu id number differ object differ number think better fingerprint human two live number technic id show ident locat object memori object uniqu place memori can't overlap id x id differ x latter one show two object type valu former one show x literallt thing share memori x nicknam thing,abstraction,CS,CS162
140713,"In python variables are actualy pointers, like in low-level languages. They actualy just tell where in memory the variable is stored.If we say that a =  we actualy asign space for  in the memory (the ""real"" space is at `hex(id(a))` as for my understanding). id(x)==id(y) means that the two are stored at the same place or, are the same ""real"" variable (as opposed to same reference), which is different from being the same reference.",#abstraction,3,6967,"['In', 'python', 'variables', 'are', 'actualy', 'pointers', 'like', 'in', 'low', 'level', 'languages', 'They', 'actualy', 'just', 'tell', 'where', 'in', 'memory', 'the', 'variable', 'is', 'stored', 'If', 'we', 'say', 'that', 'a', 'we', 'actualy', 'asign', 'space', 'for', 'in', 'the', 'memory', 'the', 'real', 'space', 'is', 'at', 'hex', 'id', 'a', 'as', 'for', 'my', 'understanding', 'id', 'x', 'id', 'y', 'means', 'that', 'the', 'two', 'are', 'stored', 'at', 'the', 'same', 'place', 'or', 'are', 'the', 'same', 'real', 'variable', 'as', 'opposed', 'to', 'same', 'reference', 'which', 'is', 'different', 'from', 'being', 'the', 'same', 'reference']","['in', 'python', 'variabl', 'are', 'actuali', 'pointer', 'like', 'in', 'low', 'level', 'languag', 'they', 'actuali', 'just', 'tell', 'where', 'in', 'memori', 'the', 'variabl', 'is', 'store', 'if', 'we', 'say', 'that', 'a', 'we', 'actuali', 'asign', 'space', 'for', 'in', 'the', 'memori', 'the', 'real', 'space', 'is', 'at', 'hex', 'id', 'a', 'as', 'for', 'my', 'understand', 'id', 'x', 'id', 'y', 'mean', 'that', 'the', 'two', 'are', 'store', 'at', 'the', 'same', 'place', 'or', 'are', 'the', 'same', 'real', 'variabl', 'as', 'oppos', 'to', 'same', 'refer', 'which', 'is', 'differ', 'from', 'be', 'the', 'same', 'refer']","['python', 'variabl', 'actuali', 'pointer', 'like', 'low', 'level', 'languag', 'actuali', 'tell', 'memori', 'variabl', 'store', 'say', 'actuali', 'asign', 'space', 'memori', 'real', 'space', 'hex', 'id', 'understand', 'id', 'x', 'id', 'mean', 'two', 'store', 'place', 'real', 'variabl', 'oppos', 'refer', 'differ', 'refer']",python variabl actuali pointer like low level languag actuali tell memori variabl store say actuali asign space memori real space hex id understand id x id mean two store place real variabl oppos refer differ refer,abstraction,CS,CS162
140713,"id() in python will return a unique integer for the object. The integer remains constant during its lifetime. id(x) == id(y) means that these two objects are identical. It's the same as saying ""x is y"" in Python. Just for the result I think this should return the same thing as ""x==y"", but the process is a bit different, since the first one compares the id attributes of the variable object, not the value that x/y is linking/referring to.",#abstraction,3,6967,"['id', 'in', 'python', 'will', 'return', 'a', 'unique', 'integer', 'for', 'the', 'object', 'The', 'integer', 'remains', 'constant', 'during', 'its', 'lifetime', 'id', 'x', 'id', 'y', 'means', 'that', 'these', 'two', 'objects', 'are', 'identical', ""It's"", 'the', 'same', 'as', 'saying', 'x', 'is', 'y', 'in', 'Python', 'Just', 'for', 'the', 'result', 'I', 'think', 'this', 'should', 'return', 'the', 'same', 'thing', 'as', 'x', 'y', 'but', 'the', 'process', 'is', 'a', 'bit', 'different', 'since', 'the', 'first', 'one', 'compares', 'the', 'id', 'attributes', 'of', 'the', 'variable', 'object', 'not', 'the', 'value', 'that', 'x', 'y', 'is', 'linking', 'referring', 'to']","['id', 'in', 'python', 'will', 'return', 'a', 'uniqu', 'integ', 'for', 'the', 'object', 'the', 'integ', 'remain', 'constant', 'dure', 'it', 'lifetim', 'id', 'x', 'id', 'y', 'mean', 'that', 'these', 'two', 'object', 'are', 'ident', 'it', 'the', 'same', 'as', 'say', 'x', 'is', 'y', 'in', 'python', 'just', 'for', 'the', 'result', 'i', 'think', 'this', 'should', 'return', 'the', 'same', 'thing', 'as', 'x', 'y', 'but', 'the', 'process', 'is', 'a', 'bit', 'differ', 'sinc', 'the', 'first', 'one', 'compar', 'the', 'id', 'attribut', 'of', 'the', 'variabl', 'object', 'not', 'the', 'valu', 'that', 'x', 'y', 'is', 'link', 'refer', 'to']","['id', 'python', 'return', 'uniqu', 'integ', 'object', 'integ', 'remain', 'constant', 'dure', 'lifetim', 'id', 'x', 'id', 'mean', 'two', 'object', 'ident', 'say', 'x', 'python', 'result', 'think', 'return', 'thing', 'x', 'process', 'bit', 'differ', 'sinc', 'first', 'one', 'compar', 'id', 'attribut', 'variabl', 'object', 'valu', 'x', 'link', 'refer']",id python return uniqu integ object integ remain constant dure lifetim id x id mean two object ident say x python result think return thing x process bit differ sinc first one compar id attribut variabl object valu x link refer,abstraction,CS,CS162
140713,"Variables are references in python. So id(x) returns the id given to the object stored in x. if id(x) == id (y), it means that the same object is stored in x and y, which could be interpreted as (x == y) == True for as long as we do not store something else in x or y.",#abstraction,4,6967,"['Variables', 'are', 'references', 'in', 'python', 'So', 'id', 'x', 'returns', 'the', 'id', 'given', 'to', 'the', 'object', 'stored', 'in', 'x', 'if', 'id', 'x', 'id', 'y', 'it', 'means', 'that', 'the', 'same', 'object', 'is', 'stored', 'in', 'x', 'and', 'y', 'which', 'could', 'be', 'interpreted', 'as', 'x', 'y', 'True', 'for', 'as', 'long', 'as', 'we', 'do', 'not', 'store', 'something', 'else', 'in', 'x', 'or', 'y']","['variabl', 'are', 'refer', 'in', 'python', 'so', 'id', 'x', 'return', 'the', 'id', 'given', 'to', 'the', 'object', 'store', 'in', 'x', 'if', 'id', 'x', 'id', 'y', 'it', 'mean', 'that', 'the', 'same', 'object', 'is', 'store', 'in', 'x', 'and', 'y', 'which', 'could', 'be', 'interpret', 'as', 'x', 'y', 'true', 'for', 'as', 'long', 'as', 'we', 'do', 'not', 'store', 'someth', 'els', 'in', 'x', 'or', 'y']","['variabl', 'refer', 'python', 'id', 'x', 'return', 'id', 'given', 'object', 'store', 'x', 'id', 'x', 'id', 'mean', 'object', 'store', 'x', 'interpret', 'x', 'true', 'long', 'store', 'someth', 'els', 'x']",variabl refer python id x return id given object store x id x id mean object store x interpret x true long store someth els x,abstraction,CS,CS162
140713,"id(x) = address of x in memory. id(x)==id(y) is different from x==y because two different objects can occupy the same memory address at different times without being equal. In one run of the python kernel/one lifetime, id(x) == id(y) is equivalent to x == y. However, two different objects with non-overlapping lifetimes (say, if you run the python kernel multiple times, keeping track of all the ids you've found) can share the same memory address, so in this case id(x) == id(y) and x == y aren't the same. Two objects that are the same aren't even guaranteed to have the same id across kernel runs",#abstraction,4,6967,"['id', 'x', 'address', 'of', 'x', 'in', 'memory', 'id', 'x', 'id', 'y', 'is', 'different', 'from', 'x', 'y', 'because', 'two', 'different', 'objects', 'can', 'occupy', 'the', 'same', 'memory', 'address', 'at', 'different', 'times', 'without', 'being', 'equal', 'In', 'one', 'run', 'of', 'the', 'python', 'kernel', 'one', 'lifetime', 'id', 'x', 'id', 'y', 'is', 'equivalent', 'to', 'x', 'y', 'However', 'two', 'different', 'objects', 'with', 'non', 'overlapping', 'lifetimes', 'say', 'if', 'you', 'run', 'the', 'python', 'kernel', 'multiple', 'times', 'keeping', 'track', 'of', 'all', 'the', 'ids', ""you've"", 'found', 'can', 'share', 'the', 'same', 'memory', 'address', 'so', 'in', 'this', 'case', 'id', 'x', 'id', 'y', 'and', 'x', 'y', ""aren't"", 'the', 'same', 'Two', 'objects', 'that', 'are', 'the', 'same', ""aren't"", 'even', 'guaranteed', 'to', 'have', 'the', 'same', 'id', 'across', 'kernel', 'runs']","['id', 'x', 'address', 'of', 'x', 'in', 'memori', 'id', 'x', 'id', 'y', 'is', 'differ', 'from', 'x', 'y', 'becaus', 'two', 'differ', 'object', 'can', 'occupi', 'the', 'same', 'memori', 'address', 'at', 'differ', 'time', 'without', 'be', 'equal', 'in', 'one', 'run', 'of', 'the', 'python', 'kernel', 'one', 'lifetim', 'id', 'x', 'id', 'y', 'is', 'equival', 'to', 'x', 'y', 'howev', 'two', 'differ', 'object', 'with', 'non', 'overlap', 'lifetim', 'say', 'if', 'you', 'run', 'the', 'python', 'kernel', 'multipl', 'time', 'keep', 'track', 'of', 'all', 'the', 'id', ""you'v"", 'found', 'can', 'share', 'the', 'same', 'memori', 'address', 'so', 'in', 'this', 'case', 'id', 'x', 'id', 'y', 'and', 'x', 'y', ""aren't"", 'the', 'same', 'two', 'object', 'that', 'are', 'the', 'same', ""aren't"", 'even', 'guarante', 'to', 'have', 'the', 'same', 'id', 'across', 'kernel', 'run']","['id', 'x', 'address', 'x', 'memori', 'id', 'x', 'id', 'differ', 'x', 'becaus', 'two', 'differ', 'object', 'occupi', 'memori', 'address', 'differ', 'time', 'without', 'equal', 'one', 'run', 'python', 'kernel', 'one', 'lifetim', 'id', 'x', 'id', 'equival', 'x', 'howev', 'two', 'differ', 'object', 'non', 'overlap', 'lifetim', 'say', 'run', 'python', 'kernel', 'multipl', 'time', 'keep', 'track', 'id', ""you'v"", 'found', 'share', 'memori', 'address', 'case', 'id', 'x', 'id', 'x', 'two', 'object', 'even', 'guarante', 'id', 'across', 'kernel', 'run']",id x address x memori id x id differ x becaus two differ object occupi memori address differ time without equal one run python kernel one lifetim id x id equival x howev two differ object non overlap lifetim say run python kernel multipl time keep track id you'v found share memori address case id x id x two object even guarante id across kernel run,abstraction,CS,CS162
140713,"id is the identity of the object which guarantee the uniqueness of the object. in Cpython implementation the id is the address. id(x) == id(y) means x is y, they reference to the same address. This is the case when you do y = x, or x = y. However x==y means their content are equal, so if x==, y==, then x==y. However x and y in this case can pointed to different instantiates of the object. Moreover, if id(x)==id(y), then x must == y, but not the other way around",#abstraction,4,6967,"['id', 'is', 'the', 'identity', 'of', 'the', 'object', 'which', 'guarantee', 'the', 'uniqueness', 'of', 'the', 'object', 'in', 'Cpython', 'implementation', 'the', 'id', 'is', 'the', 'address', 'id', 'x', 'id', 'y', 'means', 'x', 'is', 'y', 'they', 'reference', 'to', 'the', 'same', 'address', 'This', 'is', 'the', 'case', 'when', 'you', 'do', 'y', 'x', 'or', 'x', 'y', 'However', 'x', 'y', 'means', 'their', 'content', 'are', 'equal', 'so', 'if', 'x', 'y', 'then', 'x', 'y', 'However', 'x', 'and', 'y', 'in', 'this', 'case', 'can', 'pointed', 'to', 'different', 'instantiates', 'of', 'the', 'object', 'Moreover', 'if', 'id', 'x', 'id', 'y', 'then', 'x', 'must', 'y', 'but', 'not', 'the', 'other', 'way', 'around']","['id', 'is', 'the', 'ident', 'of', 'the', 'object', 'which', 'guarante', 'the', 'uniqu', 'of', 'the', 'object', 'in', 'cpython', 'implement', 'the', 'id', 'is', 'the', 'address', 'id', 'x', 'id', 'y', 'mean', 'x', 'is', 'y', 'they', 'refer', 'to', 'the', 'same', 'address', 'this', 'is', 'the', 'case', 'when', 'you', 'do', 'y', 'x', 'or', 'x', 'y', 'howev', 'x', 'y', 'mean', 'their', 'content', 'are', 'equal', 'so', 'if', 'x', 'y', 'then', 'x', 'y', 'howev', 'x', 'and', 'y', 'in', 'this', 'case', 'can', 'point', 'to', 'differ', 'instanti', 'of', 'the', 'object', 'moreov', 'if', 'id', 'x', 'id', 'y', 'then', 'x', 'must', 'y', 'but', 'not', 'the', 'other', 'way', 'around']","['id', 'ident', 'object', 'guarante', 'uniqu', 'object', 'cpython', 'implement', 'id', 'address', 'id', 'x', 'id', 'mean', 'x', 'refer', 'address', 'case', 'x', 'x', 'howev', 'x', 'mean', 'content', 'equal', 'x', 'x', 'howev', 'x', 'case', 'point', 'differ', 'instanti', 'object', 'moreov', 'id', 'x', 'id', 'x', 'must', 'way', 'around']",id ident object guarante uniqu object cpython implement id address id x id mean x refer address case x x howev x mean content equal x x howev x case point differ instanti object moreov id x id x must way around,abstraction,CS,CS162
266489,"class randu_generator(input):

    def __init__(self):
        from datetime import datetime
        self.seed = int((datetime.utcnow() - datetime.min).total_seconds())

        self.c = 
        self.m = 

    def get_number(self):
            return abs((self.c * self.seed) % self.m)

if __name__ == '__main__':

    import argparse

    parser = argparse.ArgumentParser(description=""BlackJack Game"")
    parser.add_argument('--rand_method', default='randU',
                        help='The random number generator method. Choose between \'Mersenne\' and \'randU\'.')
    args = p",#abstraction,4,12342,"['class', 'randu_generator', 'input', 'def', '__init__', 'self', 'from', 'datetime', 'import', 'datetime', 'self', 'seed', 'int', 'datetime', 'utcnow', 'datetime', 'min', 'total_seconds', 'self', 'c', 'self', 'm', 'def', 'get_number', 'self', 'return', 'abs', 'self', 'c', 'self', 'seed', 'self', 'm', 'if', '__name__', ""'__main__'"", 'import', 'argparse', 'parser', 'argparse', 'ArgumentParser', 'description', 'BlackJack', 'Game', 'parser', 'add_argument', ""'"", ""rand_method'"", 'default', ""'randU'"", 'help', ""'The"", 'random', 'number', 'generator', 'method', 'Choose', 'between', ""'Mersenne"", ""'"", 'and', ""'randU"", ""'"", ""'"", 'args', 'p']","['class', 'randu_gener', 'input', 'def', '__init__', 'self', 'from', 'datetim', 'import', 'datetim', 'self', 'seed', 'int', 'datetim', 'utcnow', 'datetim', 'min', 'total_second', 'self', 'c', 'self', 'm', 'def', 'get_numb', 'self', 'return', 'ab', 'self', 'c', 'self', 'seed', 'self', 'm', 'if', '__name__', '__main__', 'import', 'argpars', 'parser', 'argpars', 'argumentpars', 'descript', 'blackjack', 'game', 'parser', 'add_argu', ""'"", 'rand_method', 'default', 'randu', 'help', 'the', 'random', 'number', 'generat', 'method', 'choos', 'between', 'mersenn', ""'"", 'and', 'randu', ""'"", ""'"", 'arg', 'p']","['class', 'randu_gener', 'input', 'def', '__init__', 'self', 'datetim', 'import', 'datetim', 'self', 'seed', 'int', 'datetim', 'utcnow', 'datetim', 'min', 'total_second', 'self', 'c', 'self', 'def', 'get_numb', 'self', 'return', 'ab', 'self', 'c', 'self', 'seed', 'self', '__name__', '__main__', 'import', 'argpars', 'parser', 'argpars', 'argumentpars', 'descript', 'blackjack', 'game', 'parser', 'add_argu', ""'"", 'rand_method', 'default', 'randu', 'help', 'random', 'number', 'generat', 'method', 'choos', 'mersenn', ""'"", 'randu', ""'"", ""'"", 'arg', 'p']",class randu_gener input def __init__ self datetim import datetim self seed int datetim utcnow datetim min total_second self c self def get_numb self return ab self c self seed self __name__ __main__ import argpars parser argpars argumentpars descript blackjack game parser add_argu ' rand_method default randu help random number generat method choos mersenn ' randu ' ' arg p,abstraction,CS,CS162
266522,"The objects have ids based on their content, rather than the pointers. id()==id(a=)==id(b=a), since all of these pointers point to the same value in memory (). When we call x==y, we're actually calling (content of pointer x)==(content of pointer y) which is the same as id(x)==id(y). Hash numbers also map objects to unique ids, but these are constant per pointer rather than referring to a constant value where the content is stored in memory.",#abstraction,3,12348,"['The', 'objects', 'have', 'ids', 'based', 'on', 'their', 'content', 'rather', 'than', 'the', 'pointers', 'id', 'id', 'a', 'id', 'b', 'a', 'since', 'all', 'of', 'these', 'pointers', 'point', 'to', 'the', 'same', 'value', 'in', 'memory', 'When', 'we', 'call', 'x', 'y', ""we're"", 'actually', 'calling', 'content', 'of', 'pointer', 'x', 'content', 'of', 'pointer', 'y', 'which', 'is', 'the', 'same', 'as', 'id', 'x', 'id', 'y', 'Hash', 'numbers', 'also', 'map', 'objects', 'to', 'unique', 'ids', 'but', 'these', 'are', 'constant', 'per', 'pointer', 'rather', 'than', 'referring', 'to', 'a', 'constant', 'value', 'where', 'the', 'content', 'is', 'stored', 'in', 'memory']","['the', 'object', 'have', 'id', 'base', 'on', 'their', 'content', 'rather', 'than', 'the', 'pointer', 'id', 'id', 'a', 'id', 'b', 'a', 'sinc', 'all', 'of', 'these', 'pointer', 'point', 'to', 'the', 'same', 'valu', 'in', 'memori', 'when', 'we', 'call', 'x', 'y', ""we'r"", 'actual', 'call', 'content', 'of', 'pointer', 'x', 'content', 'of', 'pointer', 'y', 'which', 'is', 'the', 'same', 'as', 'id', 'x', 'id', 'y', 'hash', 'number', 'also', 'map', 'object', 'to', 'uniqu', 'id', 'but', 'these', 'are', 'constant', 'per', 'pointer', 'rather', 'than', 'refer', 'to', 'a', 'constant', 'valu', 'where', 'the', 'content', 'is', 'store', 'in', 'memori']","['object', 'id', 'base', 'content', 'rather', 'pointer', 'id', 'id', 'id', 'b', 'sinc', 'pointer', 'point', 'valu', 'memori', 'call', 'x', ""we'r"", 'actual', 'call', 'content', 'pointer', 'x', 'content', 'pointer', 'id', 'x', 'id', 'hash', 'number', 'map', 'object', 'uniqu', 'id', 'constant', 'per', 'pointer', 'rather', 'refer', 'constant', 'valu', 'content', 'store', 'memori']",object id base content rather pointer id id id b sinc pointer point valu memori call x we'r actual call content pointer x content pointer id x id hash number map object uniqu id constant per pointer rather refer constant valu content store memori,abstraction,CS,CS162
266522,"unique id number means every object has a unique location in the memory. id(x) == id(y) means that the location of both objects, x and y, are at the same place. It is different from saying x == y, though I think x=y will allow id(x) = id(y) to be possible.",#abstraction,3,12348,"['unique', 'id', 'number', 'means', 'every', 'object', 'has', 'a', 'unique', 'location', 'in', 'the', 'memory', 'id', 'x', 'id', 'y', 'means', 'that', 'the', 'location', 'of', 'both', 'objects', 'x', 'and', 'y', 'are', 'at', 'the', 'same', 'place', 'It', 'is', 'different', 'from', 'saying', 'x', 'y', 'though', 'I', 'think', 'x', 'y', 'will', 'allow', 'id', 'x', 'id', 'y', 'to', 'be', 'possible']","['uniqu', 'id', 'number', 'mean', 'everi', 'object', 'has', 'a', 'uniqu', 'locat', 'in', 'the', 'memori', 'id', 'x', 'id', 'y', 'mean', 'that', 'the', 'locat', 'of', 'both', 'object', 'x', 'and', 'y', 'are', 'at', 'the', 'same', 'place', 'it', 'is', 'differ', 'from', 'say', 'x', 'y', 'though', 'i', 'think', 'x', 'y', 'will', 'allow', 'id', 'x', 'id', 'y', 'to', 'be', 'possibl']","['uniqu', 'id', 'number', 'mean', 'everi', 'object', 'uniqu', 'locat', 'memori', 'id', 'x', 'id', 'mean', 'locat', 'object', 'x', 'place', 'differ', 'say', 'x', 'though', 'think', 'x', 'allow', 'id', 'x', 'id', 'possibl']",uniqu id number mean everi object uniqu locat memori id x id mean locat object x place differ say x though think x allow id x id possibl,abstraction,CS,CS162
266522,"Id refers to identity, which is a unique integers that all the objects have. If two objects a and b have the same identity, that implies that they are two references of the same object that is stores somewhere in the memory. id(x) == id(y) would be an operation comparing two objects by their identity, whereas x==y compares by the reference. If the second is true, the first is implied, however the first can be true without a second one. If x and y have different types, they will be stored in different places (id(x) != id(y)), whereas x==y will show true (==. -> True)",#abstraction,4,12348,"['Id', 'refers', 'to', 'identity', 'which', 'is', 'a', 'unique', 'integers', 'that', 'all', 'the', 'objects', 'have', 'If', 'two', 'objects', 'a', 'and', 'b', 'have', 'the', 'same', 'identity', 'that', 'implies', 'that', 'they', 'are', 'two', 'references', 'of', 'the', 'same', 'object', 'that', 'is', 'stores', 'somewhere', 'in', 'the', 'memory', 'id', 'x', 'id', 'y', 'would', 'be', 'an', 'operation', 'comparing', 'two', 'objects', 'by', 'their', 'identity', 'whereas', 'x', 'y', 'compares', 'by', 'the', 'reference', 'If', 'the', 'second', 'is', 'true', 'the', 'first', 'is', 'implied', 'however', 'the', 'first', 'can', 'be', 'true', 'without', 'a', 'second', 'one', 'If', 'x', 'and', 'y', 'have', 'different', 'types', 'they', 'will', 'be', 'stored', 'in', 'different', 'places', 'id', 'x', 'id', 'y', 'whereas', 'x', 'y', 'will', 'show', 'true', 'True']","['id', 'refer', 'to', 'ident', 'which', 'is', 'a', 'uniqu', 'integ', 'that', 'all', 'the', 'object', 'have', 'if', 'two', 'object', 'a', 'and', 'b', 'have', 'the', 'same', 'ident', 'that', 'impli', 'that', 'they', 'are', 'two', 'refer', 'of', 'the', 'same', 'object', 'that', 'is', 'store', 'somewher', 'in', 'the', 'memori', 'id', 'x', 'id', 'y', 'would', 'be', 'an', 'oper', 'compar', 'two', 'object', 'by', 'their', 'ident', 'wherea', 'x', 'y', 'compar', 'by', 'the', 'refer', 'if', 'the', 'second', 'is', 'true', 'the', 'first', 'is', 'impli', 'howev', 'the', 'first', 'can', 'be', 'true', 'without', 'a', 'second', 'one', 'if', 'x', 'and', 'y', 'have', 'differ', 'type', 'they', 'will', 'be', 'store', 'in', 'differ', 'place', 'id', 'x', 'id', 'y', 'wherea', 'x', 'y', 'will', 'show', 'true', 'true']","['id', 'refer', 'ident', 'uniqu', 'integ', 'object', 'two', 'object', 'b', 'ident', 'impli', 'two', 'refer', 'object', 'store', 'somewher', 'memori', 'id', 'x', 'id', 'oper', 'compar', 'two', 'object', 'ident', 'wherea', 'x', 'compar', 'refer', 'second', 'true', 'first', 'impli', 'howev', 'first', 'true', 'without', 'second', 'one', 'x', 'differ', 'type', 'store', 'differ', 'place', 'id', 'x', 'id', 'wherea', 'x', 'show', 'true', 'true']",id refer ident uniqu integ object two object b ident impli two refer object store somewher memori id x id oper compar two object ident wherea x compar refer second true first impli howev first true without second one x differ type store differ place id x id wherea x show true true,abstraction,CS,CS162
266522,"Variables are stored in memory, id() is the identifier of that space in memory.
If we have id(x) == id(y), we can say with definate that x == y.
However, if we know x == y, we cannot say id(x) == id(y), as x==y only donate to the value, not identifier.

e.g.
x = 
y = x
x and y will have the same value and id.",#abstraction,4,12348,"['Variables', 'are', 'stored', 'in', 'memory', 'id', 'is', 'the', 'identifier', 'of', 'that', 'space', 'in', 'memory', 'If', 'we', 'have', 'id', 'x', 'id', 'y', 'we', 'can', 'say', 'with', 'definate', 'that', 'x', 'y', 'However', 'if', 'we', 'know', 'x', 'y', 'we', 'cannot', 'say', 'id', 'x', 'id', 'y', 'as', 'x', 'y', 'only', 'donate', 'to', 'the', 'value', 'not', 'identifier', 'e', 'g', 'x', 'y', 'x', 'x', 'and', 'y', 'will', 'have', 'the', 'same', 'value', 'and', 'id']","['variabl', 'are', 'store', 'in', 'memori', 'id', 'is', 'the', 'identifi', 'of', 'that', 'space', 'in', 'memori', 'if', 'we', 'have', 'id', 'x', 'id', 'y', 'we', 'can', 'say', 'with', 'defin', 'that', 'x', 'y', 'howev', 'if', 'we', 'know', 'x', 'y', 'we', 'cannot', 'say', 'id', 'x', 'id', 'y', 'as', 'x', 'y', 'onli', 'donat', 'to', 'the', 'valu', 'not', 'identifi', 'e', 'g', 'x', 'y', 'x', 'x', 'and', 'y', 'will', 'have', 'the', 'same', 'valu', 'and', 'id']","['variabl', 'store', 'memori', 'id', 'identifi', 'space', 'memori', 'id', 'x', 'id', 'say', 'defin', 'x', 'howev', 'know', 'x', 'cannot', 'say', 'id', 'x', 'id', 'x', 'onli', 'donat', 'valu', 'identifi', 'e', 'g', 'x', 'x', 'x', 'valu', 'id']",variabl store memori id identifi space memori id x id say defin x howev know x cannot say id x id x onli donat valu identifi e g x x x valu id,abstraction,CS,CS162
266522,"Each object that is created has an id number. So, when I say x = , x is the variable name, which is also a pointer to where the object (this specific object which is the int  and has an id number) is in memory. When i write y = , it creates a new object, and id(x) == id(y) would be false, although x==y would be true. This is b/c the objects are different (were created differently, have different ids), but the value is the same. Instead, if i say x=, y=x, then y is just another variable name pointing to the same object, so id(x) == id(y) would be true (same object, same id, same memory)",#abstraction,4,12348,"['Each', 'object', 'that', 'is', 'created', 'has', 'an', 'id', 'number', 'So', 'when', 'I', 'say', 'x', 'x', 'is', 'the', 'variable', 'name', 'which', 'is', 'also', 'a', 'pointer', 'to', 'where', 'the', 'object', 'this', 'specific', 'object', 'which', 'is', 'the', 'int', 'and', 'has', 'an', 'id', 'number', 'is', 'in', 'memory', 'When', 'i', 'write', 'y', 'it', 'creates', 'a', 'new', 'object', 'and', 'id', 'x', 'id', 'y', 'would', 'be', 'false', 'although', 'x', 'y', 'would', 'be', 'true', 'This', 'is', 'b', 'c', 'the', 'objects', 'are', 'different', 'were', 'created', 'differently', 'have', 'different', 'ids', 'but', 'the', 'value', 'is', 'the', 'same', 'Instead', 'if', 'i', 'say', 'x', 'y', 'x', 'then', 'y', 'is', 'just', 'another', 'variable', 'name', 'pointing', 'to', 'the', 'same', 'object', 'so', 'id', 'x', 'id', 'y', 'would', 'be', 'true', 'same', 'object', 'same', 'id', 'same', 'memory']","['each', 'object', 'that', 'is', 'creat', 'has', 'an', 'id', 'number', 'so', 'when', 'i', 'say', 'x', 'x', 'is', 'the', 'variabl', 'name', 'which', 'is', 'also', 'a', 'pointer', 'to', 'where', 'the', 'object', 'this', 'specif', 'object', 'which', 'is', 'the', 'int', 'and', 'has', 'an', 'id', 'number', 'is', 'in', 'memori', 'when', 'i', 'write', 'y', 'it', 'creat', 'a', 'new', 'object', 'and', 'id', 'x', 'id', 'y', 'would', 'be', 'fals', 'although', 'x', 'y', 'would', 'be', 'true', 'this', 'is', 'b', 'c', 'the', 'object', 'are', 'differ', 'were', 'creat', 'differ', 'have', 'differ', 'id', 'but', 'the', 'valu', 'is', 'the', 'same', 'instead', 'if', 'i', 'say', 'x', 'y', 'x', 'then', 'y', 'is', 'just', 'anoth', 'variabl', 'name', 'point', 'to', 'the', 'same', 'object', 'so', 'id', 'x', 'id', 'y', 'would', 'be', 'true', 'same', 'object', 'same', 'id', 'same', 'memori']","['object', 'creat', 'id', 'number', 'say', 'x', 'x', 'variabl', 'name', 'pointer', 'object', 'specif', 'object', 'int', 'id', 'number', 'memori', 'write', 'creat', 'new', 'object', 'id', 'x', 'id', 'fals', 'although', 'x', 'true', 'b', 'c', 'object', 'differ', 'creat', 'differ', 'differ', 'id', 'valu', 'instead', 'say', 'x', 'x', 'anoth', 'variabl', 'name', 'point', 'object', 'id', 'x', 'id', 'true', 'object', 'id', 'memori']",object creat id number say x x variabl name pointer object specif object int id number memori write creat new object id x id fals although x true b c object differ creat differ differ id valu instead say x x anoth variabl name point object id x id true object id memori,abstraction,CS,CS162
266522,The id function gives each object a unique id for itself. If id(x) == id(y) it means that both the variables are the same thing e.g. both x and y are a string 'hello'. It's different from x==y because the former compares the id values of x and y while the latter compares the two variables x and y.,#abstraction,4,12348,"['The', 'id', 'function', 'gives', 'each', 'object', 'a', 'unique', 'id', 'for', 'itself', 'If', 'id', 'x', 'id', 'y', 'it', 'means', 'that', 'both', 'the', 'variables', 'are', 'the', 'same', 'thing', 'e', 'g', 'both', 'x', 'and', 'y', 'are', 'a', 'string', ""'hello'"", ""It's"", 'different', 'from', 'x', 'y', 'because', 'the', 'former', 'compares', 'the', 'id', 'values', 'of', 'x', 'and', 'y', 'while', 'the', 'latter', 'compares', 'the', 'two', 'variables', 'x', 'and', 'y']","['the', 'id', 'function', 'give', 'each', 'object', 'a', 'uniqu', 'id', 'for', 'itself', 'if', 'id', 'x', 'id', 'y', 'it', 'mean', 'that', 'both', 'the', 'variabl', 'are', 'the', 'same', 'thing', 'e', 'g', 'both', 'x', 'and', 'y', 'are', 'a', 'string', 'hello', 'it', 'differ', 'from', 'x', 'y', 'becaus', 'the', 'former', 'compar', 'the', 'id', 'valu', 'of', 'x', 'and', 'y', 'while', 'the', 'latter', 'compar', 'the', 'two', 'variabl', 'x', 'and', 'y']","['id', 'function', 'give', 'object', 'uniqu', 'id', 'id', 'x', 'id', 'mean', 'variabl', 'thing', 'e', 'g', 'x', 'string', 'hello', 'differ', 'x', 'becaus', 'former', 'compar', 'id', 'valu', 'x', 'latter', 'compar', 'two', 'variabl', 'x']",id function give object uniqu id id x id mean variabl thing e g x string hello differ x becaus former compar id valu x latter compar two variabl x,abstraction,CS,CS162
266522,The identity of an object is simply a unique and constant number for the specific object during its lifetime. Two objects with non-overlapping lifetimes may have the same id() value that is they cannot have the same id() value in the same program. If x == y are they have a different id() value i.e id(x) != id(y)  because the id() value points to where the object in the variable is stored in the memory like a path pointer telling the program where to find the specific value stored in the object x or y,#abstraction,3,12348,"['The', 'identity', 'of', 'an', 'object', 'is', 'simply', 'a', 'unique', 'and', 'constant', 'number', 'for', 'the', 'specific', 'object', 'during', 'its', 'lifetime', 'Two', 'objects', 'with', 'non', 'overlapping', 'lifetimes', 'may', 'have', 'the', 'same', 'id', 'value', 'that', 'is', 'they', 'cannot', 'have', 'the', 'same', 'id', 'value', 'in', 'the', 'same', 'program', 'If', 'x', 'y', 'are', 'they', 'have', 'a', 'different', 'id', 'value', 'i', 'e', 'id', 'x', 'id', 'y', 'because', 'the', 'id', 'value', 'points', 'to', 'where', 'the', 'object', 'in', 'the', 'variable', 'is', 'stored', 'in', 'the', 'memory', 'like', 'a', 'path', 'pointer', 'telling', 'the', 'program', 'where', 'to', 'find', 'the', 'specific', 'value', 'stored', 'in', 'the', 'object', 'x', 'or', 'y']","['the', 'ident', 'of', 'an', 'object', 'is', 'simpli', 'a', 'uniqu', 'and', 'constant', 'number', 'for', 'the', 'specif', 'object', 'dure', 'it', 'lifetim', 'two', 'object', 'with', 'non', 'overlap', 'lifetim', 'may', 'have', 'the', 'same', 'id', 'valu', 'that', 'is', 'they', 'cannot', 'have', 'the', 'same', 'id', 'valu', 'in', 'the', 'same', 'program', 'if', 'x', 'y', 'are', 'they', 'have', 'a', 'differ', 'id', 'valu', 'i', 'e', 'id', 'x', 'id', 'y', 'becaus', 'the', 'id', 'valu', 'point', 'to', 'where', 'the', 'object', 'in', 'the', 'variabl', 'is', 'store', 'in', 'the', 'memori', 'like', 'a', 'path', 'pointer', 'tell', 'the', 'program', 'where', 'to', 'find', 'the', 'specif', 'valu', 'store', 'in', 'the', 'object', 'x', 'or', 'y']","['ident', 'object', 'simpli', 'uniqu', 'constant', 'number', 'specif', 'object', 'dure', 'lifetim', 'two', 'object', 'non', 'overlap', 'lifetim', 'may', 'id', 'valu', 'cannot', 'id', 'valu', 'program', 'x', 'differ', 'id', 'valu', 'e', 'id', 'x', 'id', 'becaus', 'id', 'valu', 'point', 'object', 'variabl', 'store', 'memori', 'like', 'path', 'pointer', 'tell', 'program', 'find', 'specif', 'valu', 'store', 'object', 'x']",ident object simpli uniqu constant number specif object dure lifetim two object non overlap lifetim may id valu cannot id valu program x differ id valu e id x id becaus id valu point object variabl store memori like path pointer tell program find specif valu store object x,abstraction,CS,CS162
266522,"Every object created in python has an id attached to it that is created for this specific object. The id is  (?) integers long and unique for each object created. These two equations are not exactly the same. For example if x =  and y = ., x==y is True, but id(x) == id(y) is False, because the id attached to the object (x is an integer, and y is a float. if y were , then the ids would also be the same). So when python compares the 'mathematical value' they are both 'one', but the id of the object is different because of their types.",#abstraction,4,12348,"['Every', 'object', 'created', 'in', 'python', 'has', 'an', 'id', 'attached', 'to', 'it', 'that', 'is', 'created', 'for', 'this', 'specific', 'object', 'The', 'id', 'is', 'integers', 'long', 'and', 'unique', 'for', 'each', 'object', 'created', 'These', 'two', 'equations', 'are', 'not', 'exactly', 'the', 'same', 'For', 'example', 'if', 'x', 'and', 'y', 'x', 'y', 'is', 'True', 'but', 'id', 'x', 'id', 'y', 'is', 'False', 'because', 'the', 'id', 'attached', 'to', 'the', 'object', 'x', 'is', 'an', 'integer', 'and', 'y', 'is', 'a', 'float', 'if', 'y', 'were', 'then', 'the', 'ids', 'would', 'also', 'be', 'the', 'same', 'So', 'when', 'python', 'compares', 'the', ""'mathematical"", ""value'"", 'they', 'are', 'both', ""'one'"", 'but', 'the', 'id', 'of', 'the', 'object', 'is', 'different', 'because', 'of', 'their', 'types']","['everi', 'object', 'creat', 'in', 'python', 'has', 'an', 'id', 'attach', 'to', 'it', 'that', 'is', 'creat', 'for', 'this', 'specif', 'object', 'the', 'id', 'is', 'integ', 'long', 'and', 'uniqu', 'for', 'each', 'object', 'creat', 'these', 'two', 'equat', 'are', 'not', 'exact', 'the', 'same', 'for', 'exampl', 'if', 'x', 'and', 'y', 'x', 'y', 'is', 'true', 'but', 'id', 'x', 'id', 'y', 'is', 'fals', 'becaus', 'the', 'id', 'attach', 'to', 'the', 'object', 'x', 'is', 'an', 'integ', 'and', 'y', 'is', 'a', 'float', 'if', 'y', 'were', 'then', 'the', 'id', 'would', 'also', 'be', 'the', 'same', 'so', 'when', 'python', 'compar', 'the', 'mathemat', 'valu', 'they', 'are', 'both', 'one', 'but', 'the', 'id', 'of', 'the', 'object', 'is', 'differ', 'becaus', 'of', 'their', 'type']","['everi', 'object', 'creat', 'python', 'id', 'attach', 'creat', 'specif', 'object', 'id', 'integ', 'long', 'uniqu', 'object', 'creat', 'two', 'equat', 'exact', 'exampl', 'x', 'x', 'true', 'id', 'x', 'id', 'fals', 'becaus', 'id', 'attach', 'object', 'x', 'integ', 'float', 'id', 'python', 'compar', 'mathemat', 'valu', 'one', 'id', 'object', 'differ', 'becaus', 'type']",everi object creat python id attach creat specif object id integ long uniqu object creat two equat exact exampl x x true id x id fals becaus id attach object x integ float id python compar mathemat valu one id object differ becaus type,abstraction,CS,CS162
266522,The id essentially returns a unique value/identity of an object for an input ([one] parameter) during its lifespan/lifetime. This identity is constant throughout its lifetime. If we have id(x) == id(y) it means that x and y have different lifetimes that coincidentally happen to have the same id. It is possible that x != y even if their ids are the same because their lifetimes do not overlap. x may or may not equal y in different lifetimes. So id(x) == id(y) is different from x == y when x and y are in different lifetimes.,#abstraction,3,12348,"['The', 'id', 'essentially', 'returns', 'a', 'unique', 'value', 'identity', 'of', 'an', 'object', 'for', 'an', 'input', 'one', 'parameter', 'during', 'its', 'lifespan', 'lifetime', 'This', 'identity', 'is', 'constant', 'throughout', 'its', 'lifetime', 'If', 'we', 'have', 'id', 'x', 'id', 'y', 'it', 'means', 'that', 'x', 'and', 'y', 'have', 'different', 'lifetimes', 'that', 'coincidentally', 'happen', 'to', 'have', 'the', 'same', 'id', 'It', 'is', 'possible', 'that', 'x', 'y', 'even', 'if', 'their', 'ids', 'are', 'the', 'same', 'because', 'their', 'lifetimes', 'do', 'not', 'overlap', 'x', 'may', 'or', 'may', 'not', 'equal', 'y', 'in', 'different', 'lifetimes', 'So', 'id', 'x', 'id', 'y', 'is', 'different', 'from', 'x', 'y', 'when', 'x', 'and', 'y', 'are', 'in', 'different', 'lifetimes']","['the', 'id', 'essenti', 'return', 'a', 'uniqu', 'valu', 'ident', 'of', 'an', 'object', 'for', 'an', 'input', 'one', 'paramet', 'dure', 'it', 'lifespan', 'lifetim', 'this', 'ident', 'is', 'constant', 'throughout', 'it', 'lifetim', 'if', 'we', 'have', 'id', 'x', 'id', 'y', 'it', 'mean', 'that', 'x', 'and', 'y', 'have', 'differ', 'lifetim', 'that', 'coincident', 'happen', 'to', 'have', 'the', 'same', 'id', 'it', 'is', 'possibl', 'that', 'x', 'y', 'even', 'if', 'their', 'id', 'are', 'the', 'same', 'becaus', 'their', 'lifetim', 'do', 'not', 'overlap', 'x', 'may', 'or', 'may', 'not', 'equal', 'y', 'in', 'differ', 'lifetim', 'so', 'id', 'x', 'id', 'y', 'is', 'differ', 'from', 'x', 'y', 'when', 'x', 'and', 'y', 'are', 'in', 'differ', 'lifetim']","['id', 'essenti', 'return', 'uniqu', 'valu', 'ident', 'object', 'input', 'one', 'paramet', 'dure', 'lifespan', 'lifetim', 'ident', 'constant', 'throughout', 'lifetim', 'id', 'x', 'id', 'mean', 'x', 'differ', 'lifetim', 'coincident', 'happen', 'id', 'possibl', 'x', 'even', 'id', 'becaus', 'lifetim', 'overlap', 'x', 'may', 'may', 'equal', 'differ', 'lifetim', 'id', 'x', 'id', 'differ', 'x', 'x', 'differ', 'lifetim']",id essenti return uniqu valu ident object input one paramet dure lifespan lifetim ident constant throughout lifetim id x id mean x differ lifetim coincident happen id possibl x even id becaus lifetim overlap x may may equal differ lifetim id x id differ x x differ lifetim,abstraction,CS,CS162
266522,"for every object created, the object class will assign it an id number. If id(x) == id(y), then both x and y refers to the same object. You can pass the object x to variable y (x = y) and the id for both will be the same. If you associate x with y (e.g. x = y), then changing variable values in x (e.g. x.x = .) will also changes variable values in y. Therefore x will always equal y. However, x == y for other variables does not have the bundle effect. It will only evaluate the instant states of both variables and changes apply later will change only the targeted variable.",#abstraction,3,12348,"['for', 'every', 'object', 'created', 'the', 'object', 'class', 'will', 'assign', 'it', 'an', 'id', 'number', 'If', 'id', 'x', 'id', 'y', 'then', 'both', 'x', 'and', 'y', 'refers', 'to', 'the', 'same', 'object', 'You', 'can', 'pass', 'the', 'object', 'x', 'to', 'variable', 'y', 'x', 'y', 'and', 'the', 'id', 'for', 'both', 'will', 'be', 'the', 'same', 'If', 'you', 'associate', 'x', 'with', 'y', 'e', 'g', 'x', 'y', 'then', 'changing', 'variable', 'values', 'in', 'x', 'e', 'g', 'x', 'x', 'will', 'also', 'changes', 'variable', 'values', 'in', 'y', 'Therefore', 'x', 'will', 'always', 'equal', 'y', 'However', 'x', 'y', 'for', 'other', 'variables', 'does', 'not', 'have', 'the', 'bundle', 'effect', 'It', 'will', 'only', 'evaluate', 'the', 'instant', 'states', 'of', 'both', 'variables', 'and', 'changes', 'apply', 'later', 'will', 'change', 'only', 'the', 'targeted', 'variable']","['for', 'everi', 'object', 'creat', 'the', 'object', 'class', 'will', 'assign', 'it', 'an', 'id', 'number', 'if', 'id', 'x', 'id', 'y', 'then', 'both', 'x', 'and', 'y', 'refer', 'to', 'the', 'same', 'object', 'you', 'can', 'pass', 'the', 'object', 'x', 'to', 'variabl', 'y', 'x', 'y', 'and', 'the', 'id', 'for', 'both', 'will', 'be', 'the', 'same', 'if', 'you', 'associ', 'x', 'with', 'y', 'e', 'g', 'x', 'y', 'then', 'chang', 'variabl', 'valu', 'in', 'x', 'e', 'g', 'x', 'x', 'will', 'also', 'chang', 'variabl', 'valu', 'in', 'y', 'therefor', 'x', 'will', 'alway', 'equal', 'y', 'howev', 'x', 'y', 'for', 'other', 'variabl', 'doe', 'not', 'have', 'the', 'bundl', 'effect', 'it', 'will', 'onli', 'evalu', 'the', 'instant', 'state', 'of', 'both', 'variabl', 'and', 'chang', 'appli', 'later', 'will', 'chang', 'onli', 'the', 'target', 'variabl']","['everi', 'object', 'creat', 'object', 'class', 'assign', 'id', 'number', 'id', 'x', 'id', 'x', 'refer', 'object', 'pass', 'object', 'x', 'variabl', 'x', 'id', 'associ', 'x', 'e', 'g', 'x', 'chang', 'variabl', 'valu', 'x', 'e', 'g', 'x', 'x', 'chang', 'variabl', 'valu', 'therefor', 'x', 'alway', 'equal', 'howev', 'x', 'variabl', 'doe', 'bundl', 'effect', 'onli', 'evalu', 'instant', 'state', 'variabl', 'chang', 'appli', 'later', 'chang', 'onli', 'target', 'variabl']",everi object creat object class assign id number id x id x refer object pass object x variabl x id associ x e g x chang variabl valu x e g x x chang variabl valu therefor x alway equal howev x variabl doe bundl effect onli evalu instant state variabl chang appli later chang onli target variabl,abstraction,CS,CS162
266522,"id(x) == id(y) means x and y has the same id but it is different from x ==y because x and y might be different in the levels of the class, types of the input etc. id() is the example of polymorphism in the class that it process different types of input with the same function.",#abstraction,2,12348,"['id', 'x', 'id', 'y', 'means', 'x', 'and', 'y', 'has', 'the', 'same', 'id', 'but', 'it', 'is', 'different', 'from', 'x', 'y', 'because', 'x', 'and', 'y', 'might', 'be', 'different', 'in', 'the', 'levels', 'of', 'the', 'class', 'types', 'of', 'the', 'input', 'etc', 'id', 'is', 'the', 'example', 'of', 'polymorphism', 'in', 'the', 'class', 'that', 'it', 'process', 'different', 'types', 'of', 'input', 'with', 'the', 'same', 'function']","['id', 'x', 'id', 'y', 'mean', 'x', 'and', 'y', 'has', 'the', 'same', 'id', 'but', 'it', 'is', 'differ', 'from', 'x', 'y', 'becaus', 'x', 'and', 'y', 'might', 'be', 'differ', 'in', 'the', 'level', 'of', 'the', 'class', 'type', 'of', 'the', 'input', 'etc', 'id', 'is', 'the', 'exampl', 'of', 'polymorph', 'in', 'the', 'class', 'that', 'it', 'process', 'differ', 'type', 'of', 'input', 'with', 'the', 'same', 'function']","['id', 'x', 'id', 'mean', 'x', 'id', 'differ', 'x', 'becaus', 'x', 'differ', 'level', 'class', 'type', 'input', 'etc', 'id', 'exampl', 'polymorph', 'class', 'process', 'differ', 'type', 'input', 'function']",id x id mean x id differ x becaus x differ level class type input etc id exampl polymorph class process differ type input function,abstraction,CS,CS162
266522,"Yes. If the id(x)==id(y) it means that the two variable names point to the exact same place in your storage, meaning if you change the thing in the storage, both x and y will change. If x==y, all we know is that the value of the thing that the variable names are pointing to are the same. X could be an integer within an array stored within one function, and Y could be a global float you use throughout the process. In this case, changing the value of the thing that's being pointed at by one of these variables won't (necessarily) change the other one, as they're not pointing at the same place.",#abstraction,3,12348,"['Yes', 'If', 'the', 'id', 'x', 'id', 'y', 'it', 'means', 'that', 'the', 'two', 'variable', 'names', 'point', 'to', 'the', 'exact', 'same', 'place', 'in', 'your', 'storage', 'meaning', 'if', 'you', 'change', 'the', 'thing', 'in', 'the', 'storage', 'both', 'x', 'and', 'y', 'will', 'change', 'If', 'x', 'y', 'all', 'we', 'know', 'is', 'that', 'the', 'value', 'of', 'the', 'thing', 'that', 'the', 'variable', 'names', 'are', 'pointing', 'to', 'are', 'the', 'same', 'X', 'could', 'be', 'an', 'integer', 'within', 'an', 'array', 'stored', 'within', 'one', 'function', 'and', 'Y', 'could', 'be', 'a', 'global', 'float', 'you', 'use', 'throughout', 'the', 'process', 'In', 'this', 'case', 'changing', 'the', 'value', 'of', 'the', 'thing', ""that's"", 'being', 'pointed', 'at', 'by', 'one', 'of', 'these', 'variables', ""won't"", 'necessarily', 'change', 'the', 'other', 'one', 'as', ""they're"", 'not', 'pointing', 'at', 'the', 'same', 'place']","['yes', 'if', 'the', 'id', 'x', 'id', 'y', 'it', 'mean', 'that', 'the', 'two', 'variabl', 'name', 'point', 'to', 'the', 'exact', 'same', 'place', 'in', 'your', 'storag', 'mean', 'if', 'you', 'chang', 'the', 'thing', 'in', 'the', 'storag', 'both', 'x', 'and', 'y', 'will', 'chang', 'if', 'x', 'y', 'all', 'we', 'know', 'is', 'that', 'the', 'valu', 'of', 'the', 'thing', 'that', 'the', 'variabl', 'name', 'are', 'point', 'to', 'are', 'the', 'same', 'x', 'could', 'be', 'an', 'integ', 'within', 'an', 'array', 'store', 'within', 'one', 'function', 'and', 'y', 'could', 'be', 'a', 'global', 'float', 'you', 'use', 'throughout', 'the', 'process', 'in', 'this', 'case', 'chang', 'the', 'valu', 'of', 'the', 'thing', 'that', 'be', 'point', 'at', 'by', 'one', 'of', 'these', 'variabl', ""won't"", 'necessarili', 'chang', 'the', 'other', 'one', 'as', ""they'r"", 'not', 'point', 'at', 'the', 'same', 'place']","['yes', 'id', 'x', 'id', 'mean', 'two', 'variabl', 'name', 'point', 'exact', 'place', 'storag', 'mean', 'chang', 'thing', 'storag', 'x', 'chang', 'x', 'know', 'valu', 'thing', 'variabl', 'name', 'point', 'x', 'integ', 'within', 'array', 'store', 'within', 'one', 'function', 'global', 'float', 'throughout', 'process', 'case', 'chang', 'valu', 'thing', 'point', 'one', 'variabl', 'necessarili', 'chang', 'one', ""they'r"", 'point', 'place']",yes id x id mean two variabl name point exact place storag mean chang thing storag x chang x know valu thing variabl name point x integ within array store within one function global float throughout process case chang valu thing point one variabl necessarili chang one they'r point place,abstraction,CS,CS162
266522,"id(x) returns the address of x inside the internal storage. When you define a variable, it will be stored in a location in the internal storage of the computer. Every location has a unique address. id(x)==id(y) means the address of x and y are the same. It has different meaning with x==y, which means x has the same value with y. 

For example, if we write x= and y=, when we run x==y, it will return True. However, when we run id(x)==id(y), it will return False. That's because although they have the same value, x and y are stored in the different address inside the internal storage.",#abstraction,4,12348,"['id', 'x', 'returns', 'the', 'address', 'of', 'x', 'inside', 'the', 'internal', 'storage', 'When', 'you', 'define', 'a', 'variable', 'it', 'will', 'be', 'stored', 'in', 'a', 'location', 'in', 'the', 'internal', 'storage', 'of', 'the', 'computer', 'Every', 'location', 'has', 'a', 'unique', 'address', 'id', 'x', 'id', 'y', 'means', 'the', 'address', 'of', 'x', 'and', 'y', 'are', 'the', 'same', 'It', 'has', 'different', 'meaning', 'with', 'x', 'y', 'which', 'means', 'x', 'has', 'the', 'same', 'value', 'with', 'y', 'For', 'example', 'if', 'we', 'write', 'x', 'and', 'y', 'when', 'we', 'run', 'x', 'y', 'it', 'will', 'return', 'True', 'However', 'when', 'we', 'run', 'id', 'x', 'id', 'y', 'it', 'will', 'return', 'False', ""That's"", 'because', 'although', 'they', 'have', 'the', 'same', 'value', 'x', 'and', 'y', 'are', 'stored', 'in', 'the', 'different', 'address', 'inside', 'the', 'internal', 'storage']","['id', 'x', 'return', 'the', 'address', 'of', 'x', 'insid', 'the', 'intern', 'storag', 'when', 'you', 'defin', 'a', 'variabl', 'it', 'will', 'be', 'store', 'in', 'a', 'locat', 'in', 'the', 'intern', 'storag', 'of', 'the', 'comput', 'everi', 'locat', 'has', 'a', 'uniqu', 'address', 'id', 'x', 'id', 'y', 'mean', 'the', 'address', 'of', 'x', 'and', 'y', 'are', 'the', 'same', 'it', 'has', 'differ', 'mean', 'with', 'x', 'y', 'which', 'mean', 'x', 'has', 'the', 'same', 'valu', 'with', 'y', 'for', 'exampl', 'if', 'we', 'write', 'x', 'and', 'y', 'when', 'we', 'run', 'x', 'y', 'it', 'will', 'return', 'true', 'howev', 'when', 'we', 'run', 'id', 'x', 'id', 'y', 'it', 'will', 'return', 'fals', 'that', 'becaus', 'although', 'they', 'have', 'the', 'same', 'valu', 'x', 'and', 'y', 'are', 'store', 'in', 'the', 'differ', 'address', 'insid', 'the', 'intern', 'storag']","['id', 'x', 'return', 'address', 'x', 'insid', 'intern', 'storag', 'defin', 'variabl', 'store', 'locat', 'intern', 'storag', 'comput', 'everi', 'locat', 'uniqu', 'address', 'id', 'x', 'id', 'mean', 'address', 'x', 'differ', 'mean', 'x', 'mean', 'x', 'valu', 'exampl', 'write', 'x', 'run', 'x', 'return', 'true', 'howev', 'run', 'id', 'x', 'id', 'return', 'fals', 'becaus', 'although', 'valu', 'x', 'store', 'differ', 'address', 'insid', 'intern', 'storag']",id x return address x insid intern storag defin variabl store locat intern storag comput everi locat uniqu address id x id mean address x differ mean x mean x valu exampl write x run x return true howev run id x id return fals becaus although valu x store differ address insid intern storag,abstraction,CS,CS162
152295,"uAv ""yields"" uwv means that there exists some rule A --> w in the CFG at hand which allows you to substitute the variable A for the terminal w, i.e. uAv ==> uwv. u ""derives"" v means that there is some sequence of substitutions which connects u and v, i.e. u ==> u ==> u ==> ... ==> v. (This list of substitutions can be of length  in the case where u = v.)",#languages,3,7577,"['uAv', 'yields', 'uwv', 'means', 'that', 'there', 'exists', 'some', 'rule', 'A', 'w', 'in', 'the', 'CFG', 'at', 'hand', 'which', 'allows', 'you', 'to', 'substitute', 'the', 'variable', 'A', 'for', 'the', 'terminal', 'w', 'i', 'e', 'uAv', 'uwv', 'u', 'derives', 'v', 'means', 'that', 'there', 'is', 'some', 'sequence', 'of', 'substitutions', 'which', 'connects', 'u', 'and', 'v', 'i', 'e', 'u', 'u', 'u', 'v', 'This', 'list', 'of', 'substitutions', 'can', 'be', 'of', 'length', 'in', 'the', 'case', 'where', 'u', 'v']","['uav', 'yield', 'uwv', 'mean', 'that', 'there', 'exist', 'some', 'rule', 'a', 'w', 'in', 'the', 'cfg', 'at', 'hand', 'which', 'allow', 'you', 'to', 'substitut', 'the', 'variabl', 'a', 'for', 'the', 'termin', 'w', 'i', 'e', 'uav', 'uwv', 'u', 'deriv', 'v', 'mean', 'that', 'there', 'is', 'some', 'sequenc', 'of', 'substitut', 'which', 'connect', 'u', 'and', 'v', 'i', 'e', 'u', 'u', 'u', 'v', 'this', 'list', 'of', 'substitut', 'can', 'be', 'of', 'length', 'in', 'the', 'case', 'where', 'u', 'v']","['uav', 'yield', 'uwv', 'mean', 'exist', 'rule', 'w', 'cfg', 'hand', 'allow', 'substitut', 'variabl', 'termin', 'w', 'e', 'uav', 'uwv', 'u', 'deriv', 'v', 'mean', 'sequenc', 'substitut', 'connect', 'u', 'v', 'e', 'u', 'u', 'u', 'v', 'list', 'substitut', 'length', 'case', 'u', 'v']",uav yield uwv mean exist rule w cfg hand allow substitut variabl termin w e uav uwv u deriv v mean sequenc substitut connect u v e u u u v list substitut length case u v,languages,CS,CS142
159411,"Reductions are the opposite of derivations: where u ==> v (aka ""u derives v""), it can be said that v ↣ u (aka ""v reduces to u""). While in derivations you substitute u with v (for the example given here) going from start symbol to terminals of grammar, in reductions, you substitute v with u, going towards the start symbol of the grammar. Handles are a reducing string defined together with its reducing rule, eg. aabb⊣ ↣ aPaPbb⊣ is a handle of w = aabb for the grammar G from problem ..",#languages,4,7927,"['Reductions', 'are', 'the', 'opposite', 'of', 'derivations', 'where', 'u', 'v', 'aka', 'u', 'derives', 'v', 'it', 'can', 'be', 'said', 'that', 'v', 'u', 'aka', 'v', 'reduces', 'to', 'u', 'While', 'in', 'derivations', 'you', 'substitute', 'u', 'with', 'v', 'for', 'the', 'example', 'given', 'here', 'going', 'from', 'start', 'symbol', 'to', 'terminals', 'of', 'grammar', 'in', 'reductions', 'you', 'substitute', 'v', 'with', 'u', 'going', 'towards', 'the', 'start', 'symbol', 'of', 'the', 'grammar', 'Handles', 'are', 'a', 'reducing', 'string', 'defined', 'together', 'with', 'its', 'reducing', 'rule', 'eg', 'aabb', 'aPaPbb', 'is', 'a', 'handle', 'of', 'w', 'aabb', 'for', 'the', 'grammar', 'G', 'from', 'problem']","['reduct', 'are', 'the', 'opposit', 'of', 'deriv', 'where', 'u', 'v', 'aka', 'u', 'deriv', 'v', 'it', 'can', 'be', 'said', 'that', 'v', 'u', 'aka', 'v', 'reduc', 'to', 'u', 'while', 'in', 'deriv', 'you', 'substitut', 'u', 'with', 'v', 'for', 'the', 'exampl', 'given', 'here', 'go', 'from', 'start', 'symbol', 'to', 'termin', 'of', 'grammar', 'in', 'reduct', 'you', 'substitut', 'v', 'with', 'u', 'go', 'toward', 'the', 'start', 'symbol', 'of', 'the', 'grammar', 'handl', 'are', 'a', 'reduc', 'string', 'defin', 'togeth', 'with', 'it', 'reduc', 'rule', 'eg', 'aabb', 'apapbb', 'is', 'a', 'handl', 'of', 'w', 'aabb', 'for', 'the', 'grammar', 'g', 'from', 'problem']","['reduct', 'opposit', 'deriv', 'u', 'v', 'aka', 'u', 'deriv', 'v', 'said', 'v', 'u', 'aka', 'v', 'reduc', 'u', 'deriv', 'substitut', 'u', 'v', 'exampl', 'given', 'go', 'start', 'symbol', 'termin', 'grammar', 'reduct', 'substitut', 'v', 'u', 'go', 'toward', 'start', 'symbol', 'grammar', 'handl', 'reduc', 'string', 'defin', 'togeth', 'reduc', 'rule', 'eg', 'aabb', 'apapbb', 'handl', 'w', 'aabb', 'grammar', 'g', 'problem']",reduct opposit deriv u v aka u deriv v said v u aka v reduc u deriv substitut u v exampl given go start symbol termin grammar reduct substitut v u go toward start symbol grammar handl reduc string defin togeth reduc rule eg aabb apapbb handl w aabb grammar g problem,languages,CS,CS142
72084,use two stacks instead of one two maintain both the stack property and the getmin() function. They were always updating the minimum by only pushing minimum values onto the second stack and removing them if they are popped from the first stack. Not sure if they remembered to push into the minimum stack values that are == to the current minimum (or else they may run into a problem whe poping it),#novelapplication,4,963,"['use', 'two', 'stacks', 'instead', 'of', 'one', 'two', 'maintain', 'both', 'the', 'stack', 'property', 'and', 'the', 'getmin', 'function', 'They', 'were', 'always', 'updating', 'the', 'minimum', 'by', 'only', 'pushing', 'minimum', 'values', 'onto', 'the', 'second', 'stack', 'and', 'removing', 'them', 'if', 'they', 'are', 'popped', 'from', 'the', 'first', 'stack', 'Not', 'sure', 'if', 'they', 'remembered', 'to', 'push', 'into', 'the', 'minimum', 'stack', 'values', 'that', 'are', 'to', 'the', 'current', 'minimum', 'or', 'else', 'they', 'may', 'run', 'into', 'a', 'problem', 'whe', 'poping', 'it']","['use', 'two', 'stack', 'instead', 'of', 'one', 'two', 'maintain', 'both', 'the', 'stack', 'properti', 'and', 'the', 'getmin', 'function', 'they', 'were', 'alway', 'updat', 'the', 'minimum', 'by', 'onli', 'push', 'minimum', 'valu', 'onto', 'the', 'second', 'stack', 'and', 'remov', 'them', 'if', 'they', 'are', 'pop', 'from', 'the', 'first', 'stack', 'not', 'sure', 'if', 'they', 'rememb', 'to', 'push', 'into', 'the', 'minimum', 'stack', 'valu', 'that', 'are', 'to', 'the', 'current', 'minimum', 'or', 'els', 'they', 'may', 'run', 'into', 'a', 'problem', 'whe', 'pope', 'it']","['two', 'stack', 'instead', 'one', 'two', 'maintain', 'stack', 'properti', 'getmin', 'function', 'alway', 'updat', 'minimum', 'onli', 'push', 'minimum', 'valu', 'onto', 'second', 'stack', 'remov', 'pop', 'first', 'stack', 'sure', 'rememb', 'push', 'minimum', 'stack', 'valu', 'current', 'minimum', 'els', 'may', 'run', 'problem', 'whe', 'pope']",two stack instead one two maintain stack properti getmin function alway updat minimum onli push minimum valu onto second stack remov pop first stack sure rememb push minimum stack valu current minimum els may run problem whe pope,intapplication,CS,CS111A
254572,"Considering x as the wait time for tech issues in min, and y as the wait time for billing issues in min, the general bounds can be represented mathematically as x + y <= . With regards to bounds when doing double integration, if we start with integrating y first, we know our lower bound is  (given) and the upper bound is (y in terms of everything else == y =  - x) to represent our bound in variable terms, then for the outer integral, our lower bound remains , but the outer bound should be  because the outer bounds should not reintroduce any variable and should just be a number.",#Intapplication,4,11699,"['Considering', 'x', 'as', 'the', 'wait', 'time', 'for', 'tech', 'issues', 'in', 'min', 'and', 'y', 'as', 'the', 'wait', 'time', 'for', 'billing', 'issues', 'in', 'min', 'the', 'general', 'bounds', 'can', 'be', 'represented', 'mathematically', 'as', 'x', 'y', 'With', 'regards', 'to', 'bounds', 'when', 'doing', 'double', 'integration', 'if', 'we', 'start', 'with', 'integrating', 'y', 'first', 'we', 'know', 'our', 'lower', 'bound', 'is', 'given', 'and', 'the', 'upper', 'bound', 'is', 'y', 'in', 'terms', 'of', 'everything', 'else', 'y', 'x', 'to', 'represent', 'our', 'bound', 'in', 'variable', 'terms', 'then', 'for', 'the', 'outer', 'integral', 'our', 'lower', 'bound', 'remains', 'but', 'the', 'outer', 'bound', 'should', 'be', 'because', 'the', 'outer', 'bounds', 'should', 'not', 'reintroduce', 'any', 'variable', 'and', 'should', 'just', 'be', 'a', 'number']","['consid', 'x', 'as', 'the', 'wait', 'time', 'for', 'tech', 'issu', 'in', 'min', 'and', 'y', 'as', 'the', 'wait', 'time', 'for', 'bill', 'issu', 'in', 'min', 'the', 'general', 'bound', 'can', 'be', 'repres', 'mathemat', 'as', 'x', 'y', 'with', 'regard', 'to', 'bound', 'when', 'do', 'doubl', 'integr', 'if', 'we', 'start', 'with', 'integr', 'y', 'first', 'we', 'know', 'our', 'lower', 'bound', 'is', 'given', 'and', 'the', 'upper', 'bound', 'is', 'y', 'in', 'term', 'of', 'everyth', 'els', 'y', 'x', 'to', 'repres', 'our', 'bound', 'in', 'variabl', 'term', 'then', 'for', 'the', 'outer', 'integr', 'our', 'lower', 'bound', 'remain', 'but', 'the', 'outer', 'bound', 'should', 'be', 'becaus', 'the', 'outer', 'bound', 'should', 'not', 'reintroduc', 'ani', 'variabl', 'and', 'should', 'just', 'be', 'a', 'number']","['consid', 'x', 'wait', 'time', 'tech', 'issu', 'min', 'wait', 'time', 'bill', 'issu', 'min', 'general', 'bound', 'repres', 'mathemat', 'x', 'regard', 'bound', 'doubl', 'integr', 'start', 'integr', 'first', 'know', 'lower', 'bound', 'given', 'upper', 'bound', 'term', 'everyth', 'els', 'x', 'repres', 'bound', 'variabl', 'term', 'outer', 'integr', 'lower', 'bound', 'remain', 'outer', 'bound', 'becaus', 'outer', 'bound', 'reintroduc', 'ani', 'variabl', 'number']",consid x wait time tech issu min wait time bill issu min general bound repres mathemat x regard bound doubl integr start integr first know lower bound given upper bound term everyth els x repres bound variabl term outer integr lower bound remain outer bound becaus outer bound reintroduc ani variabl number,intapplication,CS,CS111A
53738,"In a pizza shop,  pepperoni pizzas are made in one day. In  days(*==n) the mean number of pepperonis on each pizza is (mean). There is a % confidence interval(CI) that the probability(use p formula for SE) of each pizza has a standard deviation of  pepperonis (SD). Population proportion is (,) and % of the pizzas fall within the bounds of  and  pepperonis while covering .",#confidenceintervals,3,595,"['In', 'a', 'pizza', 'shop', 'pepperoni', 'pizzas', 'are', 'made', 'in', 'one', 'day', 'In', 'days', 'n', 'the', 'mean', 'number', 'of', 'pepperonis', 'on', 'each', 'pizza', 'is', 'mean', 'There', 'is', 'a', 'confidence', 'interval', 'CI', 'that', 'the', 'probability', 'use', 'p', 'formula', 'for', 'SE', 'of', 'each', 'pizza', 'has', 'a', 'standard', 'deviation', 'of', 'pepperonis', 'SD', 'Population', 'proportion', 'is', 'and', 'of', 'the', 'pizzas', 'fall', 'within', 'the', 'bounds', 'of', 'and', 'pepperonis', 'while', 'covering']","['in', 'a', 'pizza', 'shop', 'pepperoni', 'pizza', 'are', 'made', 'in', 'one', 'day', 'in', 'day', 'n', 'the', 'mean', 'number', 'of', 'pepperoni', 'on', 'each', 'pizza', 'is', 'mean', 'there', 'is', 'a', 'confid', 'interv', 'ci', 'that', 'the', 'probabl', 'use', 'p', 'formula', 'for', 'se', 'of', 'each', 'pizza', 'has', 'a', 'standard', 'deviat', 'of', 'pepperoni', 'sd', 'popul', 'proport', 'is', 'and', 'of', 'the', 'pizza', 'fall', 'within', 'the', 'bound', 'of', 'and', 'pepperoni', 'while', 'cover']","['pizza', 'shop', 'pepperoni', 'pizza', 'made', 'one', 'day', 'day', 'n', 'mean', 'number', 'pepperoni', 'pizza', 'mean', 'confid', 'interv', 'ci', 'probabl', 'p', 'formula', 'se', 'pizza', 'standard', 'deviat', 'pepperoni', 'sd', 'popul', 'proport', 'pizza', 'fall', 'within', 'bound', 'pepperoni', 'cover']",pizza shop pepperoni pizza made one day day n mean number pepperoni pizza mean confid interv ci probabl p formula se pizza standard deviat pepperoni sd popul proport pizza fall within bound pepperoni cover,confidenceintervals,CS,
149241,Normal distribution means that we can use +/- sd* = .  confidence intervals means that we can use  as the z score. mean +/- sd* ==> lower bound will be  and upper bound will be . However since the sample size is significantly small we need to use t distribution. Degree of freedom is .,#confidenceintervals,2,7504,"['Normal', 'distribution', 'means', 'that', 'we', 'can', 'use', 'sd', 'confidence', 'intervals', 'means', 'that', 'we', 'can', 'use', 'as', 'the', 'z', 'score', 'mean', 'sd', 'lower', 'bound', 'will', 'be', 'and', 'upper', 'bound', 'will', 'be', 'However', 'since', 'the', 'sample', 'size', 'is', 'significantly', 'small', 'we', 'need', 'to', 'use', 't', 'distribution', 'Degree', 'of', 'freedom', 'is']","['normal', 'distribut', 'mean', 'that', 'we', 'can', 'use', 'sd', 'confid', 'interv', 'mean', 'that', 'we', 'can', 'use', 'as', 'the', 'z', 'score', 'mean', 'sd', 'lower', 'bound', 'will', 'be', 'and', 'upper', 'bound', 'will', 'be', 'howev', 'sinc', 'the', 'sampl', 'size', 'is', 'signific', 'small', 'we', 'need', 'to', 'use', 't', 'distribut', 'degre', 'of', 'freedom', 'is']","['normal', 'distribut', 'mean', 'sd', 'confid', 'interv', 'mean', 'z', 'score', 'mean', 'sd', 'lower', 'bound', 'upper', 'bound', 'howev', 'sinc', 'sampl', 'size', 'signific', 'small', 'need', 'distribut', 'degre', 'freedom']",normal distribut mean sd confid interv mean z score mean sd lower bound upper bound howev sinc sampl size signific small need distribut degre freedom,confidenceintervals,CS,
253155,"Heads==
Tails==-=

Sample variance: (*+*)/=.
Sample std:
.^(/)=.

z-score=.--> .

.*./(^(/)=.",#confidenceintervals,2,11642,"['Heads', 'Tails', 'Sample', 'variance', 'Sample', 'std', 'z', 'score']","['head', 'tail', 'sampl', 'varianc', 'sampl', 'std', 'z', 'score']","['head', 'tail', 'sampl', 'varianc', 'sampl', 'std', 'z', 'score']",head tail sampl varianc sampl std z score,confidenceintervals,CS,
253183,"To calculate a confidence interval, we need the point estimate, the value of t for the % and SE.
point estimate= /=.
t value from df== .
.-(.xSE)
SE=SD/sqrt()",#confidenceintervals,2,11650,"['To', 'calculate', 'a', 'confidence', 'interval', 'we', 'need', 'the', 'point', 'estimate', 'the', 'value', 'of', 't', 'for', 'the', 'and', 'SE', 'point', 'estimate', 't', 'value', 'from', 'df', 'xSE', 'SE', 'SD', 'sqrt']","['to', 'calcul', 'a', 'confid', 'interv', 'we', 'need', 'the', 'point', 'estim', 'the', 'valu', 'of', 't', 'for', 'the', 'and', 'se', 'point', 'estim', 't', 'valu', 'from', 'df', 'xse', 'se', 'sd', 'sqrt']","['calcul', 'confid', 'interv', 'need', 'point', 'estim', 'valu', 'se', 'point', 'estim', 'valu', 'df', 'xse', 'se', 'sd', 'sqrt']",calcul confid interv need point estim valu se point estim valu df xse se sd sqrt,confidenceintervals,CS,
253183,"sample size =  times
fives == success =  times

* The sample observartions are independent
* At least  successes and  failures ( in  as mentioned above)
--> Conditions met

SE = sqr[[p(-p)]/n]

(-)*SE",#confidenceintervals,2,11650,"['sample', 'size', 'times', 'fives', 'success', 'times', 'The', 'sample', 'observartions', 'are', 'independent', 'At', 'least', 'successes', 'and', 'failures', 'in', 'as', 'mentioned', 'above', 'Conditions', 'met', 'SE', 'sqr', 'p', 'p', 'n', 'SE']","['sampl', 'size', 'time', 'five', 'success', 'time', 'the', 'sampl', 'observart', 'are', 'independ', 'at', 'least', 'success', 'and', 'failur', 'in', 'as', 'mention', 'abov', 'condit', 'met', 'se', 'sqr', 'p', 'p', 'n', 'se']","['sampl', 'size', 'time', 'five', 'success', 'time', 'sampl', 'observart', 'independ', 'least', 'success', 'failur', 'mention', 'abov', 'condit', 'met', 'se', 'sqr', 'p', 'p', 'n', 'se']",sampl size time five success time sampl observart independ least success failur mention abov condit met se sqr p p n se,confidenceintervals,CS,
64199,"Null: The anti-Zika serum alleviation of fever is on the same rate as an OTC analgesic. (a==b)
Alternative: The anti-Zika serum alleviates fever at a faster rate than OTC analgesic.(a>b)",#significance,3,783,"['Null', 'The', 'anti', 'Zika', 'serum', 'alleviation', 'of', 'fever', 'is', 'on', 'the', 'same', 'rate', 'as', 'an', 'OTC', 'analgesic', 'a', 'b', 'Alternative', 'The', 'anti', 'Zika', 'serum', 'alleviates', 'fever', 'at', 'a', 'faster', 'rate', 'than', 'OTC', 'analgesic', 'a', 'b']","['null', 'the', 'anti', 'zika', 'serum', 'allevi', 'of', 'fever', 'is', 'on', 'the', 'same', 'rate', 'as', 'an', 'otc', 'analges', 'a', 'b', 'altern', 'the', 'anti', 'zika', 'serum', 'allevi', 'fever', 'at', 'a', 'faster', 'rate', 'than', 'otc', 'analges', 'a', 'b']","['null', 'anti', 'zika', 'serum', 'allevi', 'fever', 'rate', 'otc', 'analges', 'b', 'altern', 'anti', 'zika', 'serum', 'allevi', 'fever', 'faster', 'rate', 'otc', 'analges', 'b']",null anti zika serum allevi fever rate otc analges b altern anti zika serum allevi fever faster rate otc analges b,significance,CS,
258411,"Besides the proportion of vegetarians, we could set a proportion of international students and the proportion of those who like hotpot. With that in mind, we ask  questions to the data.
Without the Bonferroni correction, the probability of getting  type  error is -. == .. Getting  would be -(.**) == .

With the Bonferroni correction, we'd calculate ./ = .

so  - (  - .)** 
closer to the original alpha with the corr",#significance,3,11892,"['Besides', 'the', 'proportion', 'of', 'vegetarians', 'we', 'could', 'set', 'a', 'proportion', 'of', 'international', 'students', 'and', 'the', 'proportion', 'of', 'those', 'who', 'like', 'hotpot', 'With', 'that', 'in', 'mind', 'we', 'ask', 'questions', 'to', 'the', 'data', 'Without', 'the', 'Bonferroni', 'correction', 'the', 'probability', 'of', 'getting', 'type', 'error', 'is', 'Getting', 'would', 'be', 'With', 'the', 'Bonferroni', 'correction', ""we'd"", 'calculate', 'so', 'closer', 'to', 'the', 'original', 'alpha', 'with', 'the', 'corr']","['besid', 'the', 'proport', 'of', 'vegetarian', 'we', 'could', 'set', 'a', 'proport', 'of', 'intern', 'student', 'and', 'the', 'proport', 'of', 'those', 'who', 'like', 'hotpot', 'with', 'that', 'in', 'mind', 'we', 'ask', 'question', 'to', 'the', 'data', 'without', 'the', 'bonferroni', 'correct', 'the', 'probabl', 'of', 'get', 'type', 'error', 'is', 'get', 'would', 'be', 'with', 'the', 'bonferroni', 'correct', ""we'd"", 'calcul', 'so', 'closer', 'to', 'the', 'origin', 'alpha', 'with', 'the', 'corr']","['besid', 'proport', 'vegetarian', 'set', 'proport', 'intern', 'student', 'proport', 'like', 'hotpot', 'mind', 'ask', 'question', 'data', 'without', 'bonferroni', 'correct', 'probabl', 'get', 'type', 'error', 'get', 'bonferroni', 'correct', ""we'd"", 'calcul', 'closer', 'origin', 'alpha', 'corr']",besid proport vegetarian set proport intern student proport like hotpot mind ask question data without bonferroni correct probabl get type error get bonferroni correct we'd calcul closer origin alpha corr,significance,CS,
259375,"Since we are in an interventional study scenario, we'll use Glass' delta, so:
mean' - mean/SD == . - . / . == -.
Therefore, the effect size of it is -..

Our result is slightly far from the value . We can say that, the farthest from  lower is the significance. This is a practically significant and also statistics.",#significance,3,11937,"['Since', 'we', 'are', 'in', 'an', 'interventional', 'study', 'scenario', ""we'll"", 'use', ""Glass'"", 'delta', 'so', ""mean'"", 'mean', 'SD', 'Therefore', 'the', 'effect', 'size', 'of', 'it', 'is', 'Our', 'result', 'is', 'slightly', 'far', 'from', 'the', 'value', 'We', 'can', 'say', 'that', 'the', 'farthest', 'from', 'lower', 'is', 'the', 'significance', 'This', 'is', 'a', 'practically', 'significant', 'and', 'also', 'statistics']","['sinc', 'we', 'are', 'in', 'an', 'intervent', 'studi', 'scenario', ""we'll"", 'use', 'glass', 'delta', 'so', 'mean', 'mean', 'sd', 'therefor', 'the', 'effect', 'size', 'of', 'it', 'is', 'our', 'result', 'is', 'slight', 'far', 'from', 'the', 'valu', 'we', 'can', 'say', 'that', 'the', 'farthest', 'from', 'lower', 'is', 'the', 'signific', 'this', 'is', 'a', 'practic', 'signific', 'and', 'also', 'statist']","['sinc', 'intervent', 'studi', 'scenario', ""we'll"", 'glass', 'delta', 'mean', 'mean', 'sd', 'therefor', 'effect', 'size', 'result', 'slight', 'far', 'valu', 'say', 'farthest', 'lower', 'signific', 'practic', 'signific', 'statist']",sinc intervent studi scenario we'll glass delta mean mean sd therefor effect size result slight far valu say farthest lower signific practic signific statist,significance,CS,
259396,"Using delta's method:
delta = (mean.interventional - mean.control)/ S.Dcontrol
mean.interventional = .
mean.control = .
S.D = .

delta = (.-.)/. = .
==> Effect size (delta) = .

Therefore, the correlation between the interventional group and the control groups' mean iz",#significance,3,11941,"['Using', ""delta's"", 'method', 'delta', 'mean', 'interventional', 'mean', 'control', 'S', 'Dcontrol', 'mean', 'interventional', 'mean', 'control', 'S', 'D', 'delta', 'Effect', 'size', 'delta', 'Therefore', 'the', 'correlation', 'between', 'the', 'interventional', 'group', 'and', 'the', 'control', ""groups'"", 'mean', 'iz']","['use', 'delta', 'method', 'delta', 'mean', 'intervent', 'mean', 'control', 's', 'dcontrol', 'mean', 'intervent', 'mean', 'control', 's', 'd', 'delta', 'effect', 'size', 'delta', 'therefor', 'the', 'correl', 'between', 'the', 'intervent', 'group', 'and', 'the', 'control', 'group', 'mean', 'iz']","['delta', 'method', 'delta', 'mean', 'intervent', 'mean', 'control', 'dcontrol', 'mean', 'intervent', 'mean', 'control', 'delta', 'effect', 'size', 'delta', 'therefor', 'correl', 'intervent', 'group', 'control', 'group', 'mean', 'iz']",delta method delta mean intervent mean control dcontrol mean intervent mean control delta effect size delta therefor correl intervent group control group mean iz,significance,CS,
96422,"def hat_checker(n):
    x = [i for i in range(n)]
    random.shuffle(x)
    counter = 
    for i in range(n): 
        if x[i] == i: counter +=  
    return(counter)",#randomization,4,2661,"['def', 'hat_checker', 'n', 'x', 'i', 'for', 'i', 'in', 'range', 'n', 'random', 'shuffle', 'x', 'counter', 'for', 'i', 'in', 'range', 'n', 'if', 'x', 'i', 'i', 'counter', 'return', 'counter']","['def', 'hat_check', 'n', 'x', 'i', 'for', 'i', 'in', 'rang', 'n', 'random', 'shuffl', 'x', 'counter', 'for', 'i', 'in', 'rang', 'n', 'if', 'x', 'i', 'i', 'counter', 'return', 'counter']","['def', 'hat_check', 'n', 'x', 'rang', 'n', 'random', 'shuffl', 'x', 'counter', 'rang', 'n', 'x', 'counter', 'return', 'counter']",def hat_check n x rang n random shuffl x counter rang n x counter return counter,randomizationtechniques,CS,CS110
96422,"def hatbadoo(n):
    correct = list(xrange(n))
    giveaway = random.sample(xrange(n), n)
    correctcount = 
    for i in correct:
        if correct[i] == giveaway[i]:
            correctcount +=

    print correctcount",#randomization,4,2661,"['def', 'hatbadoo', 'n', 'correct', 'list', 'xrange', 'n', 'giveaway', 'random', 'sample', 'xrange', 'n', 'n', 'correctcount', 'for', 'i', 'in', 'correct', 'if', 'correct', 'i', 'giveaway', 'i', 'correctcount', 'print', 'correctcount']","['def', 'hatbadoo', 'n', 'correct', 'list', 'xrang', 'n', 'giveaway', 'random', 'sampl', 'xrang', 'n', 'n', 'correctcount', 'for', 'i', 'in', 'correct', 'if', 'correct', 'i', 'giveaway', 'i', 'correctcount', 'print', 'correctcount']","['def', 'hatbadoo', 'n', 'correct', 'list', 'xrang', 'n', 'giveaway', 'random', 'sampl', 'xrang', 'n', 'n', 'correctcount', 'correct', 'correct', 'giveaway', 'correctcount', 'print', 'correctcount']",def hatbadoo n correct list xrang n giveaway random sampl xrang n n correctcount correct correct giveaway correctcount print correctcount,randomizationtechniques,CS,CS110
96422,"import random
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
def hats(n):
    given  = np.random.choice(np.asarray(range(n)), n, replace=False)
    returned = np.random.choice(np.asarray(range(n)), n, replace=False)
    right = 
    for i in range(n):
        if given[i]==returned[i]:
            right += 
        return right
avg = []
for n in range ():
    hats_n = []
    for i in range ():
        hats_n.append(hats(n))
    avg.append(np.mean(hats_n))
x = range(,)
y = avg[::-]
plt.plot(x,y)
plt.show",#randomization,4,2661,"['import', 'random', 'import', 'numpy', 'as', 'np', 'import', 'matplotlib', 'pyplot', 'as', 'plt', 'matplotlib', 'inline', 'def', 'hats', 'n', 'given', 'np', 'random', 'choice', 'np', 'asarray', 'range', 'n', 'n', 'replace', 'False', 'returned', 'np', 'random', 'choice', 'np', 'asarray', 'range', 'n', 'n', 'replace', 'False', 'right', 'for', 'i', 'in', 'range', 'n', 'if', 'given', 'i', 'returned', 'i', 'right', 'return', 'right', 'avg', 'for', 'n', 'in', 'range', 'hats_n', 'for', 'i', 'in', 'range', 'hats_n', 'append', 'hats', 'n', 'avg', 'append', 'np', 'mean', 'hats_n', 'x', 'range', 'y', 'avg', 'plt', 'plot', 'x', 'y', 'plt', 'show']","['import', 'random', 'import', 'numpi', 'as', 'np', 'import', 'matplotlib', 'pyplot', 'as', 'plt', 'matplotlib', 'inlin', 'def', 'hat', 'n', 'given', 'np', 'random', 'choic', 'np', 'asarray', 'rang', 'n', 'n', 'replac', 'fals', 'return', 'np', 'random', 'choic', 'np', 'asarray', 'rang', 'n', 'n', 'replac', 'fals', 'right', 'for', 'i', 'in', 'rang', 'n', 'if', 'given', 'i', 'return', 'i', 'right', 'return', 'right', 'avg', 'for', 'n', 'in', 'rang', 'hats_n', 'for', 'i', 'in', 'rang', 'hats_n', 'append', 'hat', 'n', 'avg', 'append', 'np', 'mean', 'hats_n', 'x', 'rang', 'y', 'avg', 'plt', 'plot', 'x', 'y', 'plt', 'show']","['import', 'random', 'import', 'numpi', 'np', 'import', 'matplotlib', 'pyplot', 'plt', 'matplotlib', 'inlin', 'def', 'hat', 'n', 'given', 'np', 'random', 'choic', 'np', 'asarray', 'rang', 'n', 'n', 'replac', 'fals', 'return', 'np', 'random', 'choic', 'np', 'asarray', 'rang', 'n', 'n', 'replac', 'fals', 'right', 'rang', 'n', 'given', 'return', 'right', 'return', 'right', 'avg', 'n', 'rang', 'hats_n', 'rang', 'hats_n', 'append', 'hat', 'n', 'avg', 'append', 'np', 'mean', 'hats_n', 'x', 'rang', 'avg', 'plt', 'plot', 'x', 'plt', 'show']",import random import numpi np import matplotlib pyplot plt matplotlib inlin def hat n given np random choic np asarray rang n n replac fals return np random choic np asarray rang n n replac fals right rang n given return right return right avg n rang hats_n rang hats_n append hat n avg append np mean hats_n x rang avg plt plot x plt show,randomizationtechniques,CS,CS110
96422,"def hats(n):
    given = np.random.choice(np.asarray(range(n)),n,replace=False)
    returned = np.random.choice(np.asarray(range(n)),n,replace=False)
    correct = 
    for i in range(n):
        if given[i]==returned[i]:
            correct+=
    return correct
#above for one round for one length
averages_list=[]

for n in range(,):
    hats_spec_n=[]
    for i in range():
        hats_spec_n.append(hats(n))
    averages_list.append(np.mean(hats_spec_n))
    
x = range(,)
y = averages_list[::-]
plt.plot(x,y)
plt.show()",#randomization,4,2661,"['def', 'hats', 'n', 'given', 'np', 'random', 'choice', 'np', 'asarray', 'range', 'n', 'n', 'replace', 'False', 'returned', 'np', 'random', 'choice', 'np', 'asarray', 'range', 'n', 'n', 'replace', 'False', 'correct', 'for', 'i', 'in', 'range', 'n', 'if', 'given', 'i', 'returned', 'i', 'correct', 'return', 'correct', 'above', 'for', 'one', 'round', 'for', 'one', 'length', 'averages_list', 'for', 'n', 'in', 'range', 'hats_spec_n', 'for', 'i', 'in', 'range', 'hats_spec_n', 'append', 'hats', 'n', 'averages_list', 'append', 'np', 'mean', 'hats_spec_n', 'x', 'range', 'y', 'averages_list', 'plt', 'plot', 'x', 'y', 'plt', 'show']","['def', 'hat', 'n', 'given', 'np', 'random', 'choic', 'np', 'asarray', 'rang', 'n', 'n', 'replac', 'fals', 'return', 'np', 'random', 'choic', 'np', 'asarray', 'rang', 'n', 'n', 'replac', 'fals', 'correct', 'for', 'i', 'in', 'rang', 'n', 'if', 'given', 'i', 'return', 'i', 'correct', 'return', 'correct', 'abov', 'for', 'one', 'round', 'for', 'one', 'length', 'averages_list', 'for', 'n', 'in', 'rang', 'hats_spec_n', 'for', 'i', 'in', 'rang', 'hats_spec_n', 'append', 'hat', 'n', 'averages_list', 'append', 'np', 'mean', 'hats_spec_n', 'x', 'rang', 'y', 'averages_list', 'plt', 'plot', 'x', 'y', 'plt', 'show']","['def', 'hat', 'n', 'given', 'np', 'random', 'choic', 'np', 'asarray', 'rang', 'n', 'n', 'replac', 'fals', 'return', 'np', 'random', 'choic', 'np', 'asarray', 'rang', 'n', 'n', 'replac', 'fals', 'correct', 'rang', 'n', 'given', 'return', 'correct', 'return', 'correct', 'abov', 'one', 'round', 'one', 'length', 'averages_list', 'n', 'rang', 'hats_spec_n', 'rang', 'hats_spec_n', 'append', 'hat', 'n', 'averages_list', 'append', 'np', 'mean', 'hats_spec_n', 'x', 'rang', 'averages_list', 'plt', 'plot', 'x', 'plt', 'show']",def hat n given np random choic np asarray rang n n replac fals return np random choic np asarray rang n n replac fals correct rang n given return correct return correct abov one round one length averages_list n rang hats_spec_n rang hats_spec_n append hat n averages_list append np mean hats_spec_n x rang averages_list plt plot x plt show,randomizationtechniques,CS,CS110
96422,"def hatGuy(n):
    hat_track = [i for i in range(n)] # create array
    random.shuffle(hat_track) # use python shuffle function to simulate random order
    return len([hat for index, hat in enumerate(hat_track) if hat == index]) # check if random order matches original using list",#randomization,4,2661,"['def', 'hatGuy', 'n', 'hat_track', 'i', 'for', 'i', 'in', 'range', 'n', 'create', 'array', 'random', 'shuffle', 'hat_track', 'use', 'python', 'shuffle', 'function', 'to', 'simulate', 'random', 'order', 'return', 'len', 'hat', 'for', 'index', 'hat', 'in', 'enumerate', 'hat_track', 'if', 'hat', 'index', 'check', 'if', 'random', 'order', 'matches', 'original', 'using', 'list']","['def', 'hatguy', 'n', 'hat_track', 'i', 'for', 'i', 'in', 'rang', 'n', 'creat', 'array', 'random', 'shuffl', 'hat_track', 'use', 'python', 'shuffl', 'function', 'to', 'simul', 'random', 'order', 'return', 'len', 'hat', 'for', 'index', 'hat', 'in', 'enumer', 'hat_track', 'if', 'hat', 'index', 'check', 'if', 'random', 'order', 'match', 'origin', 'use', 'list']","['def', 'hatguy', 'n', 'hat_track', 'rang', 'n', 'creat', 'array', 'random', 'shuffl', 'hat_track', 'python', 'shuffl', 'function', 'simul', 'random', 'order', 'return', 'len', 'hat', 'index', 'hat', 'enumer', 'hat_track', 'hat', 'index', 'check', 'random', 'order', 'match', 'origin', 'list']",def hatguy n hat_track rang n creat array random shuffl hat_track python shuffl function simul random order return len hat index hat enumer hat_track hat index check random order match origin list,randomizationtechniques,CS,CS110
96422,"import random

def hat_trick(n=):
  hats = [i for i in range(n)]
  random.shuffle(hats)
  correct_hats = len([hat for index, hat in enumerate(hats) if index == hat])

  return hats, correct_hats",#randomization,4,2661,"['import', 'random', 'def', 'hat_trick', 'n', 'hats', 'i', 'for', 'i', 'in', 'range', 'n', 'random', 'shuffle', 'hats', 'correct_hats', 'len', 'hat', 'for', 'index', 'hat', 'in', 'enumerate', 'hats', 'if', 'index', 'hat', 'return', 'hats', 'correct_hats']","['import', 'random', 'def', 'hat_trick', 'n', 'hat', 'i', 'for', 'i', 'in', 'rang', 'n', 'random', 'shuffl', 'hat', 'correct_hat', 'len', 'hat', 'for', 'index', 'hat', 'in', 'enumer', 'hat', 'if', 'index', 'hat', 'return', 'hat', 'correct_hat']","['import', 'random', 'def', 'hat_trick', 'n', 'hat', 'rang', 'n', 'random', 'shuffl', 'hat', 'correct_hat', 'len', 'hat', 'index', 'hat', 'enumer', 'hat', 'index', 'hat', 'return', 'hat', 'correct_hat']",import random def hat_trick n hat rang n random shuffl hat correct_hat len hat index hat enumer hat index hat return hat correct_hat,randomizationtechniques,CS,CS110
96422,"import random

def hat_check(n):
    hats = [i for i in range(n)]
    correct_hats = 
    random.shuffle(hats)
    for i in range(len(hats)):
        if hats[i] == i:
            correct_hats +=   
    return correct_hats",#randomization,4,2661,"['import', 'random', 'def', 'hat_check', 'n', 'hats', 'i', 'for', 'i', 'in', 'range', 'n', 'correct_hats', 'random', 'shuffle', 'hats', 'for', 'i', 'in', 'range', 'len', 'hats', 'if', 'hats', 'i', 'i', 'correct_hats', 'return', 'correct_hats']","['import', 'random', 'def', 'hat_check', 'n', 'hat', 'i', 'for', 'i', 'in', 'rang', 'n', 'correct_hat', 'random', 'shuffl', 'hat', 'for', 'i', 'in', 'rang', 'len', 'hat', 'if', 'hat', 'i', 'i', 'correct_hat', 'return', 'correct_hat']","['import', 'random', 'def', 'hat_check', 'n', 'hat', 'rang', 'n', 'correct_hat', 'random', 'shuffl', 'hat', 'rang', 'len', 'hat', 'hat', 'correct_hat', 'return', 'correct_hat']",import random def hat_check n hat rang n correct_hat random shuffl hat rang len hat hat correct_hat return correct_hat,randomizationtechniques,CS,CS110
96422,"#assuming n[] owns to hat , n[] owns to hat , etc
def hat_check(n):
    deliveryHats = 
    for i  in range(,len(n)):
        if(i == n[i]):
           
            deliveryHats += 
    return deliveryHats/len(n)

#average of success is higher
hats = random.sample(range(), )
#print(hats)
print(hat_check(hats))

#average of success is lower
hats = random.sample(range(), )
#print(hats)
print(hat_check(hats))",#randomization,3,2661,"['assuming', 'n', 'owns', 'to', 'hat', 'n', 'owns', 'to', 'hat', 'etc', 'def', 'hat_check', 'n', 'deliveryHats', 'for', 'i', 'in', 'range', 'len', 'n', 'if', 'i', 'n', 'i', 'deliveryHats', 'return', 'deliveryHats', 'len', 'n', 'average', 'of', 'success', 'is', 'higher', 'hats', 'random', 'sample', 'range', 'print', 'hats', 'print', 'hat_check', 'hats', 'average', 'of', 'success', 'is', 'lower', 'hats', 'random', 'sample', 'range', 'print', 'hats', 'print', 'hat_check', 'hats']","['assum', 'n', 'own', 'to', 'hat', 'n', 'own', 'to', 'hat', 'etc', 'def', 'hat_check', 'n', 'deliveryhat', 'for', 'i', 'in', 'rang', 'len', 'n', 'if', 'i', 'n', 'i', 'deliveryhat', 'return', 'deliveryhat', 'len', 'n', 'averag', 'of', 'success', 'is', 'higher', 'hat', 'random', 'sampl', 'rang', 'print', 'hat', 'print', 'hat_check', 'hat', 'averag', 'of', 'success', 'is', 'lower', 'hat', 'random', 'sampl', 'rang', 'print', 'hat', 'print', 'hat_check', 'hat']","['assum', 'n', 'hat', 'n', 'hat', 'etc', 'def', 'hat_check', 'n', 'deliveryhat', 'rang', 'len', 'n', 'n', 'deliveryhat', 'return', 'deliveryhat', 'len', 'n', 'averag', 'success', 'higher', 'hat', 'random', 'sampl', 'rang', 'print', 'hat', 'print', 'hat_check', 'hat', 'averag', 'success', 'lower', 'hat', 'random', 'sampl', 'rang', 'print', 'hat', 'print', 'hat_check', 'hat']",assum n hat n hat etc def hat_check n deliveryhat rang len n n deliveryhat return deliveryhat len n averag success higher hat random sampl rang print hat print hat_check hat averag success lower hat random sampl rang print hat print hat_check hat,randomizationtechniques,CS,CS110
96422,"# hat simulator

N = 

hats = range(N)
correct_hats = list(enumerate(hats))
collected_hats = []
person = []
correct_return_count = 

for i in hats:
    collected_hats.append(correct_hats[i][])
    shuffle(collected_hats)
    person.append(correct_hats[i][])
    returned_hats = zip(person,collected_hats)
    if returned_hats[i] == correct_hats[i]:
        correct_return_count += 

print ""The number of correct hats returned"", correct_return_count",#randomization,3,2661,"['hat', 'simulator', 'N', 'hats', 'range', 'N', 'correct_hats', 'list', 'enumerate', 'hats', 'collected_hats', 'person', 'correct_return_count', 'for', 'i', 'in', 'hats', 'collected_hats', 'append', 'correct_hats', 'i', 'shuffle', 'collected_hats', 'person', 'append', 'correct_hats', 'i', 'returned_hats', 'zip', 'person', 'collected_hats', 'if', 'returned_hats', 'i', 'correct_hats', 'i', 'correct_return_count', 'print', 'The', 'number', 'of', 'correct', 'hats', 'returned', 'correct_return_count']","['hat', 'simul', 'n', 'hat', 'rang', 'n', 'correct_hat', 'list', 'enumer', 'hat', 'collected_hat', 'person', 'correct_return_count', 'for', 'i', 'in', 'hat', 'collected_hat', 'append', 'correct_hat', 'i', 'shuffl', 'collected_hat', 'person', 'append', 'correct_hat', 'i', 'returned_hat', 'zip', 'person', 'collected_hat', 'if', 'returned_hat', 'i', 'correct_hat', 'i', 'correct_return_count', 'print', 'the', 'number', 'of', 'correct', 'hat', 'return', 'correct_return_count']","['hat', 'simul', 'n', 'hat', 'rang', 'n', 'correct_hat', 'list', 'enumer', 'hat', 'collected_hat', 'person', 'correct_return_count', 'hat', 'collected_hat', 'append', 'correct_hat', 'shuffl', 'collected_hat', 'person', 'append', 'correct_hat', 'returned_hat', 'zip', 'person', 'collected_hat', 'returned_hat', 'correct_hat', 'correct_return_count', 'print', 'number', 'correct', 'hat', 'return', 'correct_return_count']",hat simul n hat rang n correct_hat list enumer hat collected_hat person correct_return_count hat collected_hat append correct_hat shuffl collected_hat person append correct_hat returned_hat zip person collected_hat returned_hat correct_hat correct_return_count print number correct hat return correct_return_count,randomizationtechniques,CS,CS110
96422,"def hat_check(n):
    x = [[i] for i in range(n)]
    random.shuffle(x)
    print x
    correct = 
    for j in range(n):
        if x[i] == [j]:
            print ""got it! for guest #"", j + 
            correct += 
    return correct

print hat_check()",#randomization,4,2661,"['def', 'hat_check', 'n', 'x', 'i', 'for', 'i', 'in', 'range', 'n', 'random', 'shuffle', 'x', 'print', 'x', 'correct', 'for', 'j', 'in', 'range', 'n', 'if', 'x', 'i', 'j', 'print', 'got', 'it', 'for', 'guest', 'j', 'correct', 'return', 'correct', 'print', 'hat_check']","['def', 'hat_check', 'n', 'x', 'i', 'for', 'i', 'in', 'rang', 'n', 'random', 'shuffl', 'x', 'print', 'x', 'correct', 'for', 'j', 'in', 'rang', 'n', 'if', 'x', 'i', 'j', 'print', 'got', 'it', 'for', 'guest', 'j', 'correct', 'return', 'correct', 'print', 'hat_check']","['def', 'hat_check', 'n', 'x', 'rang', 'n', 'random', 'shuffl', 'x', 'print', 'x', 'correct', 'j', 'rang', 'n', 'x', 'j', 'print', 'got', 'guest', 'j', 'correct', 'return', 'correct', 'print', 'hat_check']",def hat_check n x rang n random shuffl x print x correct j rang n x j print got guest j correct return correct print hat_check,randomizationtechniques,CS,CS110
96422,"def party(n):
	hats = [ i for i in range(n) ] # assigns hat to people (assuming the people expressed by the index)
	random.shuffle(hats) #shuffling the list such as the hat number(value) and the person number (index) as no matching
	return len([hat for preson, hat in enumerate(hats) if hat == preson]) #counting how many do match",#randomization,4,2661,"['def', 'party', 'n', 'hats', 'i', 'for', 'i', 'in', 'range', 'n', 'assigns', 'hat', 'to', 'people', 'assuming', 'the', 'people', 'expressed', 'by', 'the', 'index', 'random', 'shuffle', 'hats', 'shuffling', 'the', 'list', 'such', 'as', 'the', 'hat', 'number', 'value', 'and', 'the', 'person', 'number', 'index', 'as', 'no', 'matching', 'return', 'len', 'hat', 'for', 'preson', 'hat', 'in', 'enumerate', 'hats', 'if', 'hat', 'preson', 'counting', 'how', 'many', 'do', 'match']","['def', 'parti', 'n', 'hat', 'i', 'for', 'i', 'in', 'rang', 'n', 'assign', 'hat', 'to', 'peopl', 'assum', 'the', 'peopl', 'express', 'by', 'the', 'index', 'random', 'shuffl', 'hat', 'shuffl', 'the', 'list', 'such', 'as', 'the', 'hat', 'number', 'valu', 'and', 'the', 'person', 'number', 'index', 'as', 'no', 'match', 'return', 'len', 'hat', 'for', 'preson', 'hat', 'in', 'enumer', 'hat', 'if', 'hat', 'preson', 'count', 'how', 'mani', 'do', 'match']","['def', 'parti', 'n', 'hat', 'rang', 'n', 'assign', 'hat', 'peopl', 'assum', 'peopl', 'express', 'index', 'random', 'shuffl', 'hat', 'shuffl', 'list', 'hat', 'number', 'valu', 'person', 'number', 'index', 'match', 'return', 'len', 'hat', 'preson', 'hat', 'enumer', 'hat', 'hat', 'preson', 'count', 'mani', 'match']",def parti n hat rang n assign hat peopl assum peopl express index random shuffl hat shuffl list hat number valu person number index match return len hat preson hat enumer hat hat preson count mani match,randomizationtechniques,CS,CS110
96422,"def hat_check(n):
    #receive hats
    got_hat_back = []
    #randomize hats
    b = random.sample(n,len(n))
    #who gets their own hat back
    for i in range(len(n)):
        if b[i] == n[i]:
            got_hat_back.append(i)
    return got_hat_back
    
n = [x for x in range()]
hat_check(n)

def plotit(f):
    x = [] #people attending
    y = [] #hats given back
    for i in range(,,):
        n = [p for p in range(i)]
        x.append(len(n))
        y.append(len(f(n)))
    p = pyplot.plot(x, y, 'o')
    pyplot.show()

plotit(hat_check)",#randomization,4,2661,"['def', 'hat_check', 'n', 'receive', 'hats', 'got_hat_back', 'randomize', 'hats', 'b', 'random', 'sample', 'n', 'len', 'n', 'who', 'gets', 'their', 'own', 'hat', 'back', 'for', 'i', 'in', 'range', 'len', 'n', 'if', 'b', 'i', 'n', 'i', 'got_hat_back', 'append', 'i', 'return', 'got_hat_back', 'n', 'x', 'for', 'x', 'in', 'range', 'hat_check', 'n', 'def', 'plotit', 'f', 'x', 'people', 'attending', 'y', 'hats', 'given', 'back', 'for', 'i', 'in', 'range', 'n', 'p', 'for', 'p', 'in', 'range', 'i', 'x', 'append', 'len', 'n', 'y', 'append', 'len', 'f', 'n', 'p', 'pyplot', 'plot', 'x', 'y', ""'o'"", 'pyplot', 'show', 'plotit', 'hat_check']","['def', 'hat_check', 'n', 'receiv', 'hat', 'got_hat_back', 'random', 'hat', 'b', 'random', 'sampl', 'n', 'len', 'n', 'who', 'get', 'their', 'own', 'hat', 'back', 'for', 'i', 'in', 'rang', 'len', 'n', 'if', 'b', 'i', 'n', 'i', 'got_hat_back', 'append', 'i', 'return', 'got_hat_back', 'n', 'x', 'for', 'x', 'in', 'rang', 'hat_check', 'n', 'def', 'plotit', 'f', 'x', 'peopl', 'attend', 'y', 'hat', 'given', 'back', 'for', 'i', 'in', 'rang', 'n', 'p', 'for', 'p', 'in', 'rang', 'i', 'x', 'append', 'len', 'n', 'y', 'append', 'len', 'f', 'n', 'p', 'pyplot', 'plot', 'x', 'y', 'o', 'pyplot', 'show', 'plotit', 'hat_check']","['def', 'hat_check', 'n', 'receiv', 'hat', 'got_hat_back', 'random', 'hat', 'b', 'random', 'sampl', 'n', 'len', 'n', 'get', 'hat', 'back', 'rang', 'len', 'n', 'b', 'n', 'got_hat_back', 'append', 'return', 'got_hat_back', 'n', 'x', 'x', 'rang', 'hat_check', 'n', 'def', 'plotit', 'f', 'x', 'peopl', 'attend', 'hat', 'given', 'back', 'rang', 'n', 'p', 'p', 'rang', 'x', 'append', 'len', 'n', 'append', 'len', 'f', 'n', 'p', 'pyplot', 'plot', 'x', 'pyplot', 'show', 'plotit', 'hat_check']",def hat_check n receiv hat got_hat_back random hat b random sampl n len n get hat back rang len n b n got_hat_back append return got_hat_back n x x rang hat_check n def plotit f x peopl attend hat given back rang n p p rang x append len n append len f n p pyplot plot x pyplot show plotit hat_check,randomizationtechniques,CS,CS110
96422,"people = []
hats =[]

def give_hats(n): 
    for i in range (,n): #create two lists with same numbers
        people.append(i)
    for j in range (,n):
        hats.append(j)
    
    random.shuffle(people) #shuffle those lists
    random.shuffle(hats)

    correct = 
    for k in range (, len(people)):
        if people[k] == hats[k]: #see if hat matches person
            correct += 
    return correct",#randomization,4,2661,"['people', 'hats', 'def', 'give_hats', 'n', 'for', 'i', 'in', 'range', 'n', 'create', 'two', 'lists', 'with', 'same', 'numbers', 'people', 'append', 'i', 'for', 'j', 'in', 'range', 'n', 'hats', 'append', 'j', 'random', 'shuffle', 'people', 'shuffle', 'those', 'lists', 'random', 'shuffle', 'hats', 'correct', 'for', 'k', 'in', 'range', 'len', 'people', 'if', 'people', 'k', 'hats', 'k', 'see', 'if', 'hat', 'matches', 'person', 'correct', 'return', 'correct']","['peopl', 'hat', 'def', 'give_hat', 'n', 'for', 'i', 'in', 'rang', 'n', 'creat', 'two', 'list', 'with', 'same', 'number', 'peopl', 'append', 'i', 'for', 'j', 'in', 'rang', 'n', 'hat', 'append', 'j', 'random', 'shuffl', 'peopl', 'shuffl', 'those', 'list', 'random', 'shuffl', 'hat', 'correct', 'for', 'k', 'in', 'rang', 'len', 'peopl', 'if', 'peopl', 'k', 'hat', 'k', 'see', 'if', 'hat', 'match', 'person', 'correct', 'return', 'correct']","['peopl', 'hat', 'def', 'give_hat', 'n', 'rang', 'n', 'creat', 'two', 'list', 'number', 'peopl', 'append', 'j', 'rang', 'n', 'hat', 'append', 'j', 'random', 'shuffl', 'peopl', 'shuffl', 'list', 'random', 'shuffl', 'hat', 'correct', 'k', 'rang', 'len', 'peopl', 'peopl', 'k', 'hat', 'k', 'see', 'hat', 'match', 'person', 'correct', 'return', 'correct']",peopl hat def give_hat n rang n creat two list number peopl append j rang n hat append j random shuffl peopl shuffl list random shuffl hat correct k rang len peopl peopl k hat k see hat match person correct return correct,randomizationtechniques,CS,CS110
96422,"received_hat = []

def hat_check(n):  
    correct = 
    hats = np.random.randint(,,n)
    for i in range(n):
        received_hat.append(hats[i])
        if hats[i] == np.random.randint(,):
            correct = correct + 
    return correct

hat_check()",#randomization,2,2661,"['received_hat', 'def', 'hat_check', 'n', 'correct', 'hats', 'np', 'random', 'randint', 'n', 'for', 'i', 'in', 'range', 'n', 'received_hat', 'append', 'hats', 'i', 'if', 'hats', 'i', 'np', 'random', 'randint', 'correct', 'correct', 'return', 'correct', 'hat_check']","['received_hat', 'def', 'hat_check', 'n', 'correct', 'hat', 'np', 'random', 'randint', 'n', 'for', 'i', 'in', 'rang', 'n', 'received_hat', 'append', 'hat', 'i', 'if', 'hat', 'i', 'np', 'random', 'randint', 'correct', 'correct', 'return', 'correct', 'hat_check']","['received_hat', 'def', 'hat_check', 'n', 'correct', 'hat', 'np', 'random', 'randint', 'n', 'rang', 'n', 'received_hat', 'append', 'hat', 'hat', 'np', 'random', 'randint', 'correct', 'correct', 'return', 'correct', 'hat_check']",received_hat def hat_check n correct hat np random randint n rang n received_hat append hat hat np random randint correct correct return correct hat_check,randomizationtechniques,CS,CS110
96428,"def hatCheck(N):
	initial=list(range(,N))
	final=list(range(,N))
	random.shuffle(final)
	correctHats=
	for i in range(N-):
		if initial[i]==final[i]: correctHats+=
	return correctHats",#randomization,4,2664,"['def', 'hatCheck', 'N', 'initial', 'list', 'range', 'N', 'final', 'list', 'range', 'N', 'random', 'shuffle', 'final', 'correctHats', 'for', 'i', 'in', 'range', 'N', 'if', 'initial', 'i', 'final', 'i', 'correctHats', 'return', 'correctHats']","['def', 'hatcheck', 'n', 'initi', 'list', 'rang', 'n', 'final', 'list', 'rang', 'n', 'random', 'shuffl', 'final', 'correcthat', 'for', 'i', 'in', 'rang', 'n', 'if', 'initi', 'i', 'final', 'i', 'correcthat', 'return', 'correcthat']","['def', 'hatcheck', 'n', 'initi', 'list', 'rang', 'n', 'final', 'list', 'rang', 'n', 'random', 'shuffl', 'final', 'correcthat', 'rang', 'n', 'initi', 'final', 'correcthat', 'return', 'correcthat']",def hatcheck n initi list rang n final list rang n random shuffl final correcthat rang n initi final correcthat return correcthat,randomizationtechniques,CS,CS110
96428,"def hat_check(n):
    a = [i for i in range(n)]
    random.shuffle(a)
    correct_hats = 
    for i in range(n):
        if a[i] == i:
            correct_hats += 
    return correct_hats
def plot_distribution(func, max_x, n_of_experiments=): 
    experiments = {}
    x = []
    y = []
    for x_val in range(, max_x):
        for _ in range(n_of_experiments):
            updated_exp = experiments.get(x_val, [])
            updated_exp.append(function(x_val))
            experiments[x_val] = updated_exp
        x.append(x_val)
        y.append(numpy.mean(experiments[x_val]))
    ax.plot(x",#randomization,4,2664,"['def', 'hat_check', 'n', 'a', 'i', 'for', 'i', 'in', 'range', 'n', 'random', 'shuffle', 'a', 'correct_hats', 'for', 'i', 'in', 'range', 'n', 'if', 'a', 'i', 'i', 'correct_hats', 'return', 'correct_hats', 'def', 'plot_distribution', 'func', 'max_x', 'n_of_experiments', 'experiments', 'x', 'y', 'for', 'x_val', 'in', 'range', 'max_x', 'for', '_', 'in', 'range', 'n_of_experiments', 'updated_exp', 'experiments', 'get', 'x_val', 'updated_exp', 'append', 'function', 'x_val', 'experiments', 'x_val', 'updated_exp', 'x', 'append', 'x_val', 'y', 'append', 'numpy', 'mean', 'experiments', 'x_val', 'ax', 'plot', 'x']","['def', 'hat_check', 'n', 'a', 'i', 'for', 'i', 'in', 'rang', 'n', 'random', 'shuffl', 'a', 'correct_hat', 'for', 'i', 'in', 'rang', 'n', 'if', 'a', 'i', 'i', 'correct_hat', 'return', 'correct_hat', 'def', 'plot_distribut', 'func', 'max_x', 'n_of_experi', 'experi', 'x', 'y', 'for', 'x_val', 'in', 'rang', 'max_x', 'for', '_', 'in', 'rang', 'n_of_experi', 'updated_exp', 'experi', 'get', 'x_val', 'updated_exp', 'append', 'function', 'x_val', 'experi', 'x_val', 'updated_exp', 'x', 'append', 'x_val', 'y', 'append', 'numpi', 'mean', 'experi', 'x_val', 'ax', 'plot', 'x']","['def', 'hat_check', 'n', 'rang', 'n', 'random', 'shuffl', 'correct_hat', 'rang', 'n', 'correct_hat', 'return', 'correct_hat', 'def', 'plot_distribut', 'func', 'max_x', 'n_of_experi', 'experi', 'x', 'x_val', 'rang', 'max_x', '_', 'rang', 'n_of_experi', 'updated_exp', 'experi', 'get', 'x_val', 'updated_exp', 'append', 'function', 'x_val', 'experi', 'x_val', 'updated_exp', 'x', 'append', 'x_val', 'append', 'numpi', 'mean', 'experi', 'x_val', 'ax', 'plot', 'x']",def hat_check n rang n random shuffl correct_hat rang n correct_hat return correct_hat def plot_distribut func max_x n_of_experi experi x x_val rang max_x _ rang n_of_experi updated_exp experi get x_val updated_exp append function x_val experi x_val updated_exp x append x_val append numpi mean experi x_val ax plot x,randomizationtechniques,CS,CS110
96428,"def hat(n):
    owners = [i for i in range(n)]
    attendant = []
    final = []
    attendant = random.permutation(owners)
    for i in range(n):
        final.append([owners[i], attendant[i]])
    return final



def test(n):
    count = 
    data = hat(n)
    for i in range(len(data)):
        if data[i][] == data[i][]:
            count +=
    return count

data_graph = []
for i in range(,):
    data_graph.append(test(i)/float(i))

plt.plot(data_graph)",#randomization,4,2664,"['def', 'hat', 'n', 'owners', 'i', 'for', 'i', 'in', 'range', 'n', 'attendant', 'final', 'attendant', 'random', 'permutation', 'owners', 'for', 'i', 'in', 'range', 'n', 'final', 'append', 'owners', 'i', 'attendant', 'i', 'return', 'final', 'def', 'test', 'n', 'count', 'data', 'hat', 'n', 'for', 'i', 'in', 'range', 'len', 'data', 'if', 'data', 'i', 'data', 'i', 'count', 'return', 'count', 'data_graph', 'for', 'i', 'in', 'range', 'data_graph', 'append', 'test', 'i', 'float', 'i', 'plt', 'plot', 'data_graph']","['def', 'hat', 'n', 'owner', 'i', 'for', 'i', 'in', 'rang', 'n', 'attend', 'final', 'attend', 'random', 'permut', 'owner', 'for', 'i', 'in', 'rang', 'n', 'final', 'append', 'owner', 'i', 'attend', 'i', 'return', 'final', 'def', 'test', 'n', 'count', 'data', 'hat', 'n', 'for', 'i', 'in', 'rang', 'len', 'data', 'if', 'data', 'i', 'data', 'i', 'count', 'return', 'count', 'data_graph', 'for', 'i', 'in', 'rang', 'data_graph', 'append', 'test', 'i', 'float', 'i', 'plt', 'plot', 'data_graph']","['def', 'hat', 'n', 'owner', 'rang', 'n', 'attend', 'final', 'attend', 'random', 'permut', 'owner', 'rang', 'n', 'final', 'append', 'owner', 'attend', 'return', 'final', 'def', 'test', 'n', 'count', 'data', 'hat', 'n', 'rang', 'len', 'data', 'data', 'data', 'count', 'return', 'count', 'data_graph', 'rang', 'data_graph', 'append', 'test', 'float', 'plt', 'plot', 'data_graph']",def hat n owner rang n attend final attend random permut owner rang n final append owner attend return final def test n count data hat n rang len data data data count return count data_graph rang data_graph append test float plt plot data_graph,randomizationtechniques,CS,CS110
96428,"def hat_check(n):
    hats = np.random.permutation(range(n))
    return sum([ for i in range(n) if hats[i] == i])",#randomization,4,2664,"['def', 'hat_check', 'n', 'hats', 'np', 'random', 'permutation', 'range', 'n', 'return', 'sum', 'for', 'i', 'in', 'range', 'n', 'if', 'hats', 'i', 'i']","['def', 'hat_check', 'n', 'hat', 'np', 'random', 'permut', 'rang', 'n', 'return', 'sum', 'for', 'i', 'in', 'rang', 'n', 'if', 'hat', 'i', 'i']","['def', 'hat_check', 'n', 'hat', 'np', 'random', 'permut', 'rang', 'n', 'return', 'sum', 'rang', 'n', 'hat']",def hat_check n hat np random permut rang n return sum rang n hat,randomizationtechniques,CS,CS110
96428,"def hat_check(n):
correct= 
hat: np.random.random(n)
for i in range(n):
received.hat.append(hat[i])
if hat[i] == np.random.random(n):
correct = correct+
return correct

hat_check()",#randomization,2,2664,"['def', 'hat_check', 'n', 'correct', 'hat', 'np', 'random', 'random', 'n', 'for', 'i', 'in', 'range', 'n', 'received', 'hat', 'append', 'hat', 'i', 'if', 'hat', 'i', 'np', 'random', 'random', 'n', 'correct', 'correct', 'return', 'correct', 'hat_check']","['def', 'hat_check', 'n', 'correct', 'hat', 'np', 'random', 'random', 'n', 'for', 'i', 'in', 'rang', 'n', 'receiv', 'hat', 'append', 'hat', 'i', 'if', 'hat', 'i', 'np', 'random', 'random', 'n', 'correct', 'correct', 'return', 'correct', 'hat_check']","['def', 'hat_check', 'n', 'correct', 'hat', 'np', 'random', 'random', 'n', 'rang', 'n', 'receiv', 'hat', 'append', 'hat', 'hat', 'np', 'random', 'random', 'n', 'correct', 'correct', 'return', 'correct', 'hat_check']",def hat_check n correct hat np random random n rang n receiv hat append hat hat np random random n correct correct return correct hat_check,randomizationtechniques,CS,CS110
96428,"import random
def number_hats(n):
    correct_assigned=[]
    for i in range(,n,):
        correctly=random.randint(i,n)
        if correctly==i:
            correct_assigned.append(correctly)
    return correctly
print(number_hats())",#randomization,2,2664,"['import', 'random', 'def', 'number_hats', 'n', 'correct_assigned', 'for', 'i', 'in', 'range', 'n', 'correctly', 'random', 'randint', 'i', 'n', 'if', 'correctly', 'i', 'correct_assigned', 'append', 'correctly', 'return', 'correctly', 'print', 'number_hats']","['import', 'random', 'def', 'number_hat', 'n', 'correct_assign', 'for', 'i', 'in', 'rang', 'n', 'correct', 'random', 'randint', 'i', 'n', 'if', 'correct', 'i', 'correct_assign', 'append', 'correct', 'return', 'correct', 'print', 'number_hat']","['import', 'random', 'def', 'number_hat', 'n', 'correct_assign', 'rang', 'n', 'correct', 'random', 'randint', 'n', 'correct', 'correct_assign', 'append', 'correct', 'return', 'correct', 'print', 'number_hat']",import random def number_hat n correct_assign rang n correct random randint n correct correct_assign append correct return correct print number_hat,randomizationtechniques,CS,CS110
96428,"from random import shuffle
n= #number of people at the party

hatSum=.
iterations=
for h in range(iterations):
    people = [[i] for i in xrange(n)]
    shuffle(people)
    correctHat=.
    j=
    for j in range(n):
        if j == people[j][]: 
            correctHat+=
    hatSum=hatSum+correctHat
print ""the homie got it right"", *(hatSum/n)/iterations, ""percent of the time when there were"", n, ""people at the party""",#randomization,4,2664,"['from', 'random', 'import', 'shuffle', 'n', 'number', 'of', 'people', 'at', 'the', 'party', 'hatSum', 'iterations', 'for', 'h', 'in', 'range', 'iterations', 'people', 'i', 'for', 'i', 'in', 'xrange', 'n', 'shuffle', 'people', 'correctHat', 'j', 'for', 'j', 'in', 'range', 'n', 'if', 'j', 'people', 'j', 'correctHat', 'hatSum', 'hatSum', 'correctHat', 'print', 'the', 'homie', 'got', 'it', 'right', 'hatSum', 'n', 'iterations', 'percent', 'of', 'the', 'time', 'when', 'there', 'were', 'n', 'people', 'at', 'the', 'party']","['from', 'random', 'import', 'shuffl', 'n', 'number', 'of', 'peopl', 'at', 'the', 'parti', 'hatsum', 'iter', 'for', 'h', 'in', 'rang', 'iter', 'peopl', 'i', 'for', 'i', 'in', 'xrang', 'n', 'shuffl', 'peopl', 'correcthat', 'j', 'for', 'j', 'in', 'rang', 'n', 'if', 'j', 'peopl', 'j', 'correcthat', 'hatsum', 'hatsum', 'correcthat', 'print', 'the', 'homi', 'got', 'it', 'right', 'hatsum', 'n', 'iter', 'percent', 'of', 'the', 'time', 'when', 'there', 'were', 'n', 'peopl', 'at', 'the', 'parti']","['random', 'import', 'shuffl', 'n', 'number', 'peopl', 'parti', 'hatsum', 'iter', 'h', 'rang', 'iter', 'peopl', 'xrang', 'n', 'shuffl', 'peopl', 'correcthat', 'j', 'j', 'rang', 'n', 'j', 'peopl', 'j', 'correcthat', 'hatsum', 'hatsum', 'correcthat', 'print', 'homi', 'got', 'right', 'hatsum', 'n', 'iter', 'percent', 'time', 'n', 'peopl', 'parti']",random import shuffl n number peopl parti hatsum iter h rang iter peopl xrang n shuffl peopl correcthat j j rang n j peopl j correcthat hatsum hatsum correcthat print homi got right hatsum n iter percent time n peopl parti,randomizationtechniques,CS,CS110
96428,"import numpy as np
import matplotlib.pyplot as plt

def hat_check(n):
    hat = np.random.permutation(n)
    for i in range(n):
        if i == hat[i]:
            count += 
    return count

n_hat = 
times = 
dist = []
for i in range(times):
    dist.append(hat_check(n_hat))
plt.plot(dist)
    
# Let p(i) is the number of permutation with i fixed points
# Probability that ppl got the right hat is sigma ip(i) / n!, which is ",#randomization,4,2664,"['import', 'numpy', 'as', 'np', 'import', 'matplotlib', 'pyplot', 'as', 'plt', 'def', 'hat_check', 'n', 'hat', 'np', 'random', 'permutation', 'n', 'for', 'i', 'in', 'range', 'n', 'if', 'i', 'hat', 'i', 'count', 'return', 'count', 'n_hat', 'times', 'dist', 'for', 'i', 'in', 'range', 'times', 'dist', 'append', 'hat_check', 'n_hat', 'plt', 'plot', 'dist', 'Let', 'p', 'i', 'is', 'the', 'number', 'of', 'permutation', 'with', 'i', 'fixed', 'points', 'Probability', 'that', 'ppl', 'got', 'the', 'right', 'hat', 'is', 'sigma', 'ip', 'i', 'n', 'which', 'is']","['import', 'numpi', 'as', 'np', 'import', 'matplotlib', 'pyplot', 'as', 'plt', 'def', 'hat_check', 'n', 'hat', 'np', 'random', 'permut', 'n', 'for', 'i', 'in', 'rang', 'n', 'if', 'i', 'hat', 'i', 'count', 'return', 'count', 'n_hat', 'time', 'dist', 'for', 'i', 'in', 'rang', 'time', 'dist', 'append', 'hat_check', 'n_hat', 'plt', 'plot', 'dist', 'let', 'p', 'i', 'is', 'the', 'number', 'of', 'permut', 'with', 'i', 'fix', 'point', 'probabl', 'that', 'ppl', 'got', 'the', 'right', 'hat', 'is', 'sigma', 'ip', 'i', 'n', 'which', 'is']","['import', 'numpi', 'np', 'import', 'matplotlib', 'pyplot', 'plt', 'def', 'hat_check', 'n', 'hat', 'np', 'random', 'permut', 'n', 'rang', 'n', 'hat', 'count', 'return', 'count', 'n_hat', 'time', 'dist', 'rang', 'time', 'dist', 'append', 'hat_check', 'n_hat', 'plt', 'plot', 'dist', 'let', 'p', 'number', 'permut', 'fix', 'point', 'probabl', 'ppl', 'got', 'right', 'hat', 'sigma', 'ip', 'n']",import numpi np import matplotlib pyplot plt def hat_check n hat np random permut n rang n hat count return count n_hat time dist rang time dist append hat_check n_hat plt plot dist let p number permut fix point probabl ppl got right hat sigma ip n,randomizationtechniques,CS,CS110
96428,"import random
original = list(range())#hats received
original = original #since we destroy  in the function
results = []

def hat_check(original):
    global results
    global original
    correct = 
    for i in range(len(original)):
        x = random.choice(original)
        results.append(x)
        original.remove(x)
    for i in original:  #compare both lists elements to see what was right
        for j in results:
            if i == j:
                correct += 
    print correct
hat_check(original)",#randomization,4,2664,"['import', 'random', 'original', 'list', 'range', 'hats', 'received', 'original', 'original', 'since', 'we', 'destroy', 'in', 'the', 'function', 'results', 'def', 'hat_check', 'original', 'global', 'results', 'global', 'original', 'correct', 'for', 'i', 'in', 'range', 'len', 'original', 'x', 'random', 'choice', 'original', 'results', 'append', 'x', 'original', 'remove', 'x', 'for', 'i', 'in', 'original', 'compare', 'both', 'lists', 'elements', 'to', 'see', 'what', 'was', 'right', 'for', 'j', 'in', 'results', 'if', 'i', 'j', 'correct', 'print', 'correct', 'hat_check', 'original']","['import', 'random', 'origin', 'list', 'rang', 'hat', 'receiv', 'origin', 'origin', 'sinc', 'we', 'destroy', 'in', 'the', 'function', 'result', 'def', 'hat_check', 'origin', 'global', 'result', 'global', 'origin', 'correct', 'for', 'i', 'in', 'rang', 'len', 'origin', 'x', 'random', 'choic', 'origin', 'result', 'append', 'x', 'origin', 'remov', 'x', 'for', 'i', 'in', 'origin', 'compar', 'both', 'list', 'element', 'to', 'see', 'what', 'was', 'right', 'for', 'j', 'in', 'result', 'if', 'i', 'j', 'correct', 'print', 'correct', 'hat_check', 'origin']","['import', 'random', 'origin', 'list', 'rang', 'hat', 'receiv', 'origin', 'origin', 'sinc', 'destroy', 'function', 'result', 'def', 'hat_check', 'origin', 'global', 'result', 'global', 'origin', 'correct', 'rang', 'len', 'origin', 'x', 'random', 'choic', 'origin', 'result', 'append', 'x', 'origin', 'remov', 'x', 'origin', 'compar', 'list', 'element', 'see', 'right', 'j', 'result', 'j', 'correct', 'print', 'correct', 'hat_check', 'origin']",import random origin list rang hat receiv origin origin sinc destroy function result def hat_check origin global result global origin correct rang len origin x random choic origin result append x origin remov x origin compar list element see right j result j correct print correct hat_check origin,randomizationtechniques,CS,CS110
96428,"from random import shuffle
import matplotlib.pyplot as plt

def hats(n):
    a = [i for i in range(n)]
    b = [i for i in range(n)]
    shuffle(a)
    lst = []
    for i in range(n):
        if a[i] == b[i]:
            lst.append(True)
        else:
            lst.append(False)
    return(sum(lst))

lst = []

for i in range():
    new = []
    for z in range():
        new_result = float(hats(i))
        new.append(new_result)
    lst.append(sum(new)/len(new))

plt.plot(lst)",#randomization,4,2664,"['from', 'random', 'import', 'shuffle', 'import', 'matplotlib', 'pyplot', 'as', 'plt', 'def', 'hats', 'n', 'a', 'i', 'for', 'i', 'in', 'range', 'n', 'b', 'i', 'for', 'i', 'in', 'range', 'n', 'shuffle', 'a', 'lst', 'for', 'i', 'in', 'range', 'n', 'if', 'a', 'i', 'b', 'i', 'lst', 'append', 'True', 'else', 'lst', 'append', 'False', 'return', 'sum', 'lst', 'lst', 'for', 'i', 'in', 'range', 'new', 'for', 'z', 'in', 'range', 'new_result', 'float', 'hats', 'i', 'new', 'append', 'new_result', 'lst', 'append', 'sum', 'new', 'len', 'new', 'plt', 'plot', 'lst']","['from', 'random', 'import', 'shuffl', 'import', 'matplotlib', 'pyplot', 'as', 'plt', 'def', 'hat', 'n', 'a', 'i', 'for', 'i', 'in', 'rang', 'n', 'b', 'i', 'for', 'i', 'in', 'rang', 'n', 'shuffl', 'a', 'lst', 'for', 'i', 'in', 'rang', 'n', 'if', 'a', 'i', 'b', 'i', 'lst', 'append', 'true', 'els', 'lst', 'append', 'fals', 'return', 'sum', 'lst', 'lst', 'for', 'i', 'in', 'rang', 'new', 'for', 'z', 'in', 'rang', 'new_result', 'float', 'hat', 'i', 'new', 'append', 'new_result', 'lst', 'append', 'sum', 'new', 'len', 'new', 'plt', 'plot', 'lst']","['random', 'import', 'shuffl', 'import', 'matplotlib', 'pyplot', 'plt', 'def', 'hat', 'n', 'rang', 'n', 'b', 'rang', 'n', 'shuffl', 'lst', 'rang', 'n', 'b', 'lst', 'append', 'true', 'els', 'lst', 'append', 'fals', 'return', 'sum', 'lst', 'lst', 'rang', 'new', 'z', 'rang', 'new_result', 'float', 'hat', 'new', 'append', 'new_result', 'lst', 'append', 'sum', 'new', 'len', 'new', 'plt', 'plot', 'lst']",random import shuffl import matplotlib pyplot plt def hat n rang n b rang n shuffl lst rang n b lst append true els lst append fals return sum lst lst rang new z rang new_result float hat new append new_result lst append sum new len new plt plot lst,randomizationtechniques,CS,CS110
96428,"import numpy as np
def hat_problem(n):
    hats = range(n)
    np.random.shuffle(hats)
    sum_correct = sum([ if _ ==__ else  for _,__ in enumerate(hats)])
    return sum_correct

n_hats = 
n_trials = 
avg_list = []
for i in range(, n_hats+):
    avg = 
    for j in range(n_trials):
        avg += hat_problem(i)
    avg /= float(n_trials)
    avg_list.append(avg)
plt.figure()
plt.plot(range(, n_hats+),avg_list)",#randomization,4,2664,"['import', 'numpy', 'as', 'np', 'def', 'hat_problem', 'n', 'hats', 'range', 'n', 'np', 'random', 'shuffle', 'hats', 'sum_correct', 'sum', 'if', '_', '__', 'else', 'for', '_', '__', 'in', 'enumerate', 'hats', 'return', 'sum_correct', 'n_hats', 'n_trials', 'avg_list', 'for', 'i', 'in', 'range', 'n_hats', 'avg', 'for', 'j', 'in', 'range', 'n_trials', 'avg', 'hat_problem', 'i', 'avg', 'float', 'n_trials', 'avg_list', 'append', 'avg', 'plt', 'figure', 'plt', 'plot', 'range', 'n_hats', 'avg_list']","['import', 'numpi', 'as', 'np', 'def', 'hat_problem', 'n', 'hat', 'rang', 'n', 'np', 'random', 'shuffl', 'hat', 'sum_correct', 'sum', 'if', '_', '__', 'els', 'for', '_', '__', 'in', 'enumer', 'hat', 'return', 'sum_correct', 'n_hat', 'n_trial', 'avg_list', 'for', 'i', 'in', 'rang', 'n_hat', 'avg', 'for', 'j', 'in', 'rang', 'n_trial', 'avg', 'hat_problem', 'i', 'avg', 'float', 'n_trial', 'avg_list', 'append', 'avg', 'plt', 'figur', 'plt', 'plot', 'rang', 'n_hat', 'avg_list']","['import', 'numpi', 'np', 'def', 'hat_problem', 'n', 'hat', 'rang', 'n', 'np', 'random', 'shuffl', 'hat', 'sum_correct', 'sum', '_', '__', 'els', '_', '__', 'enumer', 'hat', 'return', 'sum_correct', 'n_hat', 'n_trial', 'avg_list', 'rang', 'n_hat', 'avg', 'j', 'rang', 'n_trial', 'avg', 'hat_problem', 'avg', 'float', 'n_trial', 'avg_list', 'append', 'avg', 'plt', 'figur', 'plt', 'plot', 'rang', 'n_hat', 'avg_list']",import numpi np def hat_problem n hat rang n np random shuffl hat sum_correct sum _ __ els _ __ enumer hat return sum_correct n_hat n_trial avg_list rang n_hat avg j rang n_trial avg hat_problem avg float n_trial avg_list append avg plt figur plt plot rang n_hat avg_list,randomizationtechniques,CS,CS110
96428,"import random
def hats(n):
    correctGive=[]
    for i in range(,n,):
        correct=random.randint(i,n)
        if correct==i:
            correctGive.append(correct)
    return correctGive
print(hats())",#randomization,3,2664,"['import', 'random', 'def', 'hats', 'n', 'correctGive', 'for', 'i', 'in', 'range', 'n', 'correct', 'random', 'randint', 'i', 'n', 'if', 'correct', 'i', 'correctGive', 'append', 'correct', 'return', 'correctGive', 'print', 'hats']","['import', 'random', 'def', 'hat', 'n', 'correctg', 'for', 'i', 'in', 'rang', 'n', 'correct', 'random', 'randint', 'i', 'n', 'if', 'correct', 'i', 'correctg', 'append', 'correct', 'return', 'correctg', 'print', 'hat']","['import', 'random', 'def', 'hat', 'n', 'correctg', 'rang', 'n', 'correct', 'random', 'randint', 'n', 'correct', 'correctg', 'append', 'correct', 'return', 'correctg', 'print', 'hat']",import random def hat n correctg rang n correct random randint n correct correctg append correct return correctg print hat,randomizationtechniques,CS,CS110
96430,"Tried the code, it gives me close to  most of the time. Not sure why. But my guss is this should look like a logrism function? As more people, it is less likely to be correct, so # of correct increase slower.
[code]
import numpy as np
import matplotlib.pyplot as plt
import random
correct_lis = []
for i in range():
    num_of_p = *i
    hats = random.sample([x for x in range(num_of_p)], num_of_p)
    correct = 
    for j in range(num_of_p):
        the_hat = hats.pop()
        if the_hat == j:
            correct += 
    correct_lis.append(correct)
plt.plot(correct_lis)
plt.show()",#randomization,2,2665,"['Tried', 'the', 'code', 'it', 'gives', 'me', 'close', 'to', 'most', 'of', 'the', 'time', 'Not', 'sure', 'why', 'But', 'my', 'guss', 'is', 'this', 'should', 'look', 'like', 'a', 'logrism', 'function', 'As', 'more', 'people', 'it', 'is', 'less', 'likely', 'to', 'be', 'correct', 'so', 'of', 'correct', 'increase', 'slower', 'code', 'import', 'numpy', 'as', 'np', 'import', 'matplotlib', 'pyplot', 'as', 'plt', 'import', 'random', 'correct_lis', 'for', 'i', 'in', 'range', 'num_of_p', 'i', 'hats', 'random', 'sample', 'x', 'for', 'x', 'in', 'range', 'num_of_p', 'num_of_p', 'correct', 'for', 'j', 'in', 'range', 'num_of_p', 'the_hat', 'hats', 'pop', 'if', 'the_hat', 'j', 'correct', 'correct_lis', 'append', 'correct', 'plt', 'plot', 'correct_lis', 'plt', 'show']","['tri', 'the', 'code', 'it', 'give', 'me', 'close', 'to', 'most', 'of', 'the', 'time', 'not', 'sure', 'whi', 'but', 'my', 'guss', 'is', 'this', 'should', 'look', 'like', 'a', 'logrism', 'function', 'as', 'more', 'peopl', 'it', 'is', 'less', 'like', 'to', 'be', 'correct', 'so', 'of', 'correct', 'increas', 'slower', 'code', 'import', 'numpi', 'as', 'np', 'import', 'matplotlib', 'pyplot', 'as', 'plt', 'import', 'random', 'correct_li', 'for', 'i', 'in', 'rang', 'num_of_p', 'i', 'hat', 'random', 'sampl', 'x', 'for', 'x', 'in', 'rang', 'num_of_p', 'num_of_p', 'correct', 'for', 'j', 'in', 'rang', 'num_of_p', 'the_hat', 'hat', 'pop', 'if', 'the_hat', 'j', 'correct', 'correct_li', 'append', 'correct', 'plt', 'plot', 'correct_li', 'plt', 'show']","['tri', 'code', 'give', 'close', 'time', 'sure', 'whi', 'guss', 'look', 'like', 'logrism', 'function', 'peopl', 'less', 'like', 'correct', 'correct', 'increas', 'slower', 'code', 'import', 'numpi', 'np', 'import', 'matplotlib', 'pyplot', 'plt', 'import', 'random', 'correct_li', 'rang', 'num_of_p', 'hat', 'random', 'sampl', 'x', 'x', 'rang', 'num_of_p', 'num_of_p', 'correct', 'j', 'rang', 'num_of_p', 'the_hat', 'hat', 'pop', 'the_hat', 'j', 'correct', 'correct_li', 'append', 'correct', 'plt', 'plot', 'correct_li', 'plt', 'show']",tri code give close time sure whi guss look like logrism function peopl less like correct correct increas slower code import numpi np import matplotlib pyplot plt import random correct_li rang num_of_p hat random sampl x x rang num_of_p num_of_p correct j rang num_of_p the_hat hat pop the_hat j correct correct_li append correct plt plot correct_li plt show,randomizationtechniques,CS,CS110
96434,"def approx_median(sigma, x, thresholdlimit):
    x = sorted(x)
    length = len(x)
    check = True
    threshold = 
    while check == True:
        sample = random.choice(range(length))
        threshold += 
        if sample >= (length/)-sigma*length and sample <= (length/)+sigma*length:
            check = False
            return x[sample]
        if threshold >= thresholdlimit:
            return False
approx_median(., [,,,,,,,], )",#randomization,2,2667,"['def', 'approx_median', 'sigma', 'x', 'thresholdlimit', 'x', 'sorted', 'x', 'length', 'len', 'x', 'check', 'True', 'threshold', 'while', 'check', 'True', 'sample', 'random', 'choice', 'range', 'length', 'threshold', 'if', 'sample', 'length', 'sigma', 'length', 'and', 'sample', 'length', 'sigma', 'length', 'check', 'False', 'return', 'x', 'sample', 'if', 'threshold', 'thresholdlimit', 'return', 'False', 'approx_median']","['def', 'approx_median', 'sigma', 'x', 'thresholdlimit', 'x', 'sort', 'x', 'length', 'len', 'x', 'check', 'true', 'threshold', 'while', 'check', 'true', 'sampl', 'random', 'choic', 'rang', 'length', 'threshold', 'if', 'sampl', 'length', 'sigma', 'length', 'and', 'sampl', 'length', 'sigma', 'length', 'check', 'fals', 'return', 'x', 'sampl', 'if', 'threshold', 'thresholdlimit', 'return', 'fals', 'approx_median']","['def', 'approx_median', 'sigma', 'x', 'thresholdlimit', 'x', 'sort', 'x', 'length', 'len', 'x', 'check', 'true', 'threshold', 'check', 'true', 'sampl', 'random', 'choic', 'rang', 'length', 'threshold', 'sampl', 'length', 'sigma', 'length', 'sampl', 'length', 'sigma', 'length', 'check', 'fals', 'return', 'x', 'sampl', 'threshold', 'thresholdlimit', 'return', 'fals', 'approx_median']",def approx_median sigma x thresholdlimit x sort x length len x check true threshold check true sampl random choic rang length threshold sampl length sigma length sampl length sigma length check fals return x sampl threshold thresholdlimit return fals approx_median,randomizationtechniques,CS,CS110
96434,"def approximate_median_finder(sigma, a, threshold_limit):
    a = sorted(a)
    length = len(a)
    checker = True
    threshold = 
    while checker == True:
        sample = random.choice(range(length))
        threshold+=
        if sample <= length/+sigma*length and sample >= length/-sigma*length:
            checker = False
            return a[sample]
        if threshold>=threshold_limit:
            return False",#randomization,2,2667,"['def', 'approximate_median_finder', 'sigma', 'a', 'threshold_limit', 'a', 'sorted', 'a', 'length', 'len', 'a', 'checker', 'True', 'threshold', 'while', 'checker', 'True', 'sample', 'random', 'choice', 'range', 'length', 'threshold', 'if', 'sample', 'length', 'sigma', 'length', 'and', 'sample', 'length', 'sigma', 'length', 'checker', 'False', 'return', 'a', 'sample', 'if', 'threshold', 'threshold_limit', 'return', 'False']","['def', 'approximate_median_find', 'sigma', 'a', 'threshold_limit', 'a', 'sort', 'a', 'length', 'len', 'a', 'checker', 'true', 'threshold', 'while', 'checker', 'true', 'sampl', 'random', 'choic', 'rang', 'length', 'threshold', 'if', 'sampl', 'length', 'sigma', 'length', 'and', 'sampl', 'length', 'sigma', 'length', 'checker', 'fals', 'return', 'a', 'sampl', 'if', 'threshold', 'threshold_limit', 'return', 'fals']","['def', 'approximate_median_find', 'sigma', 'threshold_limit', 'sort', 'length', 'len', 'checker', 'true', 'threshold', 'checker', 'true', 'sampl', 'random', 'choic', 'rang', 'length', 'threshold', 'sampl', 'length', 'sigma', 'length', 'sampl', 'length', 'sigma', 'length', 'checker', 'fals', 'return', 'sampl', 'threshold', 'threshold_limit', 'return', 'fals']",def approximate_median_find sigma threshold_limit sort length len checker true threshold checker true sampl random choic rang length threshold sampl length sigma length sampl length sigma length checker fals return sampl threshold threshold_limit return fals,randomizationtechniques,CS,CS110
96434,"#Approximate median finder
import numpy as np
import random
def approxiamate_median_finder(arr, delta):
    a = np.array(arr)
    found = False
    retries = 
    while not found and retries <= :
        choosen = random.choice(a)
        percentile_range = [np.percentile(a,-(delta/)),np.percentile(a,+(delta/))]
        if percentile_range[] < choosen < percentile_range[]:
            found = True
        retries += 
    if found == True:
        return choosen
    else:
        return ""Not found""

arr = [, , , , , ]
delta = .
print approxiamate_median_finder",#randomization,2,2667,"['Approximate', 'median', 'finder', 'import', 'numpy', 'as', 'np', 'import', 'random', 'def', 'approxiamate_median_finder', 'arr', 'delta', 'a', 'np', 'array', 'arr', 'found', 'False', 'retries', 'while', 'not', 'found', 'and', 'retries', 'choosen', 'random', 'choice', 'a', 'percentile_range', 'np', 'percentile', 'a', 'delta', 'np', 'percentile', 'a', 'delta', 'if', 'percentile_range', 'choosen', 'percentile_range', 'found', 'True', 'retries', 'if', 'found', 'True', 'return', 'choosen', 'else', 'return', 'Not', 'found', 'arr', 'delta', 'print', 'approxiamate_median_finder']","['approxim', 'median', 'finder', 'import', 'numpi', 'as', 'np', 'import', 'random', 'def', 'approxiamate_median_find', 'arr', 'delta', 'a', 'np', 'array', 'arr', 'found', 'fals', 'retri', 'while', 'not', 'found', 'and', 'retri', 'choosen', 'random', 'choic', 'a', 'percentile_rang', 'np', 'percentil', 'a', 'delta', 'np', 'percentil', 'a', 'delta', 'if', 'percentile_rang', 'choosen', 'percentile_rang', 'found', 'true', 'retri', 'if', 'found', 'true', 'return', 'choosen', 'els', 'return', 'not', 'found', 'arr', 'delta', 'print', 'approxiamate_median_find']","['approxim', 'median', 'finder', 'import', 'numpi', 'np', 'import', 'random', 'def', 'approxiamate_median_find', 'arr', 'delta', 'np', 'array', 'arr', 'found', 'fals', 'retri', 'found', 'retri', 'choosen', 'random', 'choic', 'percentile_rang', 'np', 'percentil', 'delta', 'np', 'percentil', 'delta', 'percentile_rang', 'choosen', 'percentile_rang', 'found', 'true', 'retri', 'found', 'true', 'return', 'choosen', 'els', 'return', 'found', 'arr', 'delta', 'print', 'approxiamate_median_find']",approxim median finder import numpi np import random def approxiamate_median_find arr delta np array arr found fals retri found retri choosen random choic percentile_rang np percentil delta np percentil delta percentile_rang choosen percentile_rang found true retri found true return choosen els return found arr delta print approxiamate_median_find,randomizationtechniques,CS,CS110
96434,"import statistics
import random

n = random.sample(range(), )
statistics.median(n)

steps = 
isTrue = True
while isTrue == True:
    steps += 
    print(steps)
    if(n[random.randint(,(len(n)-))] == statistics.median(n) ):
        print(""It took "", steps, "" steps"")
        isTrue = False",#randomization,2,2667,"['import', 'statistics', 'import', 'random', 'n', 'random', 'sample', 'range', 'statistics', 'median', 'n', 'steps', 'isTrue', 'True', 'while', 'isTrue', 'True', 'steps', 'print', 'steps', 'if', 'n', 'random', 'randint', 'len', 'n', 'statistics', 'median', 'n', 'print', 'It', 'took', 'steps', 'steps', 'isTrue', 'False']","['import', 'statist', 'import', 'random', 'n', 'random', 'sampl', 'rang', 'statist', 'median', 'n', 'step', 'istru', 'true', 'while', 'istru', 'true', 'step', 'print', 'step', 'if', 'n', 'random', 'randint', 'len', 'n', 'statist', 'median', 'n', 'print', 'it', 'took', 'step', 'step', 'istru', 'fals']","['import', 'statist', 'import', 'random', 'n', 'random', 'sampl', 'rang', 'statist', 'median', 'n', 'step', 'istru', 'true', 'istru', 'true', 'step', 'print', 'step', 'n', 'random', 'randint', 'len', 'n', 'statist', 'median', 'n', 'print', 'took', 'step', 'step', 'istru', 'fals']",import statist import random n random sampl rang statist median n step istru true istru true step print step n random randint len n statist median n print took step step istru fals,randomizationtechniques,CS,CS110
96434,"import random

delta = int(raw_input(""value of delta:""))

def median_finder(a,b):
    valu = random.choice(a)
    num_smaller = 
    for i in range(len(a)):
        if valu >= a[i]:
            num_smaller += 
    percentile = float(num_smaller) / float(len(a))
    print percentile
    if percentile > . - .*b and percentile < . + .*b:
        return True
    else:
        return False

def mul_med_finder(a,b,c):
    i = 
    result = median_finder(a,b)
    while result == False and i < c:
        result = median_finder(a,b)
        i+=
    return i",#randomization,4,2667,"['import', 'random', 'delta', 'int', 'raw_input', 'value', 'of', 'delta', 'def', 'median_finder', 'a', 'b', 'valu', 'random', 'choice', 'a', 'num_smaller', 'for', 'i', 'in', 'range', 'len', 'a', 'if', 'valu', 'a', 'i', 'num_smaller', 'percentile', 'float', 'num_smaller', 'float', 'len', 'a', 'print', 'percentile', 'if', 'percentile', 'b', 'and', 'percentile', 'b', 'return', 'True', 'else', 'return', 'False', 'def', 'mul_med_finder', 'a', 'b', 'c', 'i', 'result', 'median_finder', 'a', 'b', 'while', 'result', 'False', 'and', 'i', 'c', 'result', 'median_finder', 'a', 'b', 'i', 'return', 'i']","['import', 'random', 'delta', 'int', 'raw_input', 'valu', 'of', 'delta', 'def', 'median_find', 'a', 'b', 'valu', 'random', 'choic', 'a', 'num_smal', 'for', 'i', 'in', 'rang', 'len', 'a', 'if', 'valu', 'a', 'i', 'num_smal', 'percentil', 'float', 'num_smal', 'float', 'len', 'a', 'print', 'percentil', 'if', 'percentil', 'b', 'and', 'percentil', 'b', 'return', 'true', 'els', 'return', 'fals', 'def', 'mul_med_find', 'a', 'b', 'c', 'i', 'result', 'median_find', 'a', 'b', 'while', 'result', 'fals', 'and', 'i', 'c', 'result', 'median_find', 'a', 'b', 'i', 'return', 'i']","['import', 'random', 'delta', 'int', 'raw_input', 'valu', 'delta', 'def', 'median_find', 'b', 'valu', 'random', 'choic', 'num_smal', 'rang', 'len', 'valu', 'num_smal', 'percentil', 'float', 'num_smal', 'float', 'len', 'print', 'percentil', 'percentil', 'b', 'percentil', 'b', 'return', 'true', 'els', 'return', 'fals', 'def', 'mul_med_find', 'b', 'c', 'result', 'median_find', 'b', 'result', 'fals', 'c', 'result', 'median_find', 'b', 'return']",import random delta int raw_input valu delta def median_find b valu random choic num_smal rang len valu num_smal percentil float num_smal float len print percentil percentil b percentil b return true els return fals def mul_med_find b c result median_find b result fals c result median_find b return,randomizationtechniques,CS,CS110
96443,"import random
import time

list = [random.randrange() for i in range()]

start_time = time.time()

while True:
    random.shuffle(list)
    sorted = True
    for i in range (, len(list)):
        if list[i-] > list[i]:
            sorted = False
    if sorted == True:
        break

end_time = time.time()

print list
print ""Time consumed:"", end_time - start_time",#randomization,1,2670,"['import', 'random', 'import', 'time', 'list', 'random', 'randrange', 'for', 'i', 'in', 'range', 'start_time', 'time', 'time', 'while', 'True', 'random', 'shuffle', 'list', 'sorted', 'True', 'for', 'i', 'in', 'range', 'len', 'list', 'if', 'list', 'i', 'list', 'i', 'sorted', 'False', 'if', 'sorted', 'True', 'break', 'end_time', 'time', 'time', 'print', 'list', 'print', 'Time', 'consumed', 'end_time', 'start_time']","['import', 'random', 'import', 'time', 'list', 'random', 'randrang', 'for', 'i', 'in', 'rang', 'start_tim', 'time', 'time', 'while', 'true', 'random', 'shuffl', 'list', 'sort', 'true', 'for', 'i', 'in', 'rang', 'len', 'list', 'if', 'list', 'i', 'list', 'i', 'sort', 'fals', 'if', 'sort', 'true', 'break', 'end_tim', 'time', 'time', 'print', 'list', 'print', 'time', 'consum', 'end_tim', 'start_tim']","['import', 'random', 'import', 'time', 'list', 'random', 'randrang', 'rang', 'start_tim', 'time', 'time', 'true', 'random', 'shuffl', 'list', 'sort', 'true', 'rang', 'len', 'list', 'list', 'list', 'sort', 'fals', 'sort', 'true', 'break', 'end_tim', 'time', 'time', 'print', 'list', 'print', 'time', 'consum', 'end_tim', 'start_tim']",import random import time list random randrang rang start_tim time time true random shuffl list sort true rang len list list list sort fals sort true break end_tim time time print list print time consum end_tim start_tim,randomizationtechniques,CS,CS110
96443,"def finder(lis, sigma):
    lis = sorted(lis)
    med = len(lis)/
    element = 
    count = 
    percents = 
    while True:
        count +=
        if count == :
            return ""The procedure failed""
        index = random.randint(, len(lis)-)
        if index <= med + (sigma/./percents * len(lis)) and index >= med - (sigma/./percents * len(lis)):
            return lis[index]
        else:
            continue",#randomization,2,2670,"['def', 'finder', 'lis', 'sigma', 'lis', 'sorted', 'lis', 'med', 'len', 'lis', 'element', 'count', 'percents', 'while', 'True', 'count', 'if', 'count', 'return', 'The', 'procedure', 'failed', 'index', 'random', 'randint', 'len', 'lis', 'if', 'index', 'med', 'sigma', 'percents', 'len', 'lis', 'and', 'index', 'med', 'sigma', 'percents', 'len', 'lis', 'return', 'lis', 'index', 'else', 'continue']","['def', 'finder', 'lis', 'sigma', 'lis', 'sort', 'lis', 'med', 'len', 'lis', 'element', 'count', 'percent', 'while', 'true', 'count', 'if', 'count', 'return', 'the', 'procedur', 'fail', 'index', 'random', 'randint', 'len', 'lis', 'if', 'index', 'med', 'sigma', 'percent', 'len', 'lis', 'and', 'index', 'med', 'sigma', 'percent', 'len', 'lis', 'return', 'lis', 'index', 'els', 'continu']","['def', 'finder', 'lis', 'sigma', 'lis', 'sort', 'lis', 'med', 'len', 'lis', 'element', 'count', 'percent', 'true', 'count', 'count', 'return', 'procedur', 'fail', 'index', 'random', 'randint', 'len', 'lis', 'index', 'med', 'sigma', 'percent', 'len', 'lis', 'index', 'med', 'sigma', 'percent', 'len', 'lis', 'return', 'lis', 'index', 'els', 'continu']",def finder lis sigma lis sort lis med len lis element count percent true count count return procedur fail index random randint len lis index med sigma percent len lis index med sigma percent len lis return lis index els continu,randomizationtechniques,CS,CS110
96443,"def finder(array, sigma):
    array = sorted(array)
    median = len(array)/
    element = 
    counter = 
    while True:
        counter +=
        if counter == :
            return ""The procedure did not worked""
        element = random.choice(array)
        if array.index(element) <= median + (sigma/. * len(array)) and array.index(element) >= median - (sigma/. * len(array)):
            return element
        else:
            continue",#randomization,2,2670,"['def', 'finder', 'array', 'sigma', 'array', 'sorted', 'array', 'median', 'len', 'array', 'element', 'counter', 'while', 'True', 'counter', 'if', 'counter', 'return', 'The', 'procedure', 'did', 'not', 'worked', 'element', 'random', 'choice', 'array', 'if', 'array', 'index', 'element', 'median', 'sigma', 'len', 'array', 'and', 'array', 'index', 'element', 'median', 'sigma', 'len', 'array', 'return', 'element', 'else', 'continue']","['def', 'finder', 'array', 'sigma', 'array', 'sort', 'array', 'median', 'len', 'array', 'element', 'counter', 'while', 'true', 'counter', 'if', 'counter', 'return', 'the', 'procedur', 'did', 'not', 'work', 'element', 'random', 'choic', 'array', 'if', 'array', 'index', 'element', 'median', 'sigma', 'len', 'array', 'and', 'array', 'index', 'element', 'median', 'sigma', 'len', 'array', 'return', 'element', 'els', 'continu']","['def', 'finder', 'array', 'sigma', 'array', 'sort', 'array', 'median', 'len', 'array', 'element', 'counter', 'true', 'counter', 'counter', 'return', 'procedur', 'work', 'element', 'random', 'choic', 'array', 'array', 'index', 'element', 'median', 'sigma', 'len', 'array', 'array', 'index', 'element', 'median', 'sigma', 'len', 'array', 'return', 'element', 'els', 'continu']",def finder array sigma array sort array median len array element counter true counter counter return procedur work element random choic array array index element median sigma len array array index element median sigma len array return element els continu,randomizationtechniques,CS,CS110
96443,"def medianfinder_userinput(arr):
    delta = input('Input a delta between  and .: ')
    upperbound = (len(arr)/) + delta/ #find the upper bound of the median 
    lowerbound = (len(arr)/) - delta/ #find the lower bound of the median 
    selected = random.choice(arr)
    while True: 
        if arr.index(selected) < upperbound and arr.index(selected) > lowerbound:
            return selected 
        else: 
            tryornot = raw_input(""Retry? Y = yes, N = no: "") 
            if tryornot == ""Y"":
                selected = random.choice(arr)
            else:
                break",#randomization,2,2670,"['def', 'medianfinder_userinput', 'arr', 'delta', 'input', ""'Input"", 'a', 'delta', 'between', 'and', ""'"", 'upperbound', 'len', 'arr', 'delta', 'find', 'the', 'upper', 'bound', 'of', 'the', 'median', 'lowerbound', 'len', 'arr', 'delta', 'find', 'the', 'lower', 'bound', 'of', 'the', 'median', 'selected', 'random', 'choice', 'arr', 'while', 'True', 'if', 'arr', 'index', 'selected', 'upperbound', 'and', 'arr', 'index', 'selected', 'lowerbound', 'return', 'selected', 'else', 'tryornot', 'raw_input', 'Retry', 'Y', 'yes', 'N', 'no', 'if', 'tryornot', 'Y', 'selected', 'random', 'choice', 'arr', 'else', 'break']","['def', 'medianfinder_userinput', 'arr', 'delta', 'input', 'input', 'a', 'delta', 'between', 'and', ""'"", 'upperbound', 'len', 'arr', 'delta', 'find', 'the', 'upper', 'bound', 'of', 'the', 'median', 'lowerbound', 'len', 'arr', 'delta', 'find', 'the', 'lower', 'bound', 'of', 'the', 'median', 'select', 'random', 'choic', 'arr', 'while', 'true', 'if', 'arr', 'index', 'select', 'upperbound', 'and', 'arr', 'index', 'select', 'lowerbound', 'return', 'select', 'els', 'tryornot', 'raw_input', 'retri', 'y', 'yes', 'n', 'no', 'if', 'tryornot', 'y', 'select', 'random', 'choic', 'arr', 'els', 'break']","['def', 'medianfinder_userinput', 'arr', 'delta', 'input', 'input', 'delta', ""'"", 'upperbound', 'len', 'arr', 'delta', 'find', 'upper', 'bound', 'median', 'lowerbound', 'len', 'arr', 'delta', 'find', 'lower', 'bound', 'median', 'select', 'random', 'choic', 'arr', 'true', 'arr', 'index', 'select', 'upperbound', 'arr', 'index', 'select', 'lowerbound', 'return', 'select', 'els', 'tryornot', 'raw_input', 'retri', 'yes', 'n', 'tryornot', 'select', 'random', 'choic', 'arr', 'els', 'break']",def medianfinder_userinput arr delta input input delta ' upperbound len arr delta find upper bound median lowerbound len arr delta find lower bound median select random choic arr true arr index select upperbound arr index select lowerbound return select els tryornot raw_input retri yes n tryornot select random choic arr els break,randomizationtechniques,CS,CS110
96443,"def approx_mean_finder(l, delta, threshold):
	n = len(l)
	sorted_list = sorted(l)
	b = np.ceiling(n*(.-d/))
	b = np.floor(n*(.+d/))
	a = sorted_list[b:b+] #O(n)

	median_check = False
	i = 

	while (!median_check) and (i < threshold):
		x = np.choice(l)
		if x in a:
			median_check = True
			return x
		i += 

	if i == threshold:
		print(‘Program has failed to find the median’)",#randomization,2,2670,"['def', 'approx_mean_finder', 'l', 'delta', 'threshold', 'n', 'len', 'l', 'sorted_list', 'sorted', 'l', 'b', 'np', 'ceiling', 'n', 'd', 'b', 'np', 'floor', 'n', 'd', 'a', 'sorted_list', 'b', 'b', 'O', 'n', 'median_check', 'False', 'i', 'while', 'median_check', 'and', 'i', 'threshold', 'x', 'np', 'choice', 'l', 'if', 'x', 'in', 'a', 'median_check', 'True', 'return', 'x', 'i', 'if', 'i', 'threshold', 'print', 'Program', 'has', 'failed', 'to', 'find', 'the', 'median']","['def', 'approx_mean_find', 'l', 'delta', 'threshold', 'n', 'len', 'l', 'sorted_list', 'sort', 'l', 'b', 'np', 'ceil', 'n', 'd', 'b', 'np', 'floor', 'n', 'd', 'a', 'sorted_list', 'b', 'b', 'o', 'n', 'median_check', 'fals', 'i', 'while', 'median_check', 'and', 'i', 'threshold', 'x', 'np', 'choic', 'l', 'if', 'x', 'in', 'a', 'median_check', 'true', 'return', 'x', 'i', 'if', 'i', 'threshold', 'print', 'program', 'has', 'fail', 'to', 'find', 'the', 'median']","['def', 'approx_mean_find', 'l', 'delta', 'threshold', 'n', 'len', 'l', 'sorted_list', 'sort', 'l', 'b', 'np', 'ceil', 'n', 'b', 'np', 'floor', 'n', 'sorted_list', 'b', 'b', 'n', 'median_check', 'fals', 'median_check', 'threshold', 'x', 'np', 'choic', 'l', 'x', 'median_check', 'true', 'return', 'x', 'threshold', 'print', 'program', 'fail', 'find', 'median']",def approx_mean_find l delta threshold n len l sorted_list sort l b np ceil n b np floor n sorted_list b b n median_check fals median_check threshold x np choic l x median_check true return x threshold print program fail find median,randomizationtechniques,CS,CS110
96443,"import math
from random import randrange

def median_finder(a_sorted_list, des_median = ):
    length = len(a_sorted_list)
    lower_bound = int(math.ceil(length * (. + float(des_median))))
    upper_bound = int(length * (. + float(des_median)))
    test = False
    counter = 
    threshold = 
    tries = 

    app_median_values = a_sorted_list[lower_bound:upper_bound+]

    while test == False and counter <= threshold:
        counter = counter + 
        tries = tries + 
        random_digit = randrange(,len(a_sorted_list))
        for i in xrange(len(app_median_values)):",#randomization,2,2670,"['import', 'math', 'from', 'random', 'import', 'randrange', 'def', 'median_finder', 'a_sorted_list', 'des_median', 'length', 'len', 'a_sorted_list', 'lower_bound', 'int', 'math', 'ceil', 'length', 'float', 'des_median', 'upper_bound', 'int', 'length', 'float', 'des_median', 'test', 'False', 'counter', 'threshold', 'tries', 'app_median_values', 'a_sorted_list', 'lower_bound', 'upper_bound', 'while', 'test', 'False', 'and', 'counter', 'threshold', 'counter', 'counter', 'tries', 'tries', 'random_digit', 'randrange', 'len', 'a_sorted_list', 'for', 'i', 'in', 'xrange', 'len', 'app_median_values']","['import', 'math', 'from', 'random', 'import', 'randrang', 'def', 'median_find', 'a_sorted_list', 'des_median', 'length', 'len', 'a_sorted_list', 'lower_bound', 'int', 'math', 'ceil', 'length', 'float', 'des_median', 'upper_bound', 'int', 'length', 'float', 'des_median', 'test', 'fals', 'counter', 'threshold', 'tri', 'app_median_valu', 'a_sorted_list', 'lower_bound', 'upper_bound', 'while', 'test', 'fals', 'and', 'counter', 'threshold', 'counter', 'counter', 'tri', 'tri', 'random_digit', 'randrang', 'len', 'a_sorted_list', 'for', 'i', 'in', 'xrang', 'len', 'app_median_valu']","['import', 'math', 'random', 'import', 'randrang', 'def', 'median_find', 'a_sorted_list', 'des_median', 'length', 'len', 'a_sorted_list', 'lower_bound', 'int', 'math', 'ceil', 'length', 'float', 'des_median', 'upper_bound', 'int', 'length', 'float', 'des_median', 'test', 'fals', 'counter', 'threshold', 'tri', 'app_median_valu', 'a_sorted_list', 'lower_bound', 'upper_bound', 'test', 'fals', 'counter', 'threshold', 'counter', 'counter', 'tri', 'tri', 'random_digit', 'randrang', 'len', 'a_sorted_list', 'xrang', 'len', 'app_median_valu']",import math random import randrang def median_find a_sorted_list des_median length len a_sorted_list lower_bound int math ceil length float des_median upper_bound int length float des_median test fals counter threshold tri app_median_valu a_sorted_list lower_bound upper_bound test fals counter threshold counter counter tri tri random_digit randrang len a_sorted_list xrang len app_median_valu,randomizationtechniques,CS,CS110
96443,"def medFinder(list,n):
    sortedList=sorted(list)
    mid=sortedList[len(list)//]
    lBound=int(((-n)/)*len(list))
    uBound=int(((+n)/)*len(list))
    bounds=range(sortedList[lBound],sortedList[uBound])
    medianPos=[]
    for i in list:
        if (i in bounds) == True:
            medianPos.append(i)
    return medianPos
test=medFinder([,,,,,,,,,,,],)
print(test)",#randomization,2,2670,"['def', 'medFinder', 'list', 'n', 'sortedList', 'sorted', 'list', 'mid', 'sortedList', 'len', 'list', 'lBound', 'int', 'n', 'len', 'list', 'uBound', 'int', 'n', 'len', 'list', 'bounds', 'range', 'sortedList', 'lBound', 'sortedList', 'uBound', 'medianPos', 'for', 'i', 'in', 'list', 'if', 'i', 'in', 'bounds', 'True', 'medianPos', 'append', 'i', 'return', 'medianPos', 'test', 'medFinder', 'print', 'test']","['def', 'medfind', 'list', 'n', 'sortedlist', 'sort', 'list', 'mid', 'sortedlist', 'len', 'list', 'lbound', 'int', 'n', 'len', 'list', 'ubound', 'int', 'n', 'len', 'list', 'bound', 'rang', 'sortedlist', 'lbound', 'sortedlist', 'ubound', 'medianpo', 'for', 'i', 'in', 'list', 'if', 'i', 'in', 'bound', 'true', 'medianpo', 'append', 'i', 'return', 'medianpo', 'test', 'medfind', 'print', 'test']","['def', 'medfind', 'list', 'n', 'sortedlist', 'sort', 'list', 'mid', 'sortedlist', 'len', 'list', 'lbound', 'int', 'n', 'len', 'list', 'ubound', 'int', 'n', 'len', 'list', 'bound', 'rang', 'sortedlist', 'lbound', 'sortedlist', 'ubound', 'medianpo', 'list', 'bound', 'true', 'medianpo', 'append', 'return', 'medianpo', 'test', 'medfind', 'print', 'test']",def medfind list n sortedlist sort list mid sortedlist len list lbound int n len list ubound int n len list bound rang sortedlist lbound sortedlist ubound medianpo list bound true medianpo append return medianpo test medfind print test,randomizationtechniques,CS,CS110
143089,"So the best case complexity is O(n). It happens when the array is already sorted, but we still perform the check for each one. It is so because in best case each permutation of the element happens (or doesn't happen) to put the elements in the increasing order so the statement we are executing (order == TRUE) is incremented by the constant amount, which is the number of elements in the array. However, this will happen very rarely, which makes it the worst algorithm in the world.",#randomization,3,7111,"['So', 'the', 'best', 'case', 'complexity', 'is', 'O', 'n', 'It', 'happens', 'when', 'the', 'array', 'is', 'already', 'sorted', 'but', 'we', 'still', 'perform', 'the', 'check', 'for', 'each', 'one', 'It', 'is', 'so', 'because', 'in', 'best', 'case', 'each', 'permutation', 'of', 'the', 'element', 'happens', 'or', ""doesn't"", 'happen', 'to', 'put', 'the', 'elements', 'in', 'the', 'increasing', 'order', 'so', 'the', 'statement', 'we', 'are', 'executing', 'order', 'TRUE', 'is', 'incremented', 'by', 'the', 'constant', 'amount', 'which', 'is', 'the', 'number', 'of', 'elements', 'in', 'the', 'array', 'However', 'this', 'will', 'happen', 'very', 'rarely', 'which', 'makes', 'it', 'the', 'worst', 'algorithm', 'in', 'the', 'world']","['so', 'the', 'best', 'case', 'complex', 'is', 'o', 'n', 'it', 'happen', 'when', 'the', 'array', 'is', 'alreadi', 'sort', 'but', 'we', 'still', 'perform', 'the', 'check', 'for', 'each', 'one', 'it', 'is', 'so', 'becaus', 'in', 'best', 'case', 'each', 'permut', 'of', 'the', 'element', 'happen', 'or', ""doesn't"", 'happen', 'to', 'put', 'the', 'element', 'in', 'the', 'increas', 'order', 'so', 'the', 'statement', 'we', 'are', 'execut', 'order', 'true', 'is', 'increment', 'by', 'the', 'constant', 'amount', 'which', 'is', 'the', 'number', 'of', 'element', 'in', 'the', 'array', 'howev', 'this', 'will', 'happen', 'veri', 'rare', 'which', 'make', 'it', 'the', 'worst', 'algorithm', 'in', 'the', 'world']","['best', 'case', 'complex', 'n', 'happen', 'array', 'alreadi', 'sort', 'still', 'perform', 'check', 'one', 'becaus', 'best', 'case', 'permut', 'element', 'happen', 'happen', 'put', 'element', 'increas', 'order', 'statement', 'execut', 'order', 'true', 'increment', 'constant', 'amount', 'number', 'element', 'array', 'howev', 'happen', 'veri', 'rare', 'make', 'worst', 'algorithm', 'world']",best case complex n happen array alreadi sort still perform check one becaus best case permut element happen happen put element increas order statement execut order true increment constant amount number element array howev happen veri rare make worst algorithm world,randomizationtechniques,CS,CS110
289885,"We need randomization to destroy our computers until we accidentally sort an array. Just kidding, the array will never sort itself. In all seriousness, randomization is useful in problems like the median delta problem or the worst sorting algorithm because it allows us run algorithms with a big range of probabilities and expect an average complexity that is not too bad. For example, the median delta problem has a worst case scenario complexity of O(N*(-alpha))==O(N) but it is actually better off than sorting the array and finding the median.",#randomization,3,13495,"['We', 'need', 'randomization', 'to', 'destroy', 'our', 'computers', 'until', 'we', 'accidentally', 'sort', 'an', 'array', 'Just', 'kidding', 'the', 'array', 'will', 'never', 'sort', 'itself', 'In', 'all', 'seriousness', 'randomization', 'is', 'useful', 'in', 'problems', 'like', 'the', 'median', 'delta', 'problem', 'or', 'the', 'worst', 'sorting', 'algorithm', 'because', 'it', 'allows', 'us', 'run', 'algorithms', 'with', 'a', 'big', 'range', 'of', 'probabilities', 'and', 'expect', 'an', 'average', 'complexity', 'that', 'is', 'not', 'too', 'bad', 'For', 'example', 'the', 'median', 'delta', 'problem', 'has', 'a', 'worst', 'case', 'scenario', 'complexity', 'of', 'O', 'N', 'alpha', 'O', 'N', 'but', 'it', 'is', 'actually', 'better', 'off', 'than', 'sorting', 'the', 'array', 'and', 'finding', 'the', 'median']","['we', 'need', 'random', 'to', 'destroy', 'our', 'comput', 'until', 'we', 'accident', 'sort', 'an', 'array', 'just', 'kid', 'the', 'array', 'will', 'never', 'sort', 'itself', 'in', 'all', 'serious', 'random', 'is', 'use', 'in', 'problem', 'like', 'the', 'median', 'delta', 'problem', 'or', 'the', 'worst', 'sort', 'algorithm', 'becaus', 'it', 'allow', 'us', 'run', 'algorithm', 'with', 'a', 'big', 'rang', 'of', 'probabl', 'and', 'expect', 'an', 'averag', 'complex', 'that', 'is', 'not', 'too', 'bad', 'for', 'exampl', 'the', 'median', 'delta', 'problem', 'has', 'a', 'worst', 'case', 'scenario', 'complex', 'of', 'o', 'n', 'alpha', 'o', 'n', 'but', 'it', 'is', 'actual', 'better', 'off', 'than', 'sort', 'the', 'array', 'and', 'find', 'the', 'median']","['need', 'random', 'destroy', 'comput', 'accident', 'sort', 'array', 'kid', 'array', 'never', 'sort', 'serious', 'random', 'problem', 'like', 'median', 'delta', 'problem', 'worst', 'sort', 'algorithm', 'becaus', 'allow', 'us', 'run', 'algorithm', 'big', 'rang', 'probabl', 'expect', 'averag', 'complex', 'bad', 'exampl', 'median', 'delta', 'problem', 'worst', 'case', 'scenario', 'complex', 'n', 'alpha', 'n', 'actual', 'better', 'sort', 'array', 'find', 'median']",need random destroy comput accident sort array kid array never sort serious random problem like median delta problem worst sort algorithm becaus allow us run algorithm big rang probabl expect averag complex bad exampl median delta problem worst case scenario complex n alpha n actual better sort array find median,randomizationtechniques,CS,CS110
100620,"trace is sum of the eigen values, lambda + lambda = , and determinant (A) =  = lambda * lambda  ==> the eigens values are  and ",#linalgtheory,3,3267,"['trace', 'is', 'sum', 'of', 'the', 'eigen', 'values', 'lambda', 'lambda', 'and', 'determinant', 'A', 'lambda', 'lambda', 'the', 'eigens', 'values', 'are', 'and']","['trace', 'is', 'sum', 'of', 'the', 'eigen', 'valu', 'lambda', 'lambda', 'and', 'determin', 'a', 'lambda', 'lambda', 'the', 'eigen', 'valu', 'are', 'and']","['trace', 'sum', 'eigen', 'valu', 'lambda', 'lambda', 'determin', 'lambda', 'lambda', 'eigen', 'valu']",trace sum eigen valu lambda lambda determin lambda lambda eigen valu,linalg,CS,CS154
100621,(-lambda)*sin pi*h = sin (pi*h) =  sin (pi*h) cos (pi*h) ==>  - lambda =  cos pi*h ==> lambda =  -  cos pi*h,#linalgtheory,3,3268,"['lambda', 'sin', 'pi', 'h', 'sin', 'pi', 'h', 'sin', 'pi', 'h', 'cos', 'pi', 'h', 'lambda', 'cos', 'pi', 'h', 'lambda', 'cos', 'pi', 'h']","['lambda', 'sin', 'pi', 'h', 'sin', 'pi', 'h', 'sin', 'pi', 'h', 'cos', 'pi', 'h', 'lambda', 'cos', 'pi', 'h', 'lambda', 'cos', 'pi', 'h']","['lambda', 'sin', 'pi', 'h', 'sin', 'pi', 'h', 'sin', 'pi', 'h', 'cos', 'pi', 'h', 'lambda', 'cos', 'pi', 'h', 'lambda', 'cos', 'pi', 'h']",lambda sin pi h sin pi h sin pi h cos pi h lambda cos pi h lambda cos pi h,linalg,CS,CS154
79898,Im not entirely sure but it sounds logical that this could be true when P(B) =  regardless of P(A) so that theyre independent and P(B) = .  Or I could try to use the Bayes Theorem and get to Pr(B|A)/Pr(B) =  ==> Pr(B|A) = Pr(B) whichIm not sure how to proceed with.,#probabilitytheory,2,1078,"['Im', 'not', 'entirely', 'sure', 'but', 'it', 'sounds', 'logical', 'that', 'this', 'could', 'be', 'true', 'when', 'P', 'B', 'regardless', 'of', 'P', 'A', 'so', 'that', 'theyre', 'independent', 'and', 'P', 'B', 'Or', 'I', 'could', 'try', 'to', 'use', 'the', 'Bayes', 'Theorem', 'and', 'get', 'to', 'Pr', 'B', 'A', 'Pr', 'B', 'Pr', 'B', 'A', 'Pr', 'B', 'whichIm', 'not', 'sure', 'how', 'to', 'proceed', 'with']","['im', 'not', 'entir', 'sure', 'but', 'it', 'sound', 'logic', 'that', 'this', 'could', 'be', 'true', 'when', 'p', 'b', 'regardless', 'of', 'p', 'a', 'so', 'that', 'theyr', 'independ', 'and', 'p', 'b', 'or', 'i', 'could', 'tri', 'to', 'use', 'the', 'bay', 'theorem', 'and', 'get', 'to', 'pr', 'b', 'a', 'pr', 'b', 'pr', 'b', 'a', 'pr', 'b', 'whichim', 'not', 'sure', 'how', 'to', 'proceed', 'with']","['im', 'entir', 'sure', 'sound', 'logic', 'true', 'p', 'b', 'regardless', 'p', 'theyr', 'independ', 'p', 'b', 'tri', 'bay', 'theorem', 'get', 'pr', 'b', 'pr', 'b', 'pr', 'b', 'pr', 'b', 'whichim', 'sure', 'proceed']",im entir sure sound logic true p b regardless p theyr independ p b tri bay theorem get pr b pr b pr b pr b whichim sure proceed,probabilitytheory,CS,CS146
80158,"I didn't get to the second part of the pre-class work. The first one takes a legit h from me. So here are all the code I have. I then export the csv to an excel graph to plot a linear regression. import csv
import matplotlib.pyplot as plt
from collections import Counter

#linear regression
content = []
xaxis = []
yaxis = []
with open('benchmarks.txt', 'r') as f:
	r = csv.reader(f)
	for row in r:
		if row[] == '.tomcatv':
			if len(row[])>=:
				row[] = row[].split('-')[]
				if len(row[])<:
					row[] = str(int(row[])+)
				content.append([row[], row[]])
				xaxis.appe",#classification,3,1089,"['I', ""didn't"", 'get', 'to', 'the', 'second', 'part', 'of', 'the', 'pre', 'class', 'work', 'The', 'first', 'one', 'takes', 'a', 'legit', 'h', 'from', 'me', 'So', 'here', 'are', 'all', 'the', 'code', 'I', 'have', 'I', 'then', 'export', 'the', 'csv', 'to', 'an', 'excel', 'graph', 'to', 'plot', 'a', 'linear', 'regression', 'import', 'csv', 'import', 'matplotlib', 'pyplot', 'as', 'plt', 'from', 'collections', 'import', 'Counter', 'linear', 'regression', 'content', 'xaxis', 'yaxis', 'with', 'open', ""'benchmarks"", ""txt'"", ""'r'"", 'as', 'f', 'r', 'csv', 'reader', 'f', 'for', 'row', 'in', 'r', 'if', 'row', ""'"", ""tomcatv'"", 'if', 'len', 'row', 'row', 'row', 'split', ""'"", ""'"", 'if', 'len', 'row', 'row', 'str', 'int', 'row', 'content', 'append', 'row', 'row', 'xaxis', 'appe']","['i', ""didn't"", 'get', 'to', 'the', 'second', 'part', 'of', 'the', 'pre', 'class', 'work', 'the', 'first', 'one', 'take', 'a', 'legit', 'h', 'from', 'me', 'so', 'here', 'are', 'all', 'the', 'code', 'i', 'have', 'i', 'then', 'export', 'the', 'csv', 'to', 'an', 'excel', 'graph', 'to', 'plot', 'a', 'linear', 'regress', 'import', 'csv', 'import', 'matplotlib', 'pyplot', 'as', 'plt', 'from', 'collect', 'import', 'counter', 'linear', 'regress', 'content', 'xaxi', 'yaxi', 'with', 'open', 'benchmark', 'txt', 'r', 'as', 'f', 'r', 'csv', 'reader', 'f', 'for', 'row', 'in', 'r', 'if', 'row', ""'"", 'tomcatv', 'if', 'len', 'row', 'row', 'row', 'split', ""'"", ""'"", 'if', 'len', 'row', 'row', 'str', 'int', 'row', 'content', 'append', 'row', 'row', 'xaxi', 'app']","['get', 'second', 'part', 'pre', 'class', 'work', 'first', 'one', 'take', 'legit', 'h', 'code', 'export', 'csv', 'excel', 'graph', 'plot', 'linear', 'regress', 'import', 'csv', 'import', 'matplotlib', 'pyplot', 'plt', 'collect', 'import', 'counter', 'linear', 'regress', 'content', 'xaxi', 'yaxi', 'open', 'benchmark', 'txt', 'r', 'f', 'r', 'csv', 'reader', 'f', 'row', 'r', 'row', ""'"", 'tomcatv', 'len', 'row', 'row', 'row', 'split', ""'"", ""'"", 'len', 'row', 'row', 'str', 'int', 'row', 'content', 'append', 'row', 'row', 'xaxi', 'app']",get second part pre class work first one take legit h code export csv excel graph plot linear regress import csv import matplotlib pyplot plt collect import counter linear regress content xaxi yaxi open benchmark txt r f r csv reader f row r row ' tomcatv len row row row split ' ' len row row str int row content append row row xaxi app,classification,CS,CS156
100330,"from sklearn.model_selection import train_test_split

classes = [] * n_formal + [] * n_jerseys
X_train, X_test, y_train, y_test = train_test_split(reshaped_combined, classes, test_size=., 
                                                    stratify=classes, random_state=RANDOM_SEED) 
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis

lda = LinearDiscriminantAnalysis(n_components=)
lda.fit(X_train, y_train)
print('Train accuracy:', sum(lda.predict(X_train) == y_train) / X_train.shape[])
print('Test accuracy:', sum(lda.predict(X_test) == y_test) / X_test.shape[])",#classification,4,3243,"['from', 'sklearn', 'model_selection', 'import', 'train_test_split', 'classes', 'n_formal', 'n_jerseys', 'X_train', 'X_test', 'y_train', 'y_test', 'train_test_split', 'reshaped_combined', 'classes', 'test_size', 'stratify', 'classes', 'random_state', 'RANDOM_SEED', 'from', 'sklearn', 'discriminant_analysis', 'import', 'LinearDiscriminantAnalysis', 'lda', 'LinearDiscriminantAnalysis', 'n_components', 'lda', 'fit', 'X_train', 'y_train', 'print', ""'Train"", 'accuracy', ""'"", 'sum', 'lda', 'predict', 'X_train', 'y_train', 'X_train', 'shape', 'print', ""'Test"", 'accuracy', ""'"", 'sum', 'lda', 'predict', 'X_test', 'y_test', 'X_test', 'shape']","['from', 'sklearn', 'model_select', 'import', 'train_test_split', 'class', 'n_formal', 'n_jersey', 'x_train', 'x_test', 'y_train', 'y_test', 'train_test_split', 'reshaped_combin', 'class', 'test_siz', 'stratifi', 'class', 'random_st', 'random_se', 'from', 'sklearn', 'discriminant_analysi', 'import', 'lineardiscriminantanalysi', 'lda', 'lineardiscriminantanalysi', 'n_compon', 'lda', 'fit', 'x_train', 'y_train', 'print', 'train', 'accuraci', ""'"", 'sum', 'lda', 'predict', 'x_train', 'y_train', 'x_train', 'shape', 'print', 'test', 'accuraci', ""'"", 'sum', 'lda', 'predict', 'x_test', 'y_test', 'x_test', 'shape']","['sklearn', 'model_select', 'import', 'train_test_split', 'class', 'n_formal', 'n_jersey', 'x_train', 'x_test', 'y_train', 'y_test', 'train_test_split', 'reshaped_combin', 'class', 'test_siz', 'stratifi', 'class', 'random_st', 'random_se', 'sklearn', 'discriminant_analysi', 'import', 'lineardiscriminantanalysi', 'lda', 'lineardiscriminantanalysi', 'n_compon', 'lda', 'fit', 'x_train', 'y_train', 'print', 'train', 'accuraci', ""'"", 'sum', 'lda', 'predict', 'x_train', 'y_train', 'x_train', 'shape', 'print', 'test', 'accuraci', ""'"", 'sum', 'lda', 'predict', 'x_test', 'y_test', 'x_test', 'shape']",sklearn model_select import train_test_split class n_formal n_jersey x_train x_test y_train y_test train_test_split reshaped_combin class test_siz stratifi class random_st random_se sklearn discriminant_analysi import lineardiscriminantanalysi lda lineardiscriminantanalysi n_compon lda fit x_train y_train print train accuraci ' sum lda predict x_train y_train x_train shape print test accuraci ' sum lda predict x_test y_test x_test shape,classification,CS,CS156
100330,"N_COMPONENTS = 
lda = LinearDiscriminantAnalysis(n_components=N_COMPONENTS, random_state=)
X = lda.fit_transform(data)
y = [ if label == 'man' else  for label in labels]

I was still working to make the LDA work so didn't get to the accuracy part.",#classification,2,3243,"['N_COMPONENTS', 'lda', 'LinearDiscriminantAnalysis', 'n_components', 'N_COMPONENTS', 'random_state', 'X', 'lda', 'fit_transform', 'data', 'y', 'if', 'label', ""'man'"", 'else', 'for', 'label', 'in', 'labels', 'I', 'was', 'still', 'working', 'to', 'make', 'the', 'LDA', 'work', 'so', ""didn't"", 'get', 'to', 'the', 'accuracy', 'part']","['n_compon', 'lda', 'lineardiscriminantanalysi', 'n_compon', 'n_compon', 'random_st', 'x', 'lda', 'fit_transform', 'data', 'y', 'if', 'label', 'man', 'els', 'for', 'label', 'in', 'label', 'i', 'was', 'still', 'work', 'to', 'make', 'the', 'lda', 'work', 'so', ""didn't"", 'get', 'to', 'the', 'accuraci', 'part']","['n_compon', 'lda', 'lineardiscriminantanalysi', 'n_compon', 'n_compon', 'random_st', 'x', 'lda', 'fit_transform', 'data', 'label', 'man', 'els', 'label', 'label', 'still', 'work', 'make', 'lda', 'work', 'get', 'accuraci', 'part']",n_compon lda lineardiscriminantanalysi n_compon n_compon random_st x lda fit_transform data label man els label label still work make lda work get accuraci part,classification,CS,CS156
100330,"#actually projecting
lda = LinearDiscriminantAnalysis(n_components=)
X_r = lda.fit(X, y).transform(X)

#showing the projections
colors = ['navy', 'red']

plt.figure()
for color, i, target_name in zip(colors, [, ], target_names):
    plt.scatter(X_r[y == i, ], X_r[y == i, ], alpha=., color=color,
                label=target_name)
plt.legend(loc='best', shadow=False, scatterpoints=)
plt.title('LDA of eigenfashion')

plt.show()",#classification,4,3243,"['actually', 'projecting', 'lda', 'LinearDiscriminantAnalysis', 'n_components', 'X_r', 'lda', 'fit', 'X', 'y', 'transform', 'X', 'showing', 'the', 'projections', 'colors', ""'navy'"", ""'red'"", 'plt', 'figure', 'for', 'color', 'i', 'target_name', 'in', 'zip', 'colors', 'target_names', 'plt', 'scatter', 'X_r', 'y', 'i', 'X_r', 'y', 'i', 'alpha', 'color', 'color', 'label', 'target_name', 'plt', 'legend', 'loc', ""'best'"", 'shadow', 'False', 'scatterpoints', 'plt', 'title', ""'LDA"", 'of', ""eigenfashion'"", 'plt', 'show']","['actual', 'project', 'lda', 'lineardiscriminantanalysi', 'n_compon', 'x_r', 'lda', 'fit', 'x', 'y', 'transform', 'x', 'show', 'the', 'project', 'color', 'navi', 'red', 'plt', 'figur', 'for', 'color', 'i', 'target_nam', 'in', 'zip', 'color', 'target_nam', 'plt', 'scatter', 'x_r', 'y', 'i', 'x_r', 'y', 'i', 'alpha', 'color', 'color', 'label', 'target_nam', 'plt', 'legend', 'loc', 'best', 'shadow', 'fals', 'scatterpoint', 'plt', 'titl', 'lda', 'of', 'eigenfashion', 'plt', 'show']","['actual', 'project', 'lda', 'lineardiscriminantanalysi', 'n_compon', 'x_r', 'lda', 'fit', 'x', 'transform', 'x', 'show', 'project', 'color', 'navi', 'red', 'plt', 'figur', 'color', 'target_nam', 'zip', 'color', 'target_nam', 'plt', 'scatter', 'x_r', 'x_r', 'alpha', 'color', 'color', 'label', 'target_nam', 'plt', 'legend', 'loc', 'best', 'shadow', 'fals', 'scatterpoint', 'plt', 'titl', 'lda', 'eigenfashion', 'plt', 'show']",actual project lda lineardiscriminantanalysi n_compon x_r lda fit x transform x show project color navi red plt figur color target_nam zip color target_nam plt scatter x_r x_r alpha color color label target_nam plt legend loc best shadow fals scatterpoint plt titl lda eigenfashion plt show,classification,CS,CS156
100337,"data = np.array([cd for (cd,_y,f) in raw_data])
labels = np.array([_y for (cd,_y,f) in raw_data])
y = [ if label == 'dislike' else  for label in labels]
X=data
train_split = int(len(data) * . / .)

    X_train = X[:train_split]
    X_test = X[train_split:]
    y_train = y[:train_split]
    y_test = y[train_split:]

    # if you wanted to use a different model, you'd specify that here
    clf = LinearDiscriminantAnalysis()
    clf.fit(X_train,y_train)

    print ""score"",clf.score(X_test,y_test)
I got a score of . which isn't good but it was surprisingly better than my PCA score",#classification,4,3246,"['data', 'np', 'array', 'cd', 'for', 'cd', '_y', 'f', 'in', 'raw_data', 'labels', 'np', 'array', '_y', 'for', 'cd', '_y', 'f', 'in', 'raw_data', 'y', 'if', 'label', ""'dislike'"", 'else', 'for', 'label', 'in', 'labels', 'X', 'data', 'train_split', 'int', 'len', 'data', 'X_train', 'X', 'train_split', 'X_test', 'X', 'train_split', 'y_train', 'y', 'train_split', 'y_test', 'y', 'train_split', 'if', 'you', 'wanted', 'to', 'use', 'a', 'different', 'model', ""you'd"", 'specify', 'that', 'here', 'clf', 'LinearDiscriminantAnalysis', 'clf', 'fit', 'X_train', 'y_train', 'print', 'score', 'clf', 'score', 'X_test', 'y_test', 'I', 'got', 'a', 'score', 'of', 'which', ""isn't"", 'good', 'but', 'it', 'was', 'surprisingly', 'better', 'than', 'my', 'PCA', 'score']","['data', 'np', 'array', 'cd', 'for', 'cd', '_y', 'f', 'in', 'raw_data', 'label', 'np', 'array', '_y', 'for', 'cd', '_y', 'f', 'in', 'raw_data', 'y', 'if', 'label', 'dislik', 'els', 'for', 'label', 'in', 'label', 'x', 'data', 'train_split', 'int', 'len', 'data', 'x_train', 'x', 'train_split', 'x_test', 'x', 'train_split', 'y_train', 'y', 'train_split', 'y_test', 'y', 'train_split', 'if', 'you', 'want', 'to', 'use', 'a', 'differ', 'model', ""you'd"", 'specifi', 'that', 'here', 'clf', 'lineardiscriminantanalysi', 'clf', 'fit', 'x_train', 'y_train', 'print', 'score', 'clf', 'score', 'x_test', 'y_test', 'i', 'got', 'a', 'score', 'of', 'which', ""isn't"", 'good', 'but', 'it', 'was', 'surpris', 'better', 'than', 'my', 'pca', 'score']","['data', 'np', 'array', 'cd', 'cd', '_y', 'f', 'raw_data', 'label', 'np', 'array', '_y', 'cd', '_y', 'f', 'raw_data', 'label', 'dislik', 'els', 'label', 'label', 'x', 'data', 'train_split', 'int', 'len', 'data', 'x_train', 'x', 'train_split', 'x_test', 'x', 'train_split', 'y_train', 'train_split', 'y_test', 'train_split', 'want', 'differ', 'model', 'specifi', 'clf', 'lineardiscriminantanalysi', 'clf', 'fit', 'x_train', 'y_train', 'print', 'score', 'clf', 'score', 'x_test', 'y_test', 'got', 'score', 'good', 'surpris', 'better', 'pca', 'score']",data np array cd cd _y f raw_data label np array _y cd _y f raw_data label dislik els label label x data train_split int len data x_train x train_split x_test x train_split y_train train_split y_test train_split want differ model specifi clf lineardiscriminantanalysi clf fit x_train y_train print score clf score x_test y_test got score good surpris better pca score,classification,CS,CS156
107673,"The classification decision rule equation is [vec(w) . vec(u) + b >= ], where w is the normal vector that defines the hyperplane separator, and u the unknown to classify. Support vectors are samples exactly on the margin of separation, and gives us [vec(w) . vec(u) + b == ].",#classification,4,3841,"['The', 'classification', 'decision', 'rule', 'equation', 'is', 'vec', 'w', 'vec', 'u', 'b', 'where', 'w', 'is', 'the', 'normal', 'vector', 'that', 'defines', 'the', 'hyperplane', 'separator', 'and', 'u', 'the', 'unknown', 'to', 'classify', 'Support', 'vectors', 'are', 'samples', 'exactly', 'on', 'the', 'margin', 'of', 'separation', 'and', 'gives', 'us', 'vec', 'w', 'vec', 'u', 'b']","['the', 'classif', 'decis', 'rule', 'equat', 'is', 'vec', 'w', 'vec', 'u', 'b', 'where', 'w', 'is', 'the', 'normal', 'vector', 'that', 'defin', 'the', 'hyperplan', 'separ', 'and', 'u', 'the', 'unknown', 'to', 'classifi', 'support', 'vector', 'are', 'sampl', 'exact', 'on', 'the', 'margin', 'of', 'separ', 'and', 'give', 'us', 'vec', 'w', 'vec', 'u', 'b']","['classif', 'decis', 'rule', 'equat', 'vec', 'w', 'vec', 'u', 'b', 'w', 'normal', 'vector', 'defin', 'hyperplan', 'separ', 'u', 'unknown', 'classifi', 'support', 'vector', 'sampl', 'exact', 'margin', 'separ', 'give', 'us', 'vec', 'w', 'vec', 'u', 'b']",classif decis rule equat vec w vec u b w normal vector defin hyperplan separ u unknown classifi support vector sampl exact margin separ give us vec w vec u b,classification,CS,CS156
140522,"Once sketched the tree, we inform our decision by finding the optimal expected utility. To find the expected utlity of each decision, we sum over uncertain variables (e.g. the risk of miscarriage, the p of discovery) and we optimize over future decisions. Once every decision is associated with an expected utility, we choose the optimal one.
Decision trees are also a machine learning classification algorithm that splits the feature space according to rules (e.g. test == positive, income < k) and labels the resulting spaces (decisions in this framework) (e.g. terminate pregnancy).",#classification,3,6949,"['Once', 'sketched', 'the', 'tree', 'we', 'inform', 'our', 'decision', 'by', 'finding', 'the', 'optimal', 'expected', 'utility', 'To', 'find', 'the', 'expected', 'utlity', 'of', 'each', 'decision', 'we', 'sum', 'over', 'uncertain', 'variables', 'e', 'g', 'the', 'risk', 'of', 'miscarriage', 'the', 'p', 'of', 'discovery', 'and', 'we', 'optimize', 'over', 'future', 'decisions', 'Once', 'every', 'decision', 'is', 'associated', 'with', 'an', 'expected', 'utility', 'we', 'choose', 'the', 'optimal', 'one', 'Decision', 'trees', 'are', 'also', 'a', 'machine', 'learning', 'classification', 'algorithm', 'that', 'splits', 'the', 'feature', 'space', 'according', 'to', 'rules', 'e', 'g', 'test', 'positive', 'income', 'k', 'and', 'labels', 'the', 'resulting', 'spaces', 'decisions', 'in', 'this', 'framework', 'e', 'g', 'terminate', 'pregnancy']","['onc', 'sketch', 'the', 'tree', 'we', 'inform', 'our', 'decis', 'by', 'find', 'the', 'optim', 'expect', 'util', 'to', 'find', 'the', 'expect', 'utliti', 'of', 'each', 'decis', 'we', 'sum', 'over', 'uncertain', 'variabl', 'e', 'g', 'the', 'risk', 'of', 'miscarriag', 'the', 'p', 'of', 'discoveri', 'and', 'we', 'optim', 'over', 'futur', 'decis', 'onc', 'everi', 'decis', 'is', 'associ', 'with', 'an', 'expect', 'util', 'we', 'choos', 'the', 'optim', 'one', 'decis', 'tree', 'are', 'also', 'a', 'machin', 'learn', 'classif', 'algorithm', 'that', 'split', 'the', 'featur', 'space', 'accord', 'to', 'rule', 'e', 'g', 'test', 'posit', 'incom', 'k', 'and', 'label', 'the', 'result', 'space', 'decis', 'in', 'this', 'framework', 'e', 'g', 'termin', 'pregnanc']","['onc', 'sketch', 'tree', 'inform', 'decis', 'find', 'optim', 'expect', 'util', 'find', 'expect', 'utliti', 'decis', 'sum', 'uncertain', 'variabl', 'e', 'g', 'risk', 'miscarriag', 'p', 'discoveri', 'optim', 'futur', 'decis', 'onc', 'everi', 'decis', 'associ', 'expect', 'util', 'choos', 'optim', 'one', 'decis', 'tree', 'machin', 'learn', 'classif', 'algorithm', 'split', 'featur', 'space', 'accord', 'rule', 'e', 'g', 'test', 'posit', 'incom', 'k', 'label', 'result', 'space', 'decis', 'framework', 'e', 'g', 'termin', 'pregnanc']",onc sketch tree inform decis find optim expect util find expect utliti decis sum uncertain variabl e g risk miscarriag p discoveri optim futur decis onc everi decis associ expect util choos optim one decis tree machin learn classif algorithm split featur space accord rule e g test posit incom k label result space decis framework e g termin pregnanc,classification,CS,CS156
195630,"#.

import random
results = []

for _ in range():
    x =[,,,,]
    y = [,,,,]
    count = 
    for i in x:
        selec = random.choice(y)
        y.remove(selec)
        if i == selec:
            count +=
    results.append(count)

p_zero = (results.count()/.)
p_one = float(results.count()/.)
p_two = float(results.count()/.)

p_three = float(results.count()/.)

p_four = float(results.count()/.)

p_five = float(results.count()/.)

print p_zero, p_one, p_two, p_three, p_four, p_five",#classification,2,9295,"['import', 'random', 'results', 'for', '_', 'in', 'range', 'x', 'y', 'count', 'for', 'i', 'in', 'x', 'selec', 'random', 'choice', 'y', 'y', 'remove', 'selec', 'if', 'i', 'selec', 'count', 'results', 'append', 'count', 'p_zero', 'results', 'count', 'p_one', 'float', 'results', 'count', 'p_two', 'float', 'results', 'count', 'p_three', 'float', 'results', 'count', 'p_four', 'float', 'results', 'count', 'p_five', 'float', 'results', 'count', 'print', 'p_zero', 'p_one', 'p_two', 'p_three', 'p_four', 'p_five']","['import', 'random', 'result', 'for', '_', 'in', 'rang', 'x', 'y', 'count', 'for', 'i', 'in', 'x', 'selec', 'random', 'choic', 'y', 'y', 'remov', 'selec', 'if', 'i', 'selec', 'count', 'result', 'append', 'count', 'p_zero', 'result', 'count', 'p_one', 'float', 'result', 'count', 'p_two', 'float', 'result', 'count', 'p_three', 'float', 'result', 'count', 'p_four', 'float', 'result', 'count', 'p_five', 'float', 'result', 'count', 'print', 'p_zero', 'p_one', 'p_two', 'p_three', 'p_four', 'p_five']","['import', 'random', 'result', '_', 'rang', 'x', 'count', 'x', 'selec', 'random', 'choic', 'remov', 'selec', 'selec', 'count', 'result', 'append', 'count', 'p_zero', 'result', 'count', 'p_one', 'float', 'result', 'count', 'p_two', 'float', 'result', 'count', 'p_three', 'float', 'result', 'count', 'p_four', 'float', 'result', 'count', 'p_five', 'float', 'result', 'count', 'print', 'p_zero', 'p_one', 'p_two', 'p_three', 'p_four', 'p_five']",import random result _ rang x count x selec random choic remov selec selec count result append count p_zero result count p_one float result count p_two float result count p_three float result count p_four float result count p_five float result count print p_zero p_one p_two p_three p_four p_five,classification,CS,CS156
203219,"width of the margin is the difference between two hyperplanes perpendicular to the direction of w: w^T/ (squr(w^Tw) (x_+ -x_-) = / (squr(w^Tw) (x_+ -x_-) )
it comes from wx +b >=  -- class ; wx +b <  -- class -
setting them  ==  for math convenience
calculate the distance from origin alng w to x is w^Tx/squar(w^Tw)",#classification,4,9581,"['width', 'of', 'the', 'margin', 'is', 'the', 'difference', 'between', 'two', 'hyperplanes', 'perpendicular', 'to', 'the', 'direction', 'of', 'w', 'w', 'T', 'squr', 'w', 'Tw', 'x_', 'x_', 'squr', 'w', 'Tw', 'x_', 'x_', 'it', 'comes', 'from', 'wx', 'b', 'class', 'wx', 'b', 'class', 'setting', 'them', 'for', 'math', 'convenience', 'calculate', 'the', 'distance', 'from', 'origin', 'alng', 'w', 'to', 'x', 'is', 'w', 'Tx', 'squar', 'w', 'Tw']","['width', 'of', 'the', 'margin', 'is', 'the', 'differ', 'between', 'two', 'hyperplan', 'perpendicular', 'to', 'the', 'direct', 'of', 'w', 'w', 't', 'squr', 'w', 'tw', 'x_', 'x_', 'squr', 'w', 'tw', 'x_', 'x_', 'it', 'come', 'from', 'wx', 'b', 'class', 'wx', 'b', 'class', 'set', 'them', 'for', 'math', 'conveni', 'calcul', 'the', 'distanc', 'from', 'origin', 'alng', 'w', 'to', 'x', 'is', 'w', 'tx', 'squar', 'w', 'tw']","['width', 'margin', 'differ', 'two', 'hyperplan', 'perpendicular', 'direct', 'w', 'w', 'squr', 'w', 'tw', 'x_', 'x_', 'squr', 'w', 'tw', 'x_', 'x_', 'come', 'wx', 'b', 'class', 'wx', 'b', 'class', 'set', 'math', 'conveni', 'calcul', 'distanc', 'origin', 'alng', 'w', 'x', 'w', 'tx', 'squar', 'w', 'tw']",width margin differ two hyperplan perpendicular direct w w squr w tw x_ x_ squr w tw x_ x_ come wx b class wx b class set math conveni calcul distanc origin alng w x w tx squar w tw,classification,CS,CS156
103164,"for color, i, target_name in zip(colors, [, , ], target_names):
    plt.scatter(X_r[y == i, ], X_r[y == i, ], color=color, alpha=., lw=lw,
                label=target_name)
plt.legend(loc='best', shadow=False, scatterpoints=)
plt.title('PCA of IRIS dataset')",#unsupervisedlearning,2,3511,"['for', 'color', 'i', 'target_name', 'in', 'zip', 'colors', 'target_names', 'plt', 'scatter', 'X_r', 'y', 'i', 'X_r', 'y', 'i', 'color', 'color', 'alpha', 'lw', 'lw', 'label', 'target_name', 'plt', 'legend', 'loc', ""'best'"", 'shadow', 'False', 'scatterpoints', 'plt', 'title', ""'PCA"", 'of', 'IRIS', ""dataset'""]","['for', 'color', 'i', 'target_nam', 'in', 'zip', 'color', 'target_nam', 'plt', 'scatter', 'x_r', 'y', 'i', 'x_r', 'y', 'i', 'color', 'color', 'alpha', 'lw', 'lw', 'label', 'target_nam', 'plt', 'legend', 'loc', 'best', 'shadow', 'fals', 'scatterpoint', 'plt', 'titl', 'pca', 'of', 'iri', 'dataset']","['color', 'target_nam', 'zip', 'color', 'target_nam', 'plt', 'scatter', 'x_r', 'x_r', 'color', 'color', 'alpha', 'lw', 'lw', 'label', 'target_nam', 'plt', 'legend', 'loc', 'best', 'shadow', 'fals', 'scatterpoint', 'plt', 'titl', 'pca', 'iri', 'dataset']",color target_nam zip color target_nam plt scatter x_r x_r color color alpha lw lw label target_nam plt legend loc best shadow fals scatterpoint plt titl pca iri dataset,unsupervisedlearning,CS,CS156
103171,"from PIL import Image
from collections import defaultdict
from glob import glob
from sklearn.decomposition import RandomizedPCA
# find the principal components
N_COMPONENTS = 
pca = RandomizedPCA(n_components=N_COMPONENTS, random_state=)
for filename in shirt_files:
    print filename
    raw_data.append((process_file(filename),'shirt',filename))
for filename in jersey_files:
    print filename
    raw_data.append((process_file(filename),'jersey',filename))
data = transform(raw_data) #cleaning (not shown)
X = pca.fit_transform(data)
y = [ if label == 'shirt' else  for label in labels]",#unsupervisedlearning,4,3514,"['from', 'PIL', 'import', 'Image', 'from', 'collections', 'import', 'defaultdict', 'from', 'glob', 'import', 'glob', 'from', 'sklearn', 'decomposition', 'import', 'RandomizedPCA', 'find', 'the', 'principal', 'components', 'N_COMPONENTS', 'pca', 'RandomizedPCA', 'n_components', 'N_COMPONENTS', 'random_state', 'for', 'filename', 'in', 'shirt_files', 'print', 'filename', 'raw_data', 'append', 'process_file', 'filename', ""'shirt'"", 'filename', 'for', 'filename', 'in', 'jersey_files', 'print', 'filename', 'raw_data', 'append', 'process_file', 'filename', ""'jersey'"", 'filename', 'data', 'transform', 'raw_data', 'cleaning', 'not', 'shown', 'X', 'pca', 'fit_transform', 'data', 'y', 'if', 'label', ""'shirt'"", 'else', 'for', 'label', 'in', 'labels']","['from', 'pil', 'import', 'imag', 'from', 'collect', 'import', 'defaultdict', 'from', 'glob', 'import', 'glob', 'from', 'sklearn', 'decomposit', 'import', 'randomizedpca', 'find', 'the', 'princip', 'compon', 'n_compon', 'pca', 'randomizedpca', 'n_compon', 'n_compon', 'random_st', 'for', 'filenam', 'in', 'shirt_fil', 'print', 'filenam', 'raw_data', 'append', 'process_fil', 'filenam', 'shirt', 'filenam', 'for', 'filenam', 'in', 'jersey_fil', 'print', 'filenam', 'raw_data', 'append', 'process_fil', 'filenam', 'jersey', 'filenam', 'data', 'transform', 'raw_data', 'clean', 'not', 'shown', 'x', 'pca', 'fit_transform', 'data', 'y', 'if', 'label', 'shirt', 'els', 'for', 'label', 'in', 'label']","['pil', 'import', 'imag', 'collect', 'import', 'defaultdict', 'glob', 'import', 'glob', 'sklearn', 'decomposit', 'import', 'randomizedpca', 'find', 'princip', 'compon', 'n_compon', 'pca', 'randomizedpca', 'n_compon', 'n_compon', 'random_st', 'filenam', 'shirt_fil', 'print', 'filenam', 'raw_data', 'append', 'process_fil', 'filenam', 'shirt', 'filenam', 'filenam', 'jersey_fil', 'print', 'filenam', 'raw_data', 'append', 'process_fil', 'filenam', 'jersey', 'filenam', 'data', 'transform', 'raw_data', 'clean', 'shown', 'x', 'pca', 'fit_transform', 'data', 'label', 'shirt', 'els', 'label', 'label']",pil import imag collect import defaultdict glob import glob sklearn decomposit import randomizedpca find princip compon n_compon pca randomizedpca n_compon n_compon random_st filenam shirt_fil print filenam raw_data append process_fil filenam shirt filenam filenam jersey_fil print filenam raw_data append process_fil filenam jersey filenam data transform raw_data clean shown x pca fit_transform data label shirt els label label,unsupervisedlearning,CS,CS156
103171,"pca = PCA(n_components=N_COMPONENTS)
print data.shape
X = pca.fit_transform(data)
print 'transform complete'
y = [ if label == 'dislike' else  for label in labels]

zipped = zip(X, raw_data)
likes = [x[] for x in zipped if x[][] == ""like""]
dislikes = [x[] for x in zipped if x[][] == ""dislike""]",#unsupervisedlearning,4,3514,"['pca', 'PCA', 'n_components', 'N_COMPONENTS', 'print', 'data', 'shape', 'X', 'pca', 'fit_transform', 'data', 'print', ""'transform"", ""complete'"", 'y', 'if', 'label', ""'dislike'"", 'else', 'for', 'label', 'in', 'labels', 'zipped', 'zip', 'X', 'raw_data', 'likes', 'x', 'for', 'x', 'in', 'zipped', 'if', 'x', 'like', 'dislikes', 'x', 'for', 'x', 'in', 'zipped', 'if', 'x', 'dislike']","['pca', 'pca', 'n_compon', 'n_compon', 'print', 'data', 'shape', 'x', 'pca', 'fit_transform', 'data', 'print', 'transform', 'complet', 'y', 'if', 'label', 'dislik', 'els', 'for', 'label', 'in', 'label', 'zip', 'zip', 'x', 'raw_data', 'like', 'x', 'for', 'x', 'in', 'zip', 'if', 'x', 'like', 'dislik', 'x', 'for', 'x', 'in', 'zip', 'if', 'x', 'dislik']","['pca', 'pca', 'n_compon', 'n_compon', 'print', 'data', 'shape', 'x', 'pca', 'fit_transform', 'data', 'print', 'transform', 'complet', 'label', 'dislik', 'els', 'label', 'label', 'zip', 'zip', 'x', 'raw_data', 'like', 'x', 'x', 'zip', 'x', 'like', 'dislik', 'x', 'x', 'zip', 'x', 'dislik']",pca pca n_compon n_compon print data shape x pca fit_transform data print transform complet label dislik els label label zip zip x raw_data like x x zip x like dislik x x zip x dislik,unsupervisedlearning,CS,CS156
116610,"I separated by chapters in a inefficient way because I wanted to get this done sooner than I could wrap my head around a wrapper that could do this. Knowing  chapters in the book and with their names in hand: 

from nltk.tokenize import RegexpTokenizer
tokenizer = RegexpTokenizer(r'\w+')

raw = data.lower()
tokens = tokenizer.tokenize(raw)

Example of obtaining indices that separate chaps:
for i in range(len(tokens)):
    if(tokens[i] == ""with"" and tokens[i + ] == ""the"" and tokens[i + ] == ""samanas"" ):
        print(i)
        break
#not enough space
from stop_words import get_stop_words",#unsupervisedlearning,3,5034,"['I', 'separated', 'by', 'chapters', 'in', 'a', 'inefficient', 'way', 'because', 'I', 'wanted', 'to', 'get', 'this', 'done', 'sooner', 'than', 'I', 'could', 'wrap', 'my', 'head', 'around', 'a', 'wrapper', 'that', 'could', 'do', 'this', 'Knowing', 'chapters', 'in', 'the', 'book', 'and', 'with', 'their', 'names', 'in', 'hand', 'from', 'nltk', 'tokenize', 'import', 'RegexpTokenizer', 'tokenizer', 'RegexpTokenizer', ""r'"", 'w', ""'"", 'raw', 'data', 'lower', 'tokens', 'tokenizer', 'tokenize', 'raw', 'Example', 'of', 'obtaining', 'indices', 'that', 'separate', 'chaps', 'for', 'i', 'in', 'range', 'len', 'tokens', 'if', 'tokens', 'i', 'with', 'and', 'tokens', 'i', 'the', 'and', 'tokens', 'i', 'samanas', 'print', 'i', 'break', 'not', 'enough', 'space', 'from', 'stop_words', 'import', 'get_stop_words']","['i', 'separ', 'by', 'chapter', 'in', 'a', 'ineffici', 'way', 'becaus', 'i', 'want', 'to', 'get', 'this', 'done', 'sooner', 'than', 'i', 'could', 'wrap', 'my', 'head', 'around', 'a', 'wrapper', 'that', 'could', 'do', 'this', 'know', 'chapter', 'in', 'the', 'book', 'and', 'with', 'their', 'name', 'in', 'hand', 'from', 'nltk', 'token', 'import', 'regexptoken', 'token', 'regexptoken', ""r'"", 'w', ""'"", 'raw', 'data', 'lower', 'token', 'token', 'token', 'raw', 'exampl', 'of', 'obtain', 'indic', 'that', 'separ', 'chap', 'for', 'i', 'in', 'rang', 'len', 'token', 'if', 'token', 'i', 'with', 'and', 'token', 'i', 'the', 'and', 'token', 'i', 'samana', 'print', 'i', 'break', 'not', 'enough', 'space', 'from', 'stop_word', 'import', 'get_stop_word']","['separ', 'chapter', 'ineffici', 'way', 'becaus', 'want', 'get', 'done', 'sooner', 'wrap', 'head', 'around', 'wrapper', 'know', 'chapter', 'book', 'name', 'hand', 'nltk', 'token', 'import', 'regexptoken', 'token', 'regexptoken', ""r'"", 'w', ""'"", 'raw', 'data', 'lower', 'token', 'token', 'token', 'raw', 'exampl', 'obtain', 'indic', 'separ', 'chap', 'rang', 'len', 'token', 'token', 'token', 'token', 'samana', 'print', 'break', 'enough', 'space', 'stop_word', 'import', 'get_stop_word']",separ chapter ineffici way becaus want get done sooner wrap head around wrapper know chapter book name hand nltk token import regexptoken token regexptoken r' w ' raw data lower token token token raw exampl obtain indic separ chap rang len token token token token samana print break enough space stop_word import get_stop_word,unsupervisedlearning,CS,CS156
116610,"with open(fname) as f:
    raw_text = f.readlines()
corpus = ['']
for l in raw_text:
    if l == '\r\n':
        corpus.append('')
    else:
        corpus[
            -] += ' ' + l.rstrip('\n').rstrip('\r').lstrip('\xef\xbb\xbf')

tf_vectorizer = CountVectorizer(
    strip_accents='unicode',
    max_df=., min_df=, max_features=n_features,
    stop_words=ENGLISH_STOP_WORDS+NUMBERS+CUSTOM)",#unsupervisedlearning,4,5034,"['with', 'open', 'fname', 'as', 'f', 'raw_text', 'f', 'readlines', 'corpus', ""''"", 'for', 'l', 'in', 'raw_text', 'if', 'l', ""'"", 'r', ""n'"", 'corpus', 'append', ""''"", 'else', 'corpus', ""'"", ""'"", 'l', 'rstrip', ""'"", ""n'"", 'rstrip', ""'"", ""r'"", 'lstrip', ""'"", 'xef', 'xbb', ""xbf'"", 'tf_vectorizer', 'CountVectorizer', 'strip_accents', ""'unicode'"", 'max_df', 'min_df', 'max_features', 'n_features', 'stop_words', 'ENGLISH_STOP_WORDS', 'NUMBERS', 'CUSTOM']","['with', 'open', 'fname', 'as', 'f', 'raw_text', 'f', 'readlin', 'corpus', ""''"", 'for', 'l', 'in', 'raw_text', 'if', 'l', ""'"", 'r', ""n'"", 'corpus', 'append', ""''"", 'els', 'corpus', ""'"", ""'"", 'l', 'rstrip', ""'"", ""n'"", 'rstrip', ""'"", ""r'"", 'lstrip', ""'"", 'xef', 'xbb', 'xbf', 'tf_vector', 'countvector', 'strip_acc', 'unicod', 'max_df', 'min_df', 'max_featur', 'n_featur', 'stop_word', 'english_stop_word', 'number', 'custom']","['open', 'fname', 'f', 'raw_text', 'f', 'readlin', 'corpus', ""''"", 'l', 'raw_text', 'l', ""'"", 'r', ""n'"", 'corpus', 'append', ""''"", 'els', 'corpus', ""'"", ""'"", 'l', 'rstrip', ""'"", ""n'"", 'rstrip', ""'"", ""r'"", 'lstrip', ""'"", 'xef', 'xbb', 'xbf', 'tf_vector', 'countvector', 'strip_acc', 'unicod', 'max_df', 'min_df', 'max_featur', 'n_featur', 'stop_word', 'english_stop_word', 'number', 'custom']",open fname f raw_text f readlin corpus '' l raw_text l ' r n' corpus append '' els corpus ' ' l rstrip ' n' rstrip ' r' lstrip ' xef xbb xbf tf_vector countvector strip_acc unicod max_df min_df max_featur n_featur stop_word english_stop_word number custom,unsupervisedlearning,CS,CS156
222698,"from PIL import Image
import os

# size = (, )
# saved = ""yeet.JPEG""

# try:
#     im =  Image.open(""yeet.JPEG"")
# except:
#     print ""Unable to load image""

# im=im.resize(size)
# im.save(""yeet_new_size.png"",""PNG"")

for directory in ('mens','womens'):
    os.chdir(""/Users/trenthommeyer/Downloads/eigenshirt analysis/""+directory)
    print(""Current Working Directory "" , os.getcwd())
    for filename in os.listdir(os.getcwd()):
        size = (, )
        if filename[-:]==""JPEG"":
            try:
                im =  Image.open(filename)
            except:
                print """,#unsupervisedlearning,1,10473,"['from', 'PIL', 'import', 'Image', 'import', 'os', 'size', 'saved', 'yeet', 'JPEG', 'try', 'im', 'Image', 'open', 'yeet', 'JPEG', 'except', 'print', 'Unable', 'to', 'load', 'image', 'im', 'im', 'resize', 'size', 'im', 'save', 'yeet_new_size', 'png', 'PNG', 'for', 'directory', 'in', ""'mens'"", ""'womens'"", 'os', 'chdir', 'Users', 'trenthommeyer', 'Downloads', 'eigenshirt', 'analysis', 'directory', 'print', 'Current', 'Working', 'Directory', 'os', 'getcwd', 'for', 'filename', 'in', 'os', 'listdir', 'os', 'getcwd', 'size', 'if', 'filename', 'JPEG', 'try', 'im', 'Image', 'open', 'filename', 'except', 'print']","['from', 'pil', 'import', 'imag', 'import', 'os', 'size', 'save', 'yeet', 'jpeg', 'tri', 'im', 'imag', 'open', 'yeet', 'jpeg', 'except', 'print', 'unabl', 'to', 'load', 'imag', 'im', 'im', 'resiz', 'size', 'im', 'save', 'yeet_new_s', 'png', 'png', 'for', 'directori', 'in', 'men', 'women', 'os', 'chdir', 'user', 'trenthommey', 'download', 'eigenshirt', 'analysi', 'directori', 'print', 'current', 'work', 'directori', 'os', 'getcwd', 'for', 'filenam', 'in', 'os', 'listdir', 'os', 'getcwd', 'size', 'if', 'filenam', 'jpeg', 'tri', 'im', 'imag', 'open', 'filenam', 'except', 'print']","['pil', 'import', 'imag', 'import', 'os', 'size', 'save', 'yeet', 'jpeg', 'tri', 'im', 'imag', 'open', 'yeet', 'jpeg', 'except', 'print', 'unabl', 'load', 'imag', 'im', 'im', 'resiz', 'size', 'im', 'save', 'yeet_new_s', 'png', 'png', 'directori', 'men', 'women', 'os', 'chdir', 'user', 'trenthommey', 'download', 'eigenshirt', 'analysi', 'directori', 'print', 'current', 'work', 'directori', 'os', 'getcwd', 'filenam', 'os', 'listdir', 'os', 'getcwd', 'size', 'filenam', 'jpeg', 'tri', 'im', 'imag', 'open', 'filenam', 'except', 'print']",pil import imag import os size save yeet jpeg tri im imag open yeet jpeg except print unabl load imag im im resiz size im save yeet_new_s png png directori men women os chdir user trenthommey download eigenshirt analysi directori print current work directori os getcwd filenam os listdir os getcwd size filenam jpeg tri im imag open filenam except print,unsupervisedlearning,CS,CS156
222705,"I couldn't get the PCA representation to work because I had troubled using the Scikit code since their data came with attributes so I couldn't get my code to work. I resized the images though, then turned their folders into numpy arrays and tried to make them into pd dataframes.
os.chdir(""/Users/sorengran/Downloads/Jersey"")
print(""Current Working Directory "" , os.getcwd())
for filename in os.listdir(os.getcwd()):
    size = (, )
    if filename[-:]==""JPEG"":
        try:
            im = Image.open(filename)
        except:
            print(""Unable to load image"")
        im=im.resiz...",#unsupervisedlearning,1,10475,"['I', ""couldn't"", 'get', 'the', 'PCA', 'representation', 'to', 'work', 'because', 'I', 'had', 'troubled', 'using', 'the', 'Scikit', 'code', 'since', 'their', 'data', 'came', 'with', 'attributes', 'so', 'I', ""couldn't"", 'get', 'my', 'code', 'to', 'work', 'I', 'resized', 'the', 'images', 'though', 'then', 'turned', 'their', 'folders', 'into', 'numpy', 'arrays', 'and', 'tried', 'to', 'make', 'them', 'into', 'pd', 'dataframes', 'os', 'chdir', 'Users', 'sorengran', 'Downloads', 'Jersey', 'print', 'Current', 'Working', 'Directory', 'os', 'getcwd', 'for', 'filename', 'in', 'os', 'listdir', 'os', 'getcwd', 'size', 'if', 'filename', 'JPEG', 'try', 'im', 'Image', 'open', 'filename', 'except', 'print', 'Unable', 'to', 'load', 'image', 'im', 'im', 'resiz']","['i', ""couldn't"", 'get', 'the', 'pca', 'represent', 'to', 'work', 'becaus', 'i', 'had', 'troubl', 'use', 'the', 'scikit', 'code', 'sinc', 'their', 'data', 'came', 'with', 'attribut', 'so', 'i', ""couldn't"", 'get', 'my', 'code', 'to', 'work', 'i', 'resiz', 'the', 'imag', 'though', 'then', 'turn', 'their', 'folder', 'into', 'numpi', 'array', 'and', 'tri', 'to', 'make', 'them', 'into', 'pd', 'datafram', 'os', 'chdir', 'user', 'sorengran', 'download', 'jersey', 'print', 'current', 'work', 'directori', 'os', 'getcwd', 'for', 'filenam', 'in', 'os', 'listdir', 'os', 'getcwd', 'size', 'if', 'filenam', 'jpeg', 'tri', 'im', 'imag', 'open', 'filenam', 'except', 'print', 'unabl', 'to', 'load', 'imag', 'im', 'im', 'resiz']","['get', 'pca', 'represent', 'work', 'becaus', 'troubl', 'scikit', 'code', 'sinc', 'data', 'came', 'attribut', 'get', 'code', 'work', 'resiz', 'imag', 'though', 'turn', 'folder', 'numpi', 'array', 'tri', 'make', 'pd', 'datafram', 'os', 'chdir', 'user', 'sorengran', 'download', 'jersey', 'print', 'current', 'work', 'directori', 'os', 'getcwd', 'filenam', 'os', 'listdir', 'os', 'getcwd', 'size', 'filenam', 'jpeg', 'tri', 'im', 'imag', 'open', 'filenam', 'except', 'print', 'unabl', 'load', 'imag', 'im', 'im', 'resiz']",get pca represent work becaus troubl scikit code sinc data came attribut get code work resiz imag though turn folder numpi array tri make pd datafram os chdir user sorengran download jersey print current work directori os getcwd filenam os listdir os getcwd size filenam jpeg tri im imag open filenam except print unabl load imag im im resiz,unsupervisedlearning,CS,CS156
87824,"def mergesort(a):
    if len(a) <= : return a
    
    m = len(a)//
    
    half = a[:m]
    half = a[m:]
    
    return merge(mergesort(half),mergesort(half))

def merge(a,b):
    c = []
    while len(a) >=  and len(b) >= :
        if a[] <= b[]: 
            c.append(a[])
            a.pop()
        else:
            c.append(b[])
            b.pop()
    if len(a) == : c += b
    if len(b) ==  : c += a
    return c",#sort,4,1718,"['def', 'mergesort', 'a', 'if', 'len', 'a', 'return', 'a', 'm', 'len', 'a', 'half', 'a', 'm', 'half', 'a', 'm', 'return', 'merge', 'mergesort', 'half', 'mergesort', 'half', 'def', 'merge', 'a', 'b', 'c', 'while', 'len', 'a', 'and', 'len', 'b', 'if', 'a', 'b', 'c', 'append', 'a', 'a', 'pop', 'else', 'c', 'append', 'b', 'b', 'pop', 'if', 'len', 'a', 'c', 'b', 'if', 'len', 'b', 'c', 'a', 'return', 'c']","['def', 'mergesort', 'a', 'if', 'len', 'a', 'return', 'a', 'm', 'len', 'a', 'half', 'a', 'm', 'half', 'a', 'm', 'return', 'merg', 'mergesort', 'half', 'mergesort', 'half', 'def', 'merg', 'a', 'b', 'c', 'while', 'len', 'a', 'and', 'len', 'b', 'if', 'a', 'b', 'c', 'append', 'a', 'a', 'pop', 'els', 'c', 'append', 'b', 'b', 'pop', 'if', 'len', 'a', 'c', 'b', 'if', 'len', 'b', 'c', 'a', 'return', 'c']","['def', 'mergesort', 'len', 'return', 'len', 'half', 'half', 'return', 'merg', 'mergesort', 'half', 'mergesort', 'half', 'def', 'merg', 'b', 'c', 'len', 'len', 'b', 'b', 'c', 'append', 'pop', 'els', 'c', 'append', 'b', 'b', 'pop', 'len', 'c', 'b', 'len', 'b', 'c', 'return', 'c']",def mergesort len return len half half return merg mergesort half mergesort half def merg b c len len b b c append pop els c append b b pop len c b len b c return c,sortingalgorithms,CS,CS110
87824,"def merge(left, right):
    countsteps = 
    sort = []
    i, j = , 
    countsteps +=
    while (len(sort) < len(left) + len(right)):
        countsteps += 
        if left[i] < right[j]:
            sort.append(left[i])
            i+= 
            countsteps += 
        else:
            sort.append(right[j])
            j+= 
            countsteps += 
        if i == len(left) or j == len(right):
            sort.extend(left[i:] or right[j:])
            countsteps += 
            break
    return sort, countsteps

def mergesort(l):
    countsteps = 
    if len(l) < :",#sort,4,1718,"['def', 'merge', 'left', 'right', 'countsteps', 'sort', 'i', 'j', 'countsteps', 'while', 'len', 'sort', 'len', 'left', 'len', 'right', 'countsteps', 'if', 'left', 'i', 'right', 'j', 'sort', 'append', 'left', 'i', 'i', 'countsteps', 'else', 'sort', 'append', 'right', 'j', 'j', 'countsteps', 'if', 'i', 'len', 'left', 'or', 'j', 'len', 'right', 'sort', 'extend', 'left', 'i', 'or', 'right', 'j', 'countsteps', 'break', 'return', 'sort', 'countsteps', 'def', 'mergesort', 'l', 'countsteps', 'if', 'len', 'l']","['def', 'merg', 'left', 'right', 'countstep', 'sort', 'i', 'j', 'countstep', 'while', 'len', 'sort', 'len', 'left', 'len', 'right', 'countstep', 'if', 'left', 'i', 'right', 'j', 'sort', 'append', 'left', 'i', 'i', 'countstep', 'els', 'sort', 'append', 'right', 'j', 'j', 'countstep', 'if', 'i', 'len', 'left', 'or', 'j', 'len', 'right', 'sort', 'extend', 'left', 'i', 'or', 'right', 'j', 'countstep', 'break', 'return', 'sort', 'countstep', 'def', 'mergesort', 'l', 'countstep', 'if', 'len', 'l']","['def', 'merg', 'left', 'right', 'countstep', 'sort', 'j', 'countstep', 'len', 'sort', 'len', 'left', 'len', 'right', 'countstep', 'left', 'right', 'j', 'sort', 'append', 'left', 'countstep', 'els', 'sort', 'append', 'right', 'j', 'j', 'countstep', 'len', 'left', 'j', 'len', 'right', 'sort', 'extend', 'left', 'right', 'j', 'countstep', 'break', 'return', 'sort', 'countstep', 'def', 'mergesort', 'l', 'countstep', 'len', 'l']",def merg left right countstep sort j countstep len sort len left len right countstep left right j sort append left countstep els sort append right j j countstep len left j len right sort extend left right j countstep break return sort countstep def mergesort l countstep len l,sortingalgorithms,CS,CS110
87824,"def merging(left, right):
	result = []
	i, j = , 
	while (len(result) < len(left) + len(right)):
		if left[i] < right[j]:
			result.append(left[i])
			i+= 
		else:
			result.append(right[j])
			j+= 
		if i == len(left) or j == len(right):
			result.extend(left[i:] or right[j:])
			break 
	return result
#professor I sincerely apologize but I couldn't finish the code in time as I struggled to understand it, please allow me to send an email with the complete code by today. I understand if you can't grade the work.",#sort,2,1718,"['def', 'merging', 'left', 'right', 'result', 'i', 'j', 'while', 'len', 'result', 'len', 'left', 'len', 'right', 'if', 'left', 'i', 'right', 'j', 'result', 'append', 'left', 'i', 'i', 'else', 'result', 'append', 'right', 'j', 'j', 'if', 'i', 'len', 'left', 'or', 'j', 'len', 'right', 'result', 'extend', 'left', 'i', 'or', 'right', 'j', 'break', 'return', 'result', 'professor', 'I', 'sincerely', 'apologize', 'but', 'I', ""couldn't"", 'finish', 'the', 'code', 'in', 'time', 'as', 'I', 'struggled', 'to', 'understand', 'it', 'please', 'allow', 'me', 'to', 'send', 'an', 'email', 'with', 'the', 'complete', 'code', 'by', 'today', 'I', 'understand', 'if', 'you', ""can't"", 'grade', 'the', 'work']","['def', 'merg', 'left', 'right', 'result', 'i', 'j', 'while', 'len', 'result', 'len', 'left', 'len', 'right', 'if', 'left', 'i', 'right', 'j', 'result', 'append', 'left', 'i', 'i', 'els', 'result', 'append', 'right', 'j', 'j', 'if', 'i', 'len', 'left', 'or', 'j', 'len', 'right', 'result', 'extend', 'left', 'i', 'or', 'right', 'j', 'break', 'return', 'result', 'professor', 'i', 'sincer', 'apolog', 'but', 'i', ""couldn't"", 'finish', 'the', 'code', 'in', 'time', 'as', 'i', 'struggl', 'to', 'understand', 'it', 'pleas', 'allow', 'me', 'to', 'send', 'an', 'email', 'with', 'the', 'complet', 'code', 'by', 'today', 'i', 'understand', 'if', 'you', ""can't"", 'grade', 'the', 'work']","['def', 'merg', 'left', 'right', 'result', 'j', 'len', 'result', 'len', 'left', 'len', 'right', 'left', 'right', 'j', 'result', 'append', 'left', 'els', 'result', 'append', 'right', 'j', 'j', 'len', 'left', 'j', 'len', 'right', 'result', 'extend', 'left', 'right', 'j', 'break', 'return', 'result', 'professor', 'sincer', 'apolog', 'finish', 'code', 'time', 'struggl', 'understand', 'pleas', 'allow', 'send', 'email', 'complet', 'code', 'today', 'understand', ""can't"", 'grade', 'work']",def merg left right result j len result len left len right left right j result append left els result append right j j len left j len right result extend left right j break return result professor sincer apolog finish code time struggl understand pleas allow send email complet code today understand can't grade work,sortingalgorithms,CS,CS110
87830,"def MergeSort(list):
	def switch(list,i,j):
		k=list[i]
		list[i]=list[j]
		list[j]=k
	def replace(list,i,j,result):
		for k in range(,len(result)):
			list[i+k]=result[k]
	def SubMerge(list,i,j):
		if j-i>:
			SubMerge(list,i,(j+i)/)
			SubMerge(list,(j+i)/+,j)
		elif j-i==:
			if list[i]>list[j]: switch(list,i,j)
		m=i
		n=j
		result=[]
		while (m<=j)&(n<=len(list)):
			if list[m]<list[n]:
				result.append(list[m])
				m+=
			else:
				result.append(list[n])
				n+=
		replace(list,i,j,result)
	return SubMerge(list,,len(list))",#sort,4,1721,"['def', 'MergeSort', 'list', 'def', 'switch', 'list', 'i', 'j', 'k', 'list', 'i', 'list', 'i', 'list', 'j', 'list', 'j', 'k', 'def', 'replace', 'list', 'i', 'j', 'result', 'for', 'k', 'in', 'range', 'len', 'result', 'list', 'i', 'k', 'result', 'k', 'def', 'SubMerge', 'list', 'i', 'j', 'if', 'j', 'i', 'SubMerge', 'list', 'i', 'j', 'i', 'SubMerge', 'list', 'j', 'i', 'j', 'elif', 'j', 'i', 'if', 'list', 'i', 'list', 'j', 'switch', 'list', 'i', 'j', 'm', 'i', 'n', 'j', 'result', 'while', 'm', 'j', 'n', 'len', 'list', 'if', 'list', 'm', 'list', 'n', 'result', 'append', 'list', 'm', 'm', 'else', 'result', 'append', 'list', 'n', 'n', 'replace', 'list', 'i', 'j', 'result', 'return', 'SubMerge', 'list', 'len', 'list']","['def', 'mergesort', 'list', 'def', 'switch', 'list', 'i', 'j', 'k', 'list', 'i', 'list', 'i', 'list', 'j', 'list', 'j', 'k', 'def', 'replac', 'list', 'i', 'j', 'result', 'for', 'k', 'in', 'rang', 'len', 'result', 'list', 'i', 'k', 'result', 'k', 'def', 'submerg', 'list', 'i', 'j', 'if', 'j', 'i', 'submerg', 'list', 'i', 'j', 'i', 'submerg', 'list', 'j', 'i', 'j', 'elif', 'j', 'i', 'if', 'list', 'i', 'list', 'j', 'switch', 'list', 'i', 'j', 'm', 'i', 'n', 'j', 'result', 'while', 'm', 'j', 'n', 'len', 'list', 'if', 'list', 'm', 'list', 'n', 'result', 'append', 'list', 'm', 'm', 'els', 'result', 'append', 'list', 'n', 'n', 'replac', 'list', 'i', 'j', 'result', 'return', 'submerg', 'list', 'len', 'list']","['def', 'mergesort', 'list', 'def', 'switch', 'list', 'j', 'k', 'list', 'list', 'list', 'j', 'list', 'j', 'k', 'def', 'replac', 'list', 'j', 'result', 'k', 'rang', 'len', 'result', 'list', 'k', 'result', 'k', 'def', 'submerg', 'list', 'j', 'j', 'submerg', 'list', 'j', 'submerg', 'list', 'j', 'j', 'elif', 'j', 'list', 'list', 'j', 'switch', 'list', 'j', 'n', 'j', 'result', 'j', 'n', 'len', 'list', 'list', 'list', 'n', 'result', 'append', 'list', 'els', 'result', 'append', 'list', 'n', 'n', 'replac', 'list', 'j', 'result', 'return', 'submerg', 'list', 'len', 'list']",def mergesort list def switch list j k list list list j list j k def replac list j result k rang len result list k result k def submerg list j j submerg list j submerg list j j elif j list list j switch list j n j result j n len list list list n result append list els result append list n n replac list j result return submerg list len list,sortingalgorithms,CS,CS110
87830,"def merge(left, right):
    result = []
    i, j = , 
    while (len(result) < len(left) + len(right)):
        if left[i] < right[j]:
            result.append(left[i])
            i+= 
        else:
            result.append(right[j])
            j += 
        if i == len(left) or j == len(right):
            result.extend(left[i:] or right[j:])
            break 
    return result

def mergesort(list):
    if len(list) < :
        return list
    middle = len(list)/
    left = mergesort(list[:middle])
    right = mergesort(list[middle:])
    return merge(left, right)",#sort,4,1721,"['def', 'merge', 'left', 'right', 'result', 'i', 'j', 'while', 'len', 'result', 'len', 'left', 'len', 'right', 'if', 'left', 'i', 'right', 'j', 'result', 'append', 'left', 'i', 'i', 'else', 'result', 'append', 'right', 'j', 'j', 'if', 'i', 'len', 'left', 'or', 'j', 'len', 'right', 'result', 'extend', 'left', 'i', 'or', 'right', 'j', 'break', 'return', 'result', 'def', 'mergesort', 'list', 'if', 'len', 'list', 'return', 'list', 'middle', 'len', 'list', 'left', 'mergesort', 'list', 'middle', 'right', 'mergesort', 'list', 'middle', 'return', 'merge', 'left', 'right']","['def', 'merg', 'left', 'right', 'result', 'i', 'j', 'while', 'len', 'result', 'len', 'left', 'len', 'right', 'if', 'left', 'i', 'right', 'j', 'result', 'append', 'left', 'i', 'i', 'els', 'result', 'append', 'right', 'j', 'j', 'if', 'i', 'len', 'left', 'or', 'j', 'len', 'right', 'result', 'extend', 'left', 'i', 'or', 'right', 'j', 'break', 'return', 'result', 'def', 'mergesort', 'list', 'if', 'len', 'list', 'return', 'list', 'middl', 'len', 'list', 'left', 'mergesort', 'list', 'middl', 'right', 'mergesort', 'list', 'middl', 'return', 'merg', 'left', 'right']","['def', 'merg', 'left', 'right', 'result', 'j', 'len', 'result', 'len', 'left', 'len', 'right', 'left', 'right', 'j', 'result', 'append', 'left', 'els', 'result', 'append', 'right', 'j', 'j', 'len', 'left', 'j', 'len', 'right', 'result', 'extend', 'left', 'right', 'j', 'break', 'return', 'result', 'def', 'mergesort', 'list', 'len', 'list', 'return', 'list', 'middl', 'len', 'list', 'left', 'mergesort', 'list', 'middl', 'right', 'mergesort', 'list', 'middl', 'return', 'merg', 'left', 'right']",def merg left right result j len result len left len right left right j result append left els result append right j j len left j len right result extend left right j break return result def mergesort list len list return list middl len list left mergesort list middl right mergesort list middl return merg left right,sortingalgorithms,CS,CS110
90383,"def max_heapify(a, i):
    if i == :
        l = 
        r = 
    else:
        l = *i - 
        r = *i
    if l < len(a) and a[l] > a[i]:
        largest = l
    else:
        largest = i
    if r < len(a) and a[r] > a[largest]:
        largest = r
    if largest != i:
        a[i], a[largest] = a[largest], a[i]
        max_heapify(a, largest)",#sort,4,1898,"['def', 'max_heapify', 'a', 'i', 'if', 'i', 'l', 'r', 'else', 'l', 'i', 'r', 'i', 'if', 'l', 'len', 'a', 'and', 'a', 'l', 'a', 'i', 'largest', 'l', 'else', 'largest', 'i', 'if', 'r', 'len', 'a', 'and', 'a', 'r', 'a', 'largest', 'largest', 'r', 'if', 'largest', 'i', 'a', 'i', 'a', 'largest', 'a', 'largest', 'a', 'i', 'max_heapify', 'a', 'largest']","['def', 'max_heapifi', 'a', 'i', 'if', 'i', 'l', 'r', 'els', 'l', 'i', 'r', 'i', 'if', 'l', 'len', 'a', 'and', 'a', 'l', 'a', 'i', 'largest', 'l', 'els', 'largest', 'i', 'if', 'r', 'len', 'a', 'and', 'a', 'r', 'a', 'largest', 'largest', 'r', 'if', 'largest', 'i', 'a', 'i', 'a', 'largest', 'a', 'largest', 'a', 'i', 'max_heapifi', 'a', 'largest']","['def', 'max_heapifi', 'l', 'r', 'els', 'l', 'r', 'l', 'len', 'l', 'largest', 'l', 'els', 'largest', 'r', 'len', 'r', 'largest', 'largest', 'r', 'largest', 'largest', 'largest', 'max_heapifi', 'largest']",def max_heapifi l r els l r l len l largest l els largest r len r largest largest r largest largest largest max_heapifi largest,sortingalgorithms,CS,CS110
90383,"def heapify(array, start, end, cmp): # array is almost a heap (except the root)root = start
    while root *  +  < end:
        child = root *  + 
        if child +  < end:
            v, k = cmp((array[root], root), (array[child], child), (array[child + ], child + ))
        else:v, k = cmp((array[root], root), (array[child], child))
        if not k == root:array[root], array[k] = array[k], array[root]root = kelse:
            break
def build_heap_max(array):
    length = len(array)
    for i in range(length // , -, -):
        heapify(array, i, length, max)",#sort,4,1898,"['def', 'heapify', 'array', 'start', 'end', 'cmp', 'array', 'is', 'almost', 'a', 'heap', 'except', 'the', 'root', 'root', 'start', 'while', 'root', 'end', 'child', 'root', 'if', 'child', 'end', 'v', 'k', 'cmp', 'array', 'root', 'root', 'array', 'child', 'child', 'array', 'child', 'child', 'else', 'v', 'k', 'cmp', 'array', 'root', 'root', 'array', 'child', 'child', 'if', 'not', 'k', 'root', 'array', 'root', 'array', 'k', 'array', 'k', 'array', 'root', 'root', 'kelse', 'break', 'def', 'build_heap_max', 'array', 'length', 'len', 'array', 'for', 'i', 'in', 'range', 'length', 'heapify', 'array', 'i', 'length', 'max']","['def', 'heapifi', 'array', 'start', 'end', 'cmp', 'array', 'is', 'almost', 'a', 'heap', 'except', 'the', 'root', 'root', 'start', 'while', 'root', 'end', 'child', 'root', 'if', 'child', 'end', 'v', 'k', 'cmp', 'array', 'root', 'root', 'array', 'child', 'child', 'array', 'child', 'child', 'els', 'v', 'k', 'cmp', 'array', 'root', 'root', 'array', 'child', 'child', 'if', 'not', 'k', 'root', 'array', 'root', 'array', 'k', 'array', 'k', 'array', 'root', 'root', 'kels', 'break', 'def', 'build_heap_max', 'array', 'length', 'len', 'array', 'for', 'i', 'in', 'rang', 'length', 'heapifi', 'array', 'i', 'length', 'max']","['def', 'heapifi', 'array', 'start', 'end', 'cmp', 'array', 'almost', 'heap', 'except', 'root', 'root', 'start', 'root', 'end', 'child', 'root', 'child', 'end', 'v', 'k', 'cmp', 'array', 'root', 'root', 'array', 'child', 'child', 'array', 'child', 'child', 'els', 'v', 'k', 'cmp', 'array', 'root', 'root', 'array', 'child', 'child', 'k', 'root', 'array', 'root', 'array', 'k', 'array', 'k', 'array', 'root', 'root', 'kels', 'break', 'def', 'build_heap_max', 'array', 'length', 'len', 'array', 'rang', 'length', 'heapifi', 'array', 'length', 'max']",def heapifi array start end cmp array almost heap except root root start root end child root child end v k cmp array root root array child child array child child els v k cmp array root root array child child k root array root array k array k array root root kels break def build_heap_max array length len array rang length heapifi array length max,sortingalgorithms,CS,CS110
96408,"def ppopp(heaap):
    if len[heap] == :
        raise ""Index Error""
    else:
        heaap[], heaap[-] = heaap[-], heaap[]
        pop(heap)
        return sorted(heaap)",#sort,2,2655,"['def', 'ppopp', 'heaap', 'if', 'len', 'heap', 'raise', 'Index', 'Error', 'else', 'heaap', 'heaap', 'heaap', 'heaap', 'pop', 'heap', 'return', 'sorted', 'heaap']","['def', 'ppopp', 'heaap', 'if', 'len', 'heap', 'rais', 'index', 'error', 'els', 'heaap', 'heaap', 'heaap', 'heaap', 'pop', 'heap', 'return', 'sort', 'heaap']","['def', 'ppopp', 'heaap', 'len', 'heap', 'rais', 'index', 'error', 'els', 'heaap', 'heaap', 'heaap', 'heaap', 'pop', 'heap', 'return', 'sort', 'heaap']",def ppopp heaap len heap rais index error els heaap heaap heaap heaap pop heap return sort heaap,sortingalgorithms,CS,CS110
96415,"def heappop(heap):
    ret = heap[]
    last = heap.pop()
    size = len(heap)
    if size == :
        return ret
    heap[] = last
    cur = 
    while True:
        ch =  * cur + 
        if ch >= size:
            return ret
        ch = ch + 
        child = ch if ch < size and heap[ch] < heap[ch] else ch
        if heap[cur] <= heap[child]:
            return ret
        heap[child], heap[cur] = heap[cur], heap[child]
        cur = child",#sort,4,2658,"['def', 'heappop', 'heap', 'ret', 'heap', 'last', 'heap', 'pop', 'size', 'len', 'heap', 'if', 'size', 'return', 'ret', 'heap', 'last', 'cur', 'while', 'True', 'ch', 'cur', 'if', 'ch', 'size', 'return', 'ret', 'ch', 'ch', 'child', 'ch', 'if', 'ch', 'size', 'and', 'heap', 'ch', 'heap', 'ch', 'else', 'ch', 'if', 'heap', 'cur', 'heap', 'child', 'return', 'ret', 'heap', 'child', 'heap', 'cur', 'heap', 'cur', 'heap', 'child', 'cur', 'child']","['def', 'heappop', 'heap', 'ret', 'heap', 'last', 'heap', 'pop', 'size', 'len', 'heap', 'if', 'size', 'return', 'ret', 'heap', 'last', 'cur', 'while', 'true', 'ch', 'cur', 'if', 'ch', 'size', 'return', 'ret', 'ch', 'ch', 'child', 'ch', 'if', 'ch', 'size', 'and', 'heap', 'ch', 'heap', 'ch', 'els', 'ch', 'if', 'heap', 'cur', 'heap', 'child', 'return', 'ret', 'heap', 'child', 'heap', 'cur', 'heap', 'cur', 'heap', 'child', 'cur', 'child']","['def', 'heappop', 'heap', 'ret', 'heap', 'last', 'heap', 'pop', 'size', 'len', 'heap', 'size', 'return', 'ret', 'heap', 'last', 'cur', 'true', 'ch', 'cur', 'ch', 'size', 'return', 'ret', 'ch', 'ch', 'child', 'ch', 'ch', 'size', 'heap', 'ch', 'heap', 'ch', 'els', 'ch', 'heap', 'cur', 'heap', 'child', 'return', 'ret', 'heap', 'child', 'heap', 'cur', 'heap', 'cur', 'heap', 'child', 'cur', 'child']",def heappop heap ret heap last heap pop size len heap size return ret heap last cur true ch cur ch size return ret ch ch child ch ch size heap ch heap ch els ch heap cur heap child return ret heap child heap cur heap cur heap child cur child,sortingalgorithms,CS,CS110
96415,"def heappop_me(h):
    if len(h) == :
        return 'error'
    small = h[]
    h = h[:]
    return small",#sort,2,2658,"['def', 'heappop_me', 'h', 'if', 'len', 'h', 'return', ""'error'"", 'small', 'h', 'h', 'h', 'return', 'small']","['def', 'heappop_m', 'h', 'if', 'len', 'h', 'return', 'error', 'small', 'h', 'h', 'h', 'return', 'small']","['def', 'heappop_m', 'h', 'len', 'h', 'return', 'error', 'small', 'h', 'h', 'h', 'return', 'small']",def heappop_m h len h return error small h h h return small,sortingalgorithms,CS,CS110
96415,"def heappop(heap):
    ret = heap[]
    last = heap.pop()
    size = len(heap)
    if size == : return ret
    heap[] = last
    cur = 
    while True:
        ch =  * cur + 
        if ch >= size: return ret
        ch = ch + 
        child = ch if ch < size and heap[ch] < heap[ch] else ch
        if heap[cur] <= heap[child]: return ret
        heap[child], heap[cur] = heap[cur], heap[child]
        cur = child
        pass
    pass",#sort,4,2658,"['def', 'heappop', 'heap', 'ret', 'heap', 'last', 'heap', 'pop', 'size', 'len', 'heap', 'if', 'size', 'return', 'ret', 'heap', 'last', 'cur', 'while', 'True', 'ch', 'cur', 'if', 'ch', 'size', 'return', 'ret', 'ch', 'ch', 'child', 'ch', 'if', 'ch', 'size', 'and', 'heap', 'ch', 'heap', 'ch', 'else', 'ch', 'if', 'heap', 'cur', 'heap', 'child', 'return', 'ret', 'heap', 'child', 'heap', 'cur', 'heap', 'cur', 'heap', 'child', 'cur', 'child', 'pass', 'pass']","['def', 'heappop', 'heap', 'ret', 'heap', 'last', 'heap', 'pop', 'size', 'len', 'heap', 'if', 'size', 'return', 'ret', 'heap', 'last', 'cur', 'while', 'true', 'ch', 'cur', 'if', 'ch', 'size', 'return', 'ret', 'ch', 'ch', 'child', 'ch', 'if', 'ch', 'size', 'and', 'heap', 'ch', 'heap', 'ch', 'els', 'ch', 'if', 'heap', 'cur', 'heap', 'child', 'return', 'ret', 'heap', 'child', 'heap', 'cur', 'heap', 'cur', 'heap', 'child', 'cur', 'child', 'pass', 'pass']","['def', 'heappop', 'heap', 'ret', 'heap', 'last', 'heap', 'pop', 'size', 'len', 'heap', 'size', 'return', 'ret', 'heap', 'last', 'cur', 'true', 'ch', 'cur', 'ch', 'size', 'return', 'ret', 'ch', 'ch', 'child', 'ch', 'ch', 'size', 'heap', 'ch', 'heap', 'ch', 'els', 'ch', 'heap', 'cur', 'heap', 'child', 'return', 'ret', 'heap', 'child', 'heap', 'cur', 'heap', 'cur', 'heap', 'child', 'cur', 'child', 'pass', 'pass']",def heappop heap ret heap last heap pop size len heap size return ret heap last cur true ch cur ch size return ret ch ch child ch ch size heap ch heap ch els ch heap cur heap child return ret heap child heap cur heap cur heap child cur child pass pass,sortingalgorithms,CS,CS110
96452,"def Partition(array, start, end):
    pvt = array[end] # choose pivot to be last elem
    i = start - 
    for j in range(start, end):
        if array[j] <= pvt:
            i += 
            array[i], array[j] =  array[j], array[i]
    array[i + ], array[end] = array[end], array[i+]
    return i + 

def QuickSortInPlace(array, start = , end = None):
    if end == None:
        end = len(array) - 
    if start < end:
        pv = Partition(array, start, end)
        QuickSortInPlace(array, start, pv - )
        QuickSortInPlace(array, pv + , end)",#sort,4,2673,"['def', 'Partition', 'array', 'start', 'end', 'pvt', 'array', 'end', 'choose', 'pivot', 'to', 'be', 'last', 'elem', 'i', 'start', 'for', 'j', 'in', 'range', 'start', 'end', 'if', 'array', 'j', 'pvt', 'i', 'array', 'i', 'array', 'j', 'array', 'j', 'array', 'i', 'array', 'i', 'array', 'end', 'array', 'end', 'array', 'i', 'return', 'i', 'def', 'QuickSortInPlace', 'array', 'start', 'end', 'None', 'if', 'end', 'None', 'end', 'len', 'array', 'if', 'start', 'end', 'pv', 'Partition', 'array', 'start', 'end', 'QuickSortInPlace', 'array', 'start', 'pv', 'QuickSortInPlace', 'array', 'pv', 'end']","['def', 'partit', 'array', 'start', 'end', 'pvt', 'array', 'end', 'choos', 'pivot', 'to', 'be', 'last', 'elem', 'i', 'start', 'for', 'j', 'in', 'rang', 'start', 'end', 'if', 'array', 'j', 'pvt', 'i', 'array', 'i', 'array', 'j', 'array', 'j', 'array', 'i', 'array', 'i', 'array', 'end', 'array', 'end', 'array', 'i', 'return', 'i', 'def', 'quicksortinplac', 'array', 'start', 'end', 'none', 'if', 'end', 'none', 'end', 'len', 'array', 'if', 'start', 'end', 'pv', 'partit', 'array', 'start', 'end', 'quicksortinplac', 'array', 'start', 'pv', 'quicksortinplac', 'array', 'pv', 'end']","['def', 'partit', 'array', 'start', 'end', 'pvt', 'array', 'end', 'choos', 'pivot', 'last', 'elem', 'start', 'j', 'rang', 'start', 'end', 'array', 'j', 'pvt', 'array', 'array', 'j', 'array', 'j', 'array', 'array', 'array', 'end', 'array', 'end', 'array', 'return', 'def', 'quicksortinplac', 'array', 'start', 'end', 'none', 'end', 'none', 'end', 'len', 'array', 'start', 'end', 'pv', 'partit', 'array', 'start', 'end', 'quicksortinplac', 'array', 'start', 'pv', 'quicksortinplac', 'array', 'pv', 'end']",def partit array start end pvt array end choos pivot last elem start j rang start end array j pvt array array j array j array array array end array end array return def quicksortinplac array start end none end none end len array start end pv partit array start end quicksortinplac array start pv quicksortinplac array pv end,sortingalgorithms,CS,CS110
96452,"def quicksort_elegant(x):
    if len(x) ==  or len(x) == :
        return x
    else:
        pivot = x[]
        i = 
        for j in range(len(x)-):
            if x[j+] < pivot:
                x[j+],x[i+] = x[i+], x[j+]
                i += 
        x[],x[i] = x[i],x[]
        first_part = quicksort_elegant(x[:i])
        second_part = quicksort_elegant(x[i+:])
        first_part.append(x[i])
        return first_part + second_part",#sort,4,2673,"['def', 'quicksort_elegant', 'x', 'if', 'len', 'x', 'or', 'len', 'x', 'return', 'x', 'else', 'pivot', 'x', 'i', 'for', 'j', 'in', 'range', 'len', 'x', 'if', 'x', 'j', 'pivot', 'x', 'j', 'x', 'i', 'x', 'i', 'x', 'j', 'i', 'x', 'x', 'i', 'x', 'i', 'x', 'first_part', 'quicksort_elegant', 'x', 'i', 'second_part', 'quicksort_elegant', 'x', 'i', 'first_part', 'append', 'x', 'i', 'return', 'first_part', 'second_part']","['def', 'quicksort_eleg', 'x', 'if', 'len', 'x', 'or', 'len', 'x', 'return', 'x', 'els', 'pivot', 'x', 'i', 'for', 'j', 'in', 'rang', 'len', 'x', 'if', 'x', 'j', 'pivot', 'x', 'j', 'x', 'i', 'x', 'i', 'x', 'j', 'i', 'x', 'x', 'i', 'x', 'i', 'x', 'first_part', 'quicksort_eleg', 'x', 'i', 'second_part', 'quicksort_eleg', 'x', 'i', 'first_part', 'append', 'x', 'i', 'return', 'first_part', 'second_part']","['def', 'quicksort_eleg', 'x', 'len', 'x', 'len', 'x', 'return', 'x', 'els', 'pivot', 'x', 'j', 'rang', 'len', 'x', 'x', 'j', 'pivot', 'x', 'j', 'x', 'x', 'x', 'j', 'x', 'x', 'x', 'x', 'first_part', 'quicksort_eleg', 'x', 'second_part', 'quicksort_eleg', 'x', 'first_part', 'append', 'x', 'return', 'first_part', 'second_part']",def quicksort_eleg x len x len x return x els pivot x j rang len x x j pivot x j x x x j x x x x first_part quicksort_eleg x second_part quicksort_eleg x first_part append x return first_part second_part,sortingalgorithms,CS,CS110
96452,"def quicksort(array):
    less = []
    equal = []
    greater = []

    if len(array) > :
        pivot = array[]
        for x in array:
            if x < pivot:
                less.append(x)
            if x == pivot:
                equal.append(x)
            if x > pivot:
                greater.append(x)
        return quicksort(less)+equal+quicksort(greater) 
    else:
        return array",#sort,4,2673,"['def', 'quicksort', 'array', 'less', 'equal', 'greater', 'if', 'len', 'array', 'pivot', 'array', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'less', 'append', 'x', 'if', 'x', 'pivot', 'equal', 'append', 'x', 'if', 'x', 'pivot', 'greater', 'append', 'x', 'return', 'quicksort', 'less', 'equal', 'quicksort', 'greater', 'else', 'return', 'array']","['def', 'quicksort', 'array', 'less', 'equal', 'greater', 'if', 'len', 'array', 'pivot', 'array', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'less', 'append', 'x', 'if', 'x', 'pivot', 'equal', 'append', 'x', 'if', 'x', 'pivot', 'greater', 'append', 'x', 'return', 'quicksort', 'less', 'equal', 'quicksort', 'greater', 'els', 'return', 'array']","['def', 'quicksort', 'array', 'less', 'equal', 'greater', 'len', 'array', 'pivot', 'array', 'x', 'array', 'x', 'pivot', 'less', 'append', 'x', 'x', 'pivot', 'equal', 'append', 'x', 'x', 'pivot', 'greater', 'append', 'x', 'return', 'quicksort', 'less', 'equal', 'quicksort', 'greater', 'els', 'return', 'array']",def quicksort array less equal greater len array pivot array x array x pivot less append x x pivot equal append x x pivot greater append x return quicksort less equal quicksort greater els return array,sortingalgorithms,CS,CS110
96452,"def quicksort(array, start = , end = None):
    if end == None:
        end = len(array) - 
    if start < end:
        pivot = partition(array, start, end)
        quicksort(array, start, pivot - )
        quicksort(array, pivot + , end)

        
def partition(array, start, end):
    x = array[end]
    i = start - 
    for j in range(start, end):
        if array[j] <= x:
            i += 
            array[i], array[j] =  array[j], array[i]
    array[i + ], array[end] = array[end], array[i+]
    return i + ",#sort,4,2673,"['def', 'quicksort', 'array', 'start', 'end', 'None', 'if', 'end', 'None', 'end', 'len', 'array', 'if', 'start', 'end', 'pivot', 'partition', 'array', 'start', 'end', 'quicksort', 'array', 'start', 'pivot', 'quicksort', 'array', 'pivot', 'end', 'def', 'partition', 'array', 'start', 'end', 'x', 'array', 'end', 'i', 'start', 'for', 'j', 'in', 'range', 'start', 'end', 'if', 'array', 'j', 'x', 'i', 'array', 'i', 'array', 'j', 'array', 'j', 'array', 'i', 'array', 'i', 'array', 'end', 'array', 'end', 'array', 'i', 'return', 'i']","['def', 'quicksort', 'array', 'start', 'end', 'none', 'if', 'end', 'none', 'end', 'len', 'array', 'if', 'start', 'end', 'pivot', 'partit', 'array', 'start', 'end', 'quicksort', 'array', 'start', 'pivot', 'quicksort', 'array', 'pivot', 'end', 'def', 'partit', 'array', 'start', 'end', 'x', 'array', 'end', 'i', 'start', 'for', 'j', 'in', 'rang', 'start', 'end', 'if', 'array', 'j', 'x', 'i', 'array', 'i', 'array', 'j', 'array', 'j', 'array', 'i', 'array', 'i', 'array', 'end', 'array', 'end', 'array', 'i', 'return', 'i']","['def', 'quicksort', 'array', 'start', 'end', 'none', 'end', 'none', 'end', 'len', 'array', 'start', 'end', 'pivot', 'partit', 'array', 'start', 'end', 'quicksort', 'array', 'start', 'pivot', 'quicksort', 'array', 'pivot', 'end', 'def', 'partit', 'array', 'start', 'end', 'x', 'array', 'end', 'start', 'j', 'rang', 'start', 'end', 'array', 'j', 'x', 'array', 'array', 'j', 'array', 'j', 'array', 'array', 'array', 'end', 'array', 'end', 'array', 'return']",def quicksort array start end none end none end len array start end pivot partit array start end quicksort array start pivot quicksort array pivot end def partit array start end x array end start j rang start end array j x array array j array j array array array end array end array return,sortingalgorithms,CS,CS110
96452,"import random
import time 
start_time = time.time()

def elegant_d_quicksort(array):
    if len(array) < :
        return array
    pivot = array[]
    left = [x for x in array if x < pivot]
    middle = [x for x in array if x == pivot]
    right = [x for x in array if x > pivot]
    return elegant_d_quicksort(left) + middle + elegant_d_quicksort(right)

array = [random.random() for a in range()]
elegant_d_quicksort(array)
print(""%s seconds"" % (time.time() - start_time))",#sort,4,2673,"['import', 'random', 'import', 'time', 'start_time', 'time', 'time', 'def', 'elegant_d_quicksort', 'array', 'if', 'len', 'array', 'return', 'array', 'pivot', 'array', 'left', 'x', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'middle', 'x', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'right', 'x', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'return', 'elegant_d_quicksort', 'left', 'middle', 'elegant_d_quicksort', 'right', 'array', 'random', 'random', 'for', 'a', 'in', 'range', 'elegant_d_quicksort', 'array', 'print', 's', 'seconds', 'time', 'time', 'start_time']","['import', 'random', 'import', 'time', 'start_tim', 'time', 'time', 'def', 'elegant_d_quicksort', 'array', 'if', 'len', 'array', 'return', 'array', 'pivot', 'array', 'left', 'x', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'middl', 'x', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'right', 'x', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'return', 'elegant_d_quicksort', 'left', 'middl', 'elegant_d_quicksort', 'right', 'array', 'random', 'random', 'for', 'a', 'in', 'rang', 'elegant_d_quicksort', 'array', 'print', 's', 'second', 'time', 'time', 'start_tim']","['import', 'random', 'import', 'time', 'start_tim', 'time', 'time', 'def', 'elegant_d_quicksort', 'array', 'len', 'array', 'return', 'array', 'pivot', 'array', 'left', 'x', 'x', 'array', 'x', 'pivot', 'middl', 'x', 'x', 'array', 'x', 'pivot', 'right', 'x', 'x', 'array', 'x', 'pivot', 'return', 'elegant_d_quicksort', 'left', 'middl', 'elegant_d_quicksort', 'right', 'array', 'random', 'random', 'rang', 'elegant_d_quicksort', 'array', 'print', 'second', 'time', 'time', 'start_tim']",import random import time start_tim time time def elegant_d_quicksort array len array return array pivot array left x x array x pivot middl x x array x pivot right x x array x pivot return elegant_d_quicksort left middl elegant_d_quicksort right array random random rang elegant_d_quicksort array print second time time start_tim,sortingalgorithms,CS,CS110
96457,"import numpy as np
import random

lst = [,,,,,,,,,]

array = random.shuffle(lst)
ln = len(array)-
z = random.randint(,ln)


def quicksort(array): 
    pivot = array[z]    
    left = []
    middle = []
    right = []
    for x in array:
        if x < pivot
        left.append(x)
        if x == pivot
        middle.append(x)
        if x > pivot
        right.append(x)
        quicksort(left)
        quicksort(right)
sorted_array = left.append(middle).append(right)
print sorted_array",#sort,2,2676,"['import', 'numpy', 'as', 'np', 'import', 'random', 'lst', 'array', 'random', 'shuffle', 'lst', 'ln', 'len', 'array', 'z', 'random', 'randint', 'ln', 'def', 'quicksort', 'array', 'pivot', 'array', 'z', 'left', 'middle', 'right', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'left', 'append', 'x', 'if', 'x', 'pivot', 'middle', 'append', 'x', 'if', 'x', 'pivot', 'right', 'append', 'x', 'quicksort', 'left', 'quicksort', 'right', 'sorted_array', 'left', 'append', 'middle', 'append', 'right', 'print', 'sorted_array']","['import', 'numpi', 'as', 'np', 'import', 'random', 'lst', 'array', 'random', 'shuffl', 'lst', 'ln', 'len', 'array', 'z', 'random', 'randint', 'ln', 'def', 'quicksort', 'array', 'pivot', 'array', 'z', 'left', 'middl', 'right', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'left', 'append', 'x', 'if', 'x', 'pivot', 'middl', 'append', 'x', 'if', 'x', 'pivot', 'right', 'append', 'x', 'quicksort', 'left', 'quicksort', 'right', 'sorted_array', 'left', 'append', 'middl', 'append', 'right', 'print', 'sorted_array']","['import', 'numpi', 'np', 'import', 'random', 'lst', 'array', 'random', 'shuffl', 'lst', 'ln', 'len', 'array', 'z', 'random', 'randint', 'ln', 'def', 'quicksort', 'array', 'pivot', 'array', 'z', 'left', 'middl', 'right', 'x', 'array', 'x', 'pivot', 'left', 'append', 'x', 'x', 'pivot', 'middl', 'append', 'x', 'x', 'pivot', 'right', 'append', 'x', 'quicksort', 'left', 'quicksort', 'right', 'sorted_array', 'left', 'append', 'middl', 'append', 'right', 'print', 'sorted_array']",import numpi np import random lst array random shuffl lst ln len array z random randint ln def quicksort array pivot array z left middl right x array x pivot left append x x pivot middl append x x pivot right append x quicksort left quicksort right sorted_array left append middl append right print sorted_array,sortingalgorithms,CS,CS110
96457,"def quicksort(array=[,,,,,,,]):
    less = []
    equal = []
    greater = []

    if len(array) > :
        pivot = array[]
        for x in array:
            if x < pivot:
                less.append(x)
            if x == pivot:
                equal.append(x)
            if x > pivot:
                greater.append(x)
        return sort(less)+equal+sort(greater)  # Just use the + operator to join lists
    else: 
        return array",#sort,4,2676,"['def', 'quicksort', 'array', 'less', 'equal', 'greater', 'if', 'len', 'array', 'pivot', 'array', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'less', 'append', 'x', 'if', 'x', 'pivot', 'equal', 'append', 'x', 'if', 'x', 'pivot', 'greater', 'append', 'x', 'return', 'sort', 'less', 'equal', 'sort', 'greater', 'Just', 'use', 'the', 'operator', 'to', 'join', 'lists', 'else', 'return', 'array']","['def', 'quicksort', 'array', 'less', 'equal', 'greater', 'if', 'len', 'array', 'pivot', 'array', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'less', 'append', 'x', 'if', 'x', 'pivot', 'equal', 'append', 'x', 'if', 'x', 'pivot', 'greater', 'append', 'x', 'return', 'sort', 'less', 'equal', 'sort', 'greater', 'just', 'use', 'the', 'oper', 'to', 'join', 'list', 'els', 'return', 'array']","['def', 'quicksort', 'array', 'less', 'equal', 'greater', 'len', 'array', 'pivot', 'array', 'x', 'array', 'x', 'pivot', 'less', 'append', 'x', 'x', 'pivot', 'equal', 'append', 'x', 'x', 'pivot', 'greater', 'append', 'x', 'return', 'sort', 'less', 'equal', 'sort', 'greater', 'oper', 'join', 'list', 'els', 'return', 'array']",def quicksort array less equal greater len array pivot array x array x pivot less append x x pivot equal append x x pivot greater append x return sort less equal sort greater oper join list els return array,sortingalgorithms,CS,CS110
96457,"def partition(lis, start,finish):
    x = lis[finish]
    i = start - 
    for j in range(start, finish):
        if lis[j] <= x:
            i += 
            lis[j], lis[i] = lis[i], lis[j]
    lis[i+], lis[finish] = lis[finish], lis[i+]
    return i+

def quicksort(lis, start = None, finish = None):
    if start == None and finish == None:
        start = 
        finish = len(lis) -   
    split = 
    if start == finish:
        return
    if start < finish:
        split = partition(lis, start, finish)
        quicksort(lis, start, split - )
        quicksort(lis, split + , fin",#sort,4,2676,"['def', 'partition', 'lis', 'start', 'finish', 'x', 'lis', 'finish', 'i', 'start', 'for', 'j', 'in', 'range', 'start', 'finish', 'if', 'lis', 'j', 'x', 'i', 'lis', 'j', 'lis', 'i', 'lis', 'i', 'lis', 'j', 'lis', 'i', 'lis', 'finish', 'lis', 'finish', 'lis', 'i', 'return', 'i', 'def', 'quicksort', 'lis', 'start', 'None', 'finish', 'None', 'if', 'start', 'None', 'and', 'finish', 'None', 'start', 'finish', 'len', 'lis', 'split', 'if', 'start', 'finish', 'return', 'if', 'start', 'finish', 'split', 'partition', 'lis', 'start', 'finish', 'quicksort', 'lis', 'start', 'split', 'quicksort', 'lis', 'split', 'fin']","['def', 'partit', 'lis', 'start', 'finish', 'x', 'lis', 'finish', 'i', 'start', 'for', 'j', 'in', 'rang', 'start', 'finish', 'if', 'lis', 'j', 'x', 'i', 'lis', 'j', 'lis', 'i', 'lis', 'i', 'lis', 'j', 'lis', 'i', 'lis', 'finish', 'lis', 'finish', 'lis', 'i', 'return', 'i', 'def', 'quicksort', 'lis', 'start', 'none', 'finish', 'none', 'if', 'start', 'none', 'and', 'finish', 'none', 'start', 'finish', 'len', 'lis', 'split', 'if', 'start', 'finish', 'return', 'if', 'start', 'finish', 'split', 'partit', 'lis', 'start', 'finish', 'quicksort', 'lis', 'start', 'split', 'quicksort', 'lis', 'split', 'fin']","['def', 'partit', 'lis', 'start', 'finish', 'x', 'lis', 'finish', 'start', 'j', 'rang', 'start', 'finish', 'lis', 'j', 'x', 'lis', 'j', 'lis', 'lis', 'lis', 'j', 'lis', 'lis', 'finish', 'lis', 'finish', 'lis', 'return', 'def', 'quicksort', 'lis', 'start', 'none', 'finish', 'none', 'start', 'none', 'finish', 'none', 'start', 'finish', 'len', 'lis', 'split', 'start', 'finish', 'return', 'start', 'finish', 'split', 'partit', 'lis', 'start', 'finish', 'quicksort', 'lis', 'start', 'split', 'quicksort', 'lis', 'split', 'fin']",def partit lis start finish x lis finish start j rang start finish lis j x lis j lis lis lis j lis lis finish lis finish lis return def quicksort lis start none finish none start none finish none start finish len lis split start finish return start finish split partit lis start finish quicksort lis start split quicksort lis split fin,sortingalgorithms,CS,CS110
96457,"#elegant

import time
import random

start_time=time.time()

def cutequicksort(array):
    if len(array)<:
        return array
    pivot=array[]
    left=[x for x in array if x<pivot]
    middle=[x for x in array if x==pivot]
    right=[x for x in array if x>pivot]
    return cutequicksort(left)+middle+cutequicksort(right)

array=[random.random() for a in range()]
cutequicksort(array)


print(""%s seconds""% (time.time()-start_time))


#Cheers for the peer tutor Michael for helping me :)",#sort,4,2676,"['elegant', 'import', 'time', 'import', 'random', 'start_time', 'time', 'time', 'def', 'cutequicksort', 'array', 'if', 'len', 'array', 'return', 'array', 'pivot', 'array', 'left', 'x', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'middle', 'x', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'right', 'x', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'return', 'cutequicksort', 'left', 'middle', 'cutequicksort', 'right', 'array', 'random', 'random', 'for', 'a', 'in', 'range', 'cutequicksort', 'array', 'print', 's', 'seconds', 'time', 'time', 'start_time', 'Cheers', 'for', 'the', 'peer', 'tutor', 'Michael', 'for', 'helping', 'me']","['eleg', 'import', 'time', 'import', 'random', 'start_tim', 'time', 'time', 'def', 'cutequicksort', 'array', 'if', 'len', 'array', 'return', 'array', 'pivot', 'array', 'left', 'x', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'middl', 'x', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'right', 'x', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'return', 'cutequicksort', 'left', 'middl', 'cutequicksort', 'right', 'array', 'random', 'random', 'for', 'a', 'in', 'rang', 'cutequicksort', 'array', 'print', 's', 'second', 'time', 'time', 'start_tim', 'cheer', 'for', 'the', 'peer', 'tutor', 'michael', 'for', 'help', 'me']","['eleg', 'import', 'time', 'import', 'random', 'start_tim', 'time', 'time', 'def', 'cutequicksort', 'array', 'len', 'array', 'return', 'array', 'pivot', 'array', 'left', 'x', 'x', 'array', 'x', 'pivot', 'middl', 'x', 'x', 'array', 'x', 'pivot', 'right', 'x', 'x', 'array', 'x', 'pivot', 'return', 'cutequicksort', 'left', 'middl', 'cutequicksort', 'right', 'array', 'random', 'random', 'rang', 'cutequicksort', 'array', 'print', 'second', 'time', 'time', 'start_tim', 'cheer', 'peer', 'tutor', 'michael', 'help']",eleg import time import random start_tim time time def cutequicksort array len array return array pivot array left x x array x pivot middl x x array x pivot right x x array x pivot return cutequicksort left middl cutequicksort right array random random rang cutequicksort array print second time time start_tim cheer peer tutor michael help,sortingalgorithms,CS,CS110
96457,"def beautysort(A):
    if len(A)<: 
        return A
    pivot = A[]
    lower = [i for i in range(,len(A)) if A[i] < pivot]
    middle = [i for i in range(,len(A)) if A[i] == pivot]
    upper = [i for i in range(,len(A)) if A[i] > pivot]
    return beautysort(lower) + middle + beautysort(upper)",#sort,4,2676,"['def', 'beautysort', 'A', 'if', 'len', 'A', 'return', 'A', 'pivot', 'A', 'lower', 'i', 'for', 'i', 'in', 'range', 'len', 'A', 'if', 'A', 'i', 'pivot', 'middle', 'i', 'for', 'i', 'in', 'range', 'len', 'A', 'if', 'A', 'i', 'pivot', 'upper', 'i', 'for', 'i', 'in', 'range', 'len', 'A', 'if', 'A', 'i', 'pivot', 'return', 'beautysort', 'lower', 'middle', 'beautysort', 'upper']","['def', 'beautysort', 'a', 'if', 'len', 'a', 'return', 'a', 'pivot', 'a', 'lower', 'i', 'for', 'i', 'in', 'rang', 'len', 'a', 'if', 'a', 'i', 'pivot', 'middl', 'i', 'for', 'i', 'in', 'rang', 'len', 'a', 'if', 'a', 'i', 'pivot', 'upper', 'i', 'for', 'i', 'in', 'rang', 'len', 'a', 'if', 'a', 'i', 'pivot', 'return', 'beautysort', 'lower', 'middl', 'beautysort', 'upper']","['def', 'beautysort', 'len', 'return', 'pivot', 'lower', 'rang', 'len', 'pivot', 'middl', 'rang', 'len', 'pivot', 'upper', 'rang', 'len', 'pivot', 'return', 'beautysort', 'lower', 'middl', 'beautysort', 'upper']",def beautysort len return pivot lower rang len pivot middl rang len pivot upper rang len pivot return beautysort lower middl beautysort upper,sortingalgorithms,CS,CS110
96457,"#deterministic quick sort basic (uses more memory)
import time
tt = time.clock() #for empirical
def quicksort(array):
    less = []
    equal = []
    greater = []

    if len(array) > : #swapping mechanism here
        pivot = array[]
        for x in array:
            if x < pivot:
                less.append(x)
            if x == pivot:
                equal.append(x)
            if x > pivot:
                greater.append(x)
        
        return quicksort(less)+equal+sort(greater) 
    else:
        return array
array=[,,,,,,,]
quicksort(array)

print time.clock() - tt",#sort,4,2676,"['deterministic', 'quick', 'sort', 'basic', 'uses', 'more', 'memory', 'import', 'time', 'tt', 'time', 'clock', 'for', 'empirical', 'def', 'quicksort', 'array', 'less', 'equal', 'greater', 'if', 'len', 'array', 'swapping', 'mechanism', 'here', 'pivot', 'array', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'less', 'append', 'x', 'if', 'x', 'pivot', 'equal', 'append', 'x', 'if', 'x', 'pivot', 'greater', 'append', 'x', 'return', 'quicksort', 'less', 'equal', 'sort', 'greater', 'else', 'return', 'array', 'array', 'quicksort', 'array', 'print', 'time', 'clock', 'tt']","['determinist', 'quick', 'sort', 'basic', 'use', 'more', 'memori', 'import', 'time', 'tt', 'time', 'clock', 'for', 'empir', 'def', 'quicksort', 'array', 'less', 'equal', 'greater', 'if', 'len', 'array', 'swap', 'mechan', 'here', 'pivot', 'array', 'for', 'x', 'in', 'array', 'if', 'x', 'pivot', 'less', 'append', 'x', 'if', 'x', 'pivot', 'equal', 'append', 'x', 'if', 'x', 'pivot', 'greater', 'append', 'x', 'return', 'quicksort', 'less', 'equal', 'sort', 'greater', 'els', 'return', 'array', 'array', 'quicksort', 'array', 'print', 'time', 'clock', 'tt']","['determinist', 'quick', 'sort', 'basic', 'memori', 'import', 'time', 'tt', 'time', 'clock', 'empir', 'def', 'quicksort', 'array', 'less', 'equal', 'greater', 'len', 'array', 'swap', 'mechan', 'pivot', 'array', 'x', 'array', 'x', 'pivot', 'less', 'append', 'x', 'x', 'pivot', 'equal', 'append', 'x', 'x', 'pivot', 'greater', 'append', 'x', 'return', 'quicksort', 'less', 'equal', 'sort', 'greater', 'els', 'return', 'array', 'array', 'quicksort', 'array', 'print', 'time', 'clock', 'tt']",determinist quick sort basic memori import time tt time clock empir def quicksort array less equal greater len array swap mechan pivot array x array x pivot less append x x pivot equal append x x pivot greater append x return quicksort less equal sort greater els return array array quicksort array print time clock tt,sortingalgorithms,CS,CS110
96468,"The maximum list size is about  items. This assumes the worst case (the first item of the sublist is the pivot); and the python maximum recursion depth is . This is because each recursive call processes only one item; meaning the depth is around the same number of items as the full list.

def quickSort(myList):
    if myList == []:
        return []
    else:
        pivot = myList[]
        lesser = quickSort([x for x in myList[:] if x < pivot])
        greater = quickSort([x for x in myList[:] if x >= pivot])
        myList = lesser + [pivot] + greater
        return myList:",#sort,2,2682,"['The', 'maximum', 'list', 'size', 'is', 'about', 'items', 'This', 'assumes', 'the', 'worst', 'case', 'the', 'first', 'item', 'of', 'the', 'sublist', 'is', 'the', 'pivot', 'and', 'the', 'python', 'maximum', 'recursion', 'depth', 'is', 'This', 'is', 'because', 'each', 'recursive', 'call', 'processes', 'only', 'one', 'item', 'meaning', 'the', 'depth', 'is', 'around', 'the', 'same', 'number', 'of', 'items', 'as', 'the', 'full', 'list', 'def', 'quickSort', 'myList', 'if', 'myList', 'return', 'else', 'pivot', 'myList', 'lesser', 'quickSort', 'x', 'for', 'x', 'in', 'myList', 'if', 'x', 'pivot', 'greater', 'quickSort', 'x', 'for', 'x', 'in', 'myList', 'if', 'x', 'pivot', 'myList', 'lesser', 'pivot', 'greater', 'return', 'myList']","['the', 'maximum', 'list', 'size', 'is', 'about', 'item', 'this', 'assum', 'the', 'worst', 'case', 'the', 'first', 'item', 'of', 'the', 'sublist', 'is', 'the', 'pivot', 'and', 'the', 'python', 'maximum', 'recurs', 'depth', 'is', 'this', 'is', 'becaus', 'each', 'recurs', 'call', 'process', 'onli', 'one', 'item', 'mean', 'the', 'depth', 'is', 'around', 'the', 'same', 'number', 'of', 'item', 'as', 'the', 'full', 'list', 'def', 'quicksort', 'mylist', 'if', 'mylist', 'return', 'els', 'pivot', 'mylist', 'lesser', 'quicksort', 'x', 'for', 'x', 'in', 'mylist', 'if', 'x', 'pivot', 'greater', 'quicksort', 'x', 'for', 'x', 'in', 'mylist', 'if', 'x', 'pivot', 'mylist', 'lesser', 'pivot', 'greater', 'return', 'mylist']","['maximum', 'list', 'size', 'item', 'assum', 'worst', 'case', 'first', 'item', 'sublist', 'pivot', 'python', 'maximum', 'recurs', 'depth', 'becaus', 'recurs', 'call', 'process', 'onli', 'one', 'item', 'mean', 'depth', 'around', 'number', 'item', 'full', 'list', 'def', 'quicksort', 'mylist', 'mylist', 'return', 'els', 'pivot', 'mylist', 'lesser', 'quicksort', 'x', 'x', 'mylist', 'x', 'pivot', 'greater', 'quicksort', 'x', 'x', 'mylist', 'x', 'pivot', 'mylist', 'lesser', 'pivot', 'greater', 'return', 'mylist']",maximum list size item assum worst case first item sublist pivot python maximum recurs depth becaus recurs call process onli one item mean depth around number item full list def quicksort mylist mylist return els pivot mylist lesser quicksort x x mylist x pivot greater quicksort x x mylist x pivot mylist lesser pivot greater return mylist,sortingalgorithms,CS,CS110
105286,"def add_to_median_heap(minh, maxh, elem):

    # account for empty heaps
    if not maxh and not minh:
        heapq.heappush(maxh,-elem)

    # if there's something in maxh list
    elif maxh: 

        if elem >= -maxh[]: # need to multiply by - because python deals in minh
            heapq.heappush(minh,elem)
        else:
            heapq.heappush(maxh,-elem)

        # rebalance heaps if needed
        if len(minh)==len(maxh) + :
            heapq.heappush(maxh,-heapq.heappop(minh))

        elif len(maxh)==len(minh) + :
            heapq.heappush(minh,-heapq.heappop(maxh))",#sort,4,3668,"['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'account', 'for', 'empty', 'heaps', 'if', 'not', 'maxh', 'and', 'not', 'minh', 'heapq', 'heappush', 'maxh', 'elem', 'if', ""there's"", 'something', 'in', 'maxh', 'list', 'elif', 'maxh', 'if', 'elem', 'maxh', 'need', 'to', 'multiply', 'by', 'because', 'python', 'deals', 'in', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'else', 'heapq', 'heappush', 'maxh', 'elem', 'rebalance', 'heaps', 'if', 'needed', 'if', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'elif', 'len', 'maxh', 'len', 'minh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'maxh']","['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'account', 'for', 'empti', 'heap', 'if', 'not', 'maxh', 'and', 'not', 'minh', 'heapq', 'heappush', 'maxh', 'elem', 'if', 'there', 'someth', 'in', 'maxh', 'list', 'elif', 'maxh', 'if', 'elem', 'maxh', 'need', 'to', 'multipli', 'by', 'becaus', 'python', 'deal', 'in', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'els', 'heapq', 'heappush', 'maxh', 'elem', 'rebal', 'heap', 'if', 'need', 'if', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'elif', 'len', 'maxh', 'len', 'minh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'maxh']","['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'account', 'empti', 'heap', 'maxh', 'minh', 'heapq', 'heappush', 'maxh', 'elem', 'someth', 'maxh', 'list', 'elif', 'maxh', 'elem', 'maxh', 'need', 'multipli', 'becaus', 'python', 'deal', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'els', 'heapq', 'heappush', 'maxh', 'elem', 'rebal', 'heap', 'need', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'elif', 'len', 'maxh', 'len', 'minh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'maxh']",def add_to_median_heap minh maxh elem account empti heap maxh minh heapq heappush maxh elem someth maxh list elif maxh elem maxh need multipli becaus python deal minh heapq heappush minh elem els heapq heappush maxh elem rebal heap need len minh len maxh heapq heappush maxh heapq heappop minh elif len maxh len minh heapq heappush minh heapq heappop maxh,sortingalgorithms,CS,CS110
105286,"def add_to_median_heap(minh,maxh,item):
    median = get_median(minh,maxh)
    if item < median:
        heapq.heappush(maxh, -item)
    else:
        heapq.heappush(minh, item)
    if len(minh) - len(maxh) > :
       elem = heapq.heappop(minh)
       heapq.heappush(maxh, -elem)
    if len(maxh) - len(minh) > :
       elem = -heapq.heappop(maxh)
       heapq.heappush(minh, elem)
def get_median(minh,maxh):
    maxN = len(maxh)
    minN = len(minh)
    if maxN == minN:
        return (minh[]-maxh[])/.
    if maxN +  == minN:
        return -maxh[]
    if maxN == minN + :
        return",#sort,3,3668,"['def', 'add_to_median_heap', 'minh', 'maxh', 'item', 'median', 'get_median', 'minh', 'maxh', 'if', 'item', 'median', 'heapq', 'heappush', 'maxh', 'item', 'else', 'heapq', 'heappush', 'minh', 'item', 'if', 'len', 'minh', 'len', 'maxh', 'elem', 'heapq', 'heappop', 'minh', 'heapq', 'heappush', 'maxh', 'elem', 'if', 'len', 'maxh', 'len', 'minh', 'elem', 'heapq', 'heappop', 'maxh', 'heapq', 'heappush', 'minh', 'elem', 'def', 'get_median', 'minh', 'maxh', 'maxN', 'len', 'maxh', 'minN', 'len', 'minh', 'if', 'maxN', 'minN', 'return', 'minh', 'maxh', 'if', 'maxN', 'minN', 'return', 'maxh', 'if', 'maxN', 'minN', 'return']","['def', 'add_to_median_heap', 'minh', 'maxh', 'item', 'median', 'get_median', 'minh', 'maxh', 'if', 'item', 'median', 'heapq', 'heappush', 'maxh', 'item', 'els', 'heapq', 'heappush', 'minh', 'item', 'if', 'len', 'minh', 'len', 'maxh', 'elem', 'heapq', 'heappop', 'minh', 'heapq', 'heappush', 'maxh', 'elem', 'if', 'len', 'maxh', 'len', 'minh', 'elem', 'heapq', 'heappop', 'maxh', 'heapq', 'heappush', 'minh', 'elem', 'def', 'get_median', 'minh', 'maxh', 'maxn', 'len', 'maxh', 'minn', 'len', 'minh', 'if', 'maxn', 'minn', 'return', 'minh', 'maxh', 'if', 'maxn', 'minn', 'return', 'maxh', 'if', 'maxn', 'minn', 'return']","['def', 'add_to_median_heap', 'minh', 'maxh', 'item', 'median', 'get_median', 'minh', 'maxh', 'item', 'median', 'heapq', 'heappush', 'maxh', 'item', 'els', 'heapq', 'heappush', 'minh', 'item', 'len', 'minh', 'len', 'maxh', 'elem', 'heapq', 'heappop', 'minh', 'heapq', 'heappush', 'maxh', 'elem', 'len', 'maxh', 'len', 'minh', 'elem', 'heapq', 'heappop', 'maxh', 'heapq', 'heappush', 'minh', 'elem', 'def', 'get_median', 'minh', 'maxh', 'maxn', 'len', 'maxh', 'minn', 'len', 'minh', 'maxn', 'minn', 'return', 'minh', 'maxh', 'maxn', 'minn', 'return', 'maxh', 'maxn', 'minn', 'return']",def add_to_median_heap minh maxh item median get_median minh maxh item median heapq heappush maxh item els heapq heappush minh item len minh len maxh elem heapq heappop minh heapq heappush maxh elem len maxh len minh elem heapq heappop maxh heapq heappush minh elem def get_median minh maxh maxn len maxh minn len minh maxn minn return minh maxh maxn minn return maxh maxn minn return,sortingalgorithms,CS,CS110
105286,"def add_to_median_heap(minh, maxh, elem):
    if len(minh) + len(maxh)<:
        if len(maxh) + len(minh) == :
            maxh.append(-elem)
            return minh, maxh
    if len(maxh)!=: 
        if elem<= maxh[]:
            heapq.heappush(maxh,-elem)
        else:
            heapq.heappush(minh,elem)
    elif len(minh)!=:
        if elem>= minh[]:
            heapq.heappush(minh,elem)
        else:
            heapq.heappush(maxh,-elem)
    balance(minh, maxh)
    return minh, maxh",#sort,4,3668,"['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'len', 'minh', 'len', 'maxh', 'if', 'len', 'maxh', 'len', 'minh', 'maxh', 'append', 'elem', 'return', 'minh', 'maxh', 'if', 'len', 'maxh', 'if', 'elem', 'maxh', 'heapq', 'heappush', 'maxh', 'elem', 'else', 'heapq', 'heappush', 'minh', 'elem', 'elif', 'len', 'minh', 'if', 'elem', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'else', 'heapq', 'heappush', 'maxh', 'elem', 'balance', 'minh', 'maxh', 'return', 'minh', 'maxh']","['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'len', 'minh', 'len', 'maxh', 'if', 'len', 'maxh', 'len', 'minh', 'maxh', 'append', 'elem', 'return', 'minh', 'maxh', 'if', 'len', 'maxh', 'if', 'elem', 'maxh', 'heapq', 'heappush', 'maxh', 'elem', 'els', 'heapq', 'heappush', 'minh', 'elem', 'elif', 'len', 'minh', 'if', 'elem', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'els', 'heapq', 'heappush', 'maxh', 'elem', 'balanc', 'minh', 'maxh', 'return', 'minh', 'maxh']","['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'len', 'minh', 'len', 'maxh', 'len', 'maxh', 'len', 'minh', 'maxh', 'append', 'elem', 'return', 'minh', 'maxh', 'len', 'maxh', 'elem', 'maxh', 'heapq', 'heappush', 'maxh', 'elem', 'els', 'heapq', 'heappush', 'minh', 'elem', 'elif', 'len', 'minh', 'elem', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'els', 'heapq', 'heappush', 'maxh', 'elem', 'balanc', 'minh', 'maxh', 'return', 'minh', 'maxh']",def add_to_median_heap minh maxh elem len minh len maxh len maxh len minh maxh append elem return minh maxh len maxh elem maxh heapq heappush maxh elem els heapq heappush minh elem elif len minh elem minh heapq heappush minh elem els heapq heappush maxh elem balanc minh maxh return minh maxh,sortingalgorithms,CS,CS110
105286,"def add_to_median_heap(minh,maxh,item):
    median = get_median(minh,maxh)
    if item < median:
        heapq.heappush(maxh, -item)
    else:
        heapq.heappush(minh, item)

    # Rebalance!
    if len(minh) - len(maxh) > :
        elem = heapq.heappop(minh)
        heapq.heappush(maxh, -elem)
    if len(maxh) - len(minh) > :
        elem = -heapq.heappop(maxh)
        heapq.heappush(minh, elem)

def get_median(minh,maxh):
    maxN = len(maxh)
    minN = len(minh)
    if maxN == minN:
        return (minh[]-maxh[])/.
    if maxN +  == minN:
        return -maxh[]
    if maxN == mi",#sort,3,3668,"['def', 'add_to_median_heap', 'minh', 'maxh', 'item', 'median', 'get_median', 'minh', 'maxh', 'if', 'item', 'median', 'heapq', 'heappush', 'maxh', 'item', 'else', 'heapq', 'heappush', 'minh', 'item', 'Rebalance', 'if', 'len', 'minh', 'len', 'maxh', 'elem', 'heapq', 'heappop', 'minh', 'heapq', 'heappush', 'maxh', 'elem', 'if', 'len', 'maxh', 'len', 'minh', 'elem', 'heapq', 'heappop', 'maxh', 'heapq', 'heappush', 'minh', 'elem', 'def', 'get_median', 'minh', 'maxh', 'maxN', 'len', 'maxh', 'minN', 'len', 'minh', 'if', 'maxN', 'minN', 'return', 'minh', 'maxh', 'if', 'maxN', 'minN', 'return', 'maxh', 'if', 'maxN', 'mi']","['def', 'add_to_median_heap', 'minh', 'maxh', 'item', 'median', 'get_median', 'minh', 'maxh', 'if', 'item', 'median', 'heapq', 'heappush', 'maxh', 'item', 'els', 'heapq', 'heappush', 'minh', 'item', 'rebal', 'if', 'len', 'minh', 'len', 'maxh', 'elem', 'heapq', 'heappop', 'minh', 'heapq', 'heappush', 'maxh', 'elem', 'if', 'len', 'maxh', 'len', 'minh', 'elem', 'heapq', 'heappop', 'maxh', 'heapq', 'heappush', 'minh', 'elem', 'def', 'get_median', 'minh', 'maxh', 'maxn', 'len', 'maxh', 'minn', 'len', 'minh', 'if', 'maxn', 'minn', 'return', 'minh', 'maxh', 'if', 'maxn', 'minn', 'return', 'maxh', 'if', 'maxn', 'mi']","['def', 'add_to_median_heap', 'minh', 'maxh', 'item', 'median', 'get_median', 'minh', 'maxh', 'item', 'median', 'heapq', 'heappush', 'maxh', 'item', 'els', 'heapq', 'heappush', 'minh', 'item', 'rebal', 'len', 'minh', 'len', 'maxh', 'elem', 'heapq', 'heappop', 'minh', 'heapq', 'heappush', 'maxh', 'elem', 'len', 'maxh', 'len', 'minh', 'elem', 'heapq', 'heappop', 'maxh', 'heapq', 'heappush', 'minh', 'elem', 'def', 'get_median', 'minh', 'maxh', 'maxn', 'len', 'maxh', 'minn', 'len', 'minh', 'maxn', 'minn', 'return', 'minh', 'maxh', 'maxn', 'minn', 'return', 'maxh', 'maxn', 'mi']",def add_to_median_heap minh maxh item median get_median minh maxh item median heapq heappush maxh item els heapq heappush minh item rebal len minh len maxh elem heapq heappop minh heapq heappush maxh elem len maxh len minh elem heapq heappop maxh heapq heappush minh elem def get_median minh maxh maxn len maxh minn len minh maxn minn return minh maxh maxn minn return maxh maxn mi,sortingalgorithms,CS,CS110
105286,"import heapq as hp

def add_to_median_heap(minh, maxh, elem):
    if (minh == [] and maxh == []) or minh[] <= elem:
        hp.heappush(minh, elem)
    elif maxh == [] or abs(maxh[]) >= elem:
        hp.heappush(maxh, -elem)
    else:
        if len(minh) < len(maxh):
            hp.heappush(minh, elem) 
        else:
            hp.heappush(maxh, -elem)
    if len(minh) > len(maxh) + :
        a = hp.heappop(minh)
        hp.heappush(maxh, -a)
    elif len(maxh) > len(minh) + :
        a = -hp.heappop(maxh)
        hp.heappush(minh, a)",#sort,4,3668,"['import', 'heapq', 'as', 'hp', 'def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'minh', 'and', 'maxh', 'or', 'minh', 'elem', 'hp', 'heappush', 'minh', 'elem', 'elif', 'maxh', 'or', 'abs', 'maxh', 'elem', 'hp', 'heappush', 'maxh', 'elem', 'else', 'if', 'len', 'minh', 'len', 'maxh', 'hp', 'heappush', 'minh', 'elem', 'else', 'hp', 'heappush', 'maxh', 'elem', 'if', 'len', 'minh', 'len', 'maxh', 'a', 'hp', 'heappop', 'minh', 'hp', 'heappush', 'maxh', 'a', 'elif', 'len', 'maxh', 'len', 'minh', 'a', 'hp', 'heappop', 'maxh', 'hp', 'heappush', 'minh', 'a']","['import', 'heapq', 'as', 'hp', 'def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'minh', 'and', 'maxh', 'or', 'minh', 'elem', 'hp', 'heappush', 'minh', 'elem', 'elif', 'maxh', 'or', 'ab', 'maxh', 'elem', 'hp', 'heappush', 'maxh', 'elem', 'els', 'if', 'len', 'minh', 'len', 'maxh', 'hp', 'heappush', 'minh', 'elem', 'els', 'hp', 'heappush', 'maxh', 'elem', 'if', 'len', 'minh', 'len', 'maxh', 'a', 'hp', 'heappop', 'minh', 'hp', 'heappush', 'maxh', 'a', 'elif', 'len', 'maxh', 'len', 'minh', 'a', 'hp', 'heappop', 'maxh', 'hp', 'heappush', 'minh', 'a']","['import', 'heapq', 'hp', 'def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'minh', 'maxh', 'minh', 'elem', 'hp', 'heappush', 'minh', 'elem', 'elif', 'maxh', 'ab', 'maxh', 'elem', 'hp', 'heappush', 'maxh', 'elem', 'els', 'len', 'minh', 'len', 'maxh', 'hp', 'heappush', 'minh', 'elem', 'els', 'hp', 'heappush', 'maxh', 'elem', 'len', 'minh', 'len', 'maxh', 'hp', 'heappop', 'minh', 'hp', 'heappush', 'maxh', 'elif', 'len', 'maxh', 'len', 'minh', 'hp', 'heappop', 'maxh', 'hp', 'heappush', 'minh']",import heapq hp def add_to_median_heap minh maxh elem minh maxh minh elem hp heappush minh elem elif maxh ab maxh elem hp heappush maxh elem els len minh len maxh hp heappush minh elem els hp heappush maxh elem len minh len maxh hp heappop minh hp heappush maxh elif len maxh len minh hp heappop maxh hp heappush minh,sortingalgorithms,CS,CS110
105286,"def add_to_median_heap(minh,maxh,l):
    for a in range(len(l)):
        if a == :
            minh.append(l[a])
        if l[a] > minh[]:
            minh.append(l[a])
            if len(minh)-len(maxh) >:
                maxh.append(minh[])
                minh.remove(minh[])
                heapq.heapify(minh)
        elif l[a] < minh[]:
            if len(maxh) == :
                maxh.append(l[a])
            elif l[a] >= maxh[]:
                maxh.insert(,l[a])
            else:
                maxh.append(l[a])
            if len(maxh)-len(minh) >:
                minh.appe",#sort,3,3668,"['def', 'add_to_median_heap', 'minh', 'maxh', 'l', 'for', 'a', 'in', 'range', 'len', 'l', 'if', 'a', 'minh', 'append', 'l', 'a', 'if', 'l', 'a', 'minh', 'minh', 'append', 'l', 'a', 'if', 'len', 'minh', 'len', 'maxh', 'maxh', 'append', 'minh', 'minh', 'remove', 'minh', 'heapq', 'heapify', 'minh', 'elif', 'l', 'a', 'minh', 'if', 'len', 'maxh', 'maxh', 'append', 'l', 'a', 'elif', 'l', 'a', 'maxh', 'maxh', 'insert', 'l', 'a', 'else', 'maxh', 'append', 'l', 'a', 'if', 'len', 'maxh', 'len', 'minh', 'minh', 'appe']","['def', 'add_to_median_heap', 'minh', 'maxh', 'l', 'for', 'a', 'in', 'rang', 'len', 'l', 'if', 'a', 'minh', 'append', 'l', 'a', 'if', 'l', 'a', 'minh', 'minh', 'append', 'l', 'a', 'if', 'len', 'minh', 'len', 'maxh', 'maxh', 'append', 'minh', 'minh', 'remov', 'minh', 'heapq', 'heapifi', 'minh', 'elif', 'l', 'a', 'minh', 'if', 'len', 'maxh', 'maxh', 'append', 'l', 'a', 'elif', 'l', 'a', 'maxh', 'maxh', 'insert', 'l', 'a', 'els', 'maxh', 'append', 'l', 'a', 'if', 'len', 'maxh', 'len', 'minh', 'minh', 'app']","['def', 'add_to_median_heap', 'minh', 'maxh', 'l', 'rang', 'len', 'l', 'minh', 'append', 'l', 'l', 'minh', 'minh', 'append', 'l', 'len', 'minh', 'len', 'maxh', 'maxh', 'append', 'minh', 'minh', 'remov', 'minh', 'heapq', 'heapifi', 'minh', 'elif', 'l', 'minh', 'len', 'maxh', 'maxh', 'append', 'l', 'elif', 'l', 'maxh', 'maxh', 'insert', 'l', 'els', 'maxh', 'append', 'l', 'len', 'maxh', 'len', 'minh', 'minh', 'app']",def add_to_median_heap minh maxh l rang len l minh append l l minh minh append l len minh len maxh maxh append minh minh remov minh heapq heapifi minh elif l minh len maxh maxh append l elif l maxh maxh insert l els maxh append l len maxh len minh minh app,sortingalgorithms,CS,CS110
105286,"def add_to_median_heap(minh, maxh, elem):
    if len(minh) ==  or elem < - * minh[]:
        heapq.heappush(minh, elem)
    else:
        heapq.heappush(maxh, - * elem)
    rebalance(minh, maxh)

def rebalance(minh, maxh):
    if len(minh) > len(maxh):
        bigHeap = minh
        smallHeap = maxh
    elif len(maxh) > len(minh):
        bigHeap = maxh
        smallHeap = minh
    else:
        return    
    if len(bigHeap) - len(smallHeap) >= :
        heapq.heappush(smallHeap, -*heapq.heappop(bigHeap))",#sort,4,3668,"['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'len', 'minh', 'or', 'elem', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'else', 'heapq', 'heappush', 'maxh', 'elem', 'rebalance', 'minh', 'maxh', 'def', 'rebalance', 'minh', 'maxh', 'if', 'len', 'minh', 'len', 'maxh', 'bigHeap', 'minh', 'smallHeap', 'maxh', 'elif', 'len', 'maxh', 'len', 'minh', 'bigHeap', 'maxh', 'smallHeap', 'minh', 'else', 'return', 'if', 'len', 'bigHeap', 'len', 'smallHeap', 'heapq', 'heappush', 'smallHeap', 'heapq', 'heappop', 'bigHeap']","['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'len', 'minh', 'or', 'elem', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'els', 'heapq', 'heappush', 'maxh', 'elem', 'rebal', 'minh', 'maxh', 'def', 'rebal', 'minh', 'maxh', 'if', 'len', 'minh', 'len', 'maxh', 'bigheap', 'minh', 'smallheap', 'maxh', 'elif', 'len', 'maxh', 'len', 'minh', 'bigheap', 'maxh', 'smallheap', 'minh', 'els', 'return', 'if', 'len', 'bigheap', 'len', 'smallheap', 'heapq', 'heappush', 'smallheap', 'heapq', 'heappop', 'bigheap']","['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'len', 'minh', 'elem', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'els', 'heapq', 'heappush', 'maxh', 'elem', 'rebal', 'minh', 'maxh', 'def', 'rebal', 'minh', 'maxh', 'len', 'minh', 'len', 'maxh', 'bigheap', 'minh', 'smallheap', 'maxh', 'elif', 'len', 'maxh', 'len', 'minh', 'bigheap', 'maxh', 'smallheap', 'minh', 'els', 'return', 'len', 'bigheap', 'len', 'smallheap', 'heapq', 'heappush', 'smallheap', 'heapq', 'heappop', 'bigheap']",def add_to_median_heap minh maxh elem len minh elem minh heapq heappush minh elem els heapq heappush maxh elem rebal minh maxh def rebal minh maxh len minh len maxh bigheap minh smallheap maxh elif len maxh len minh bigheap maxh smallheap minh els return len bigheap len smallheap heapq heappush smallheap heapq heappop bigheap,sortingalgorithms,CS,CS110
105294,"import heapq

def add_to_median_heap(maxh, minh, elem): #maxh is a list of negative numbers(!)
    heapq.heappush(minh,elem)
    if len(minh) == len(maxh):
        if minh[] < maxh[] * -:
            minh[], maxh[] = - *maxh[], - * minh[]
    while len(minh) >  len(maxh):
        heapq.heappush(maxh, - * heapq.heappop(minh))
    return maxh, minh",#sort,4,3671,"['import', 'heapq', 'def', 'add_to_median_heap', 'maxh', 'minh', 'elem', 'maxh', 'is', 'a', 'list', 'of', 'negative', 'numbers', 'heapq', 'heappush', 'minh', 'elem', 'if', 'len', 'minh', 'len', 'maxh', 'if', 'minh', 'maxh', 'minh', 'maxh', 'maxh', 'minh', 'while', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'return', 'maxh', 'minh']","['import', 'heapq', 'def', 'add_to_median_heap', 'maxh', 'minh', 'elem', 'maxh', 'is', 'a', 'list', 'of', 'negat', 'number', 'heapq', 'heappush', 'minh', 'elem', 'if', 'len', 'minh', 'len', 'maxh', 'if', 'minh', 'maxh', 'minh', 'maxh', 'maxh', 'minh', 'while', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'return', 'maxh', 'minh']","['import', 'heapq', 'def', 'add_to_median_heap', 'maxh', 'minh', 'elem', 'maxh', 'list', 'negat', 'number', 'heapq', 'heappush', 'minh', 'elem', 'len', 'minh', 'len', 'maxh', 'minh', 'maxh', 'minh', 'maxh', 'maxh', 'minh', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'return', 'maxh', 'minh']",import heapq def add_to_median_heap maxh minh elem maxh list negat number heapq heappush minh elem len minh len maxh minh maxh minh maxh maxh minh len minh len maxh heapq heappush maxh heapq heappop minh return maxh minh,sortingalgorithms,CS,CS110
105294,"def add_to_median_heap (minh, maxh, elem):
	if len(minh)==:
		minh.append(elem)
		return
	elif elem<minh[len(minh)-]: heapq.heappush(minh,elem)
	else: heapq.heappush(maxh,-elem)",#sort,3,3671,"['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'len', 'minh', 'minh', 'append', 'elem', 'return', 'elif', 'elem', 'minh', 'len', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'else', 'heapq', 'heappush', 'maxh', 'elem']","['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'len', 'minh', 'minh', 'append', 'elem', 'return', 'elif', 'elem', 'minh', 'len', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'els', 'heapq', 'heappush', 'maxh', 'elem']","['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'len', 'minh', 'minh', 'append', 'elem', 'return', 'elif', 'elem', 'minh', 'len', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'els', 'heapq', 'heappush', 'maxh', 'elem']",def add_to_median_heap minh maxh elem len minh minh append elem return elif elem minh len minh heapq heappush minh elem els heapq heappush maxh elem,sortingalgorithms,CS,CS110
105294,"def qselect(lst, k):
    pivit = lst.pop()
    max = []
    min = []
    for num in lst:
        if num > pivit:
            max.append(num)
        else:
            min.append(num)
    print min, max, pivit, k
    if len(min) == k:
        return pivit
    elif len(min) > k:
        qselect(min, k)
    else:
        qselect(max, k-len(min))

print qselect([,,,,,,,,], )",#sort,1,3671,"['def', 'qselect', 'lst', 'k', 'pivit', 'lst', 'pop', 'max', 'min', 'for', 'num', 'in', 'lst', 'if', 'num', 'pivit', 'max', 'append', 'num', 'else', 'min', 'append', 'num', 'print', 'min', 'max', 'pivit', 'k', 'if', 'len', 'min', 'k', 'return', 'pivit', 'elif', 'len', 'min', 'k', 'qselect', 'min', 'k', 'else', 'qselect', 'max', 'k', 'len', 'min', 'print', 'qselect']","['def', 'qselect', 'lst', 'k', 'pivit', 'lst', 'pop', 'max', 'min', 'for', 'num', 'in', 'lst', 'if', 'num', 'pivit', 'max', 'append', 'num', 'els', 'min', 'append', 'num', 'print', 'min', 'max', 'pivit', 'k', 'if', 'len', 'min', 'k', 'return', 'pivit', 'elif', 'len', 'min', 'k', 'qselect', 'min', 'k', 'els', 'qselect', 'max', 'k', 'len', 'min', 'print', 'qselect']","['def', 'qselect', 'lst', 'k', 'pivit', 'lst', 'pop', 'max', 'min', 'num', 'lst', 'num', 'pivit', 'max', 'append', 'num', 'els', 'min', 'append', 'num', 'print', 'min', 'max', 'pivit', 'k', 'len', 'min', 'k', 'return', 'pivit', 'elif', 'len', 'min', 'k', 'qselect', 'min', 'k', 'els', 'qselect', 'max', 'k', 'len', 'min', 'print', 'qselect']",def qselect lst k pivit lst pop max min num lst num pivit max append num els min append num print min max pivit k len min k return pivit elif len min k qselect min k els qselect max k len min print qselect,sortingalgorithms,CS,CS110
105294,"def add_to_median_heap(left, right, elem):
    if len(left) == :
        heapq.heappush(left, encode(elem))
        return
    if len(right) == :
        heapq.heappush(right, elem)
        return
    l = decode(left[])
    r = right[]
    if elem > r: 
        heapq.heappush(right, elem)
    else:
        heapq.heappush(left, encode(elem))        
    if len(right) > len(left):
        heapq.heappush(left, encode(heapq.heappop(right)))
    if len(left) > len(right) + :
        heapq.heappush(right, decode(heapq.heappop(left)))",#sort,4,3671,"['def', 'add_to_median_heap', 'left', 'right', 'elem', 'if', 'len', 'left', 'heapq', 'heappush', 'left', 'encode', 'elem', 'return', 'if', 'len', 'right', 'heapq', 'heappush', 'right', 'elem', 'return', 'l', 'decode', 'left', 'r', 'right', 'if', 'elem', 'r', 'heapq', 'heappush', 'right', 'elem', 'else', 'heapq', 'heappush', 'left', 'encode', 'elem', 'if', 'len', 'right', 'len', 'left', 'heapq', 'heappush', 'left', 'encode', 'heapq', 'heappop', 'right', 'if', 'len', 'left', 'len', 'right', 'heapq', 'heappush', 'right', 'decode', 'heapq', 'heappop', 'left']","['def', 'add_to_median_heap', 'left', 'right', 'elem', 'if', 'len', 'left', 'heapq', 'heappush', 'left', 'encod', 'elem', 'return', 'if', 'len', 'right', 'heapq', 'heappush', 'right', 'elem', 'return', 'l', 'decod', 'left', 'r', 'right', 'if', 'elem', 'r', 'heapq', 'heappush', 'right', 'elem', 'els', 'heapq', 'heappush', 'left', 'encod', 'elem', 'if', 'len', 'right', 'len', 'left', 'heapq', 'heappush', 'left', 'encod', 'heapq', 'heappop', 'right', 'if', 'len', 'left', 'len', 'right', 'heapq', 'heappush', 'right', 'decod', 'heapq', 'heappop', 'left']","['def', 'add_to_median_heap', 'left', 'right', 'elem', 'len', 'left', 'heapq', 'heappush', 'left', 'encod', 'elem', 'return', 'len', 'right', 'heapq', 'heappush', 'right', 'elem', 'return', 'l', 'decod', 'left', 'r', 'right', 'elem', 'r', 'heapq', 'heappush', 'right', 'elem', 'els', 'heapq', 'heappush', 'left', 'encod', 'elem', 'len', 'right', 'len', 'left', 'heapq', 'heappush', 'left', 'encod', 'heapq', 'heappop', 'right', 'len', 'left', 'len', 'right', 'heapq', 'heappush', 'right', 'decod', 'heapq', 'heappop', 'left']",def add_to_median_heap left right elem len left heapq heappush left encod elem return len right heapq heappush right elem return l decod left r right elem r heapq heappush right elem els heapq heappush left encod elem len right len left heapq heappush left encod heapq heappop right len left len right heapq heappush right decod heapq heappop left,sortingalgorithms,CS,CS110
105294,"def addtomedianheap(minh,maxh,item):
    median = get_median(minh,maxh)
    if item < median:
        heapq.heappush(maxh, -item)
    else:
        heapq.heappush(minh, item)
    if len(minh) - len(maxh) > :
       elem = heapq.heappop(minh)
       heapq.heappush(maxh, -elem)
    if len(maxh) - len(minh) > :
       elem = -heapq.heappop(maxh)
       heapq.heappush(minh, elem)
    print minh, maxh

def get_median(minh,maxh):
    maxN = len(maxh)
    minN = len(minh)
    if maxN == minN:
        return (minh[]+maxh[]/.)
    elif maxN > minN:
        return -*maxh[]
    elif maxN < min:",#sort,3,3671,"['def', 'addtomedianheap', 'minh', 'maxh', 'item', 'median', 'get_median', 'minh', 'maxh', 'if', 'item', 'median', 'heapq', 'heappush', 'maxh', 'item', 'else', 'heapq', 'heappush', 'minh', 'item', 'if', 'len', 'minh', 'len', 'maxh', 'elem', 'heapq', 'heappop', 'minh', 'heapq', 'heappush', 'maxh', 'elem', 'if', 'len', 'maxh', 'len', 'minh', 'elem', 'heapq', 'heappop', 'maxh', 'heapq', 'heappush', 'minh', 'elem', 'print', 'minh', 'maxh', 'def', 'get_median', 'minh', 'maxh', 'maxN', 'len', 'maxh', 'minN', 'len', 'minh', 'if', 'maxN', 'minN', 'return', 'minh', 'maxh', 'elif', 'maxN', 'minN', 'return', 'maxh', 'elif', 'maxN', 'min']","['def', 'addtomedianheap', 'minh', 'maxh', 'item', 'median', 'get_median', 'minh', 'maxh', 'if', 'item', 'median', 'heapq', 'heappush', 'maxh', 'item', 'els', 'heapq', 'heappush', 'minh', 'item', 'if', 'len', 'minh', 'len', 'maxh', 'elem', 'heapq', 'heappop', 'minh', 'heapq', 'heappush', 'maxh', 'elem', 'if', 'len', 'maxh', 'len', 'minh', 'elem', 'heapq', 'heappop', 'maxh', 'heapq', 'heappush', 'minh', 'elem', 'print', 'minh', 'maxh', 'def', 'get_median', 'minh', 'maxh', 'maxn', 'len', 'maxh', 'minn', 'len', 'minh', 'if', 'maxn', 'minn', 'return', 'minh', 'maxh', 'elif', 'maxn', 'minn', 'return', 'maxh', 'elif', 'maxn', 'min']","['def', 'addtomedianheap', 'minh', 'maxh', 'item', 'median', 'get_median', 'minh', 'maxh', 'item', 'median', 'heapq', 'heappush', 'maxh', 'item', 'els', 'heapq', 'heappush', 'minh', 'item', 'len', 'minh', 'len', 'maxh', 'elem', 'heapq', 'heappop', 'minh', 'heapq', 'heappush', 'maxh', 'elem', 'len', 'maxh', 'len', 'minh', 'elem', 'heapq', 'heappop', 'maxh', 'heapq', 'heappush', 'minh', 'elem', 'print', 'minh', 'maxh', 'def', 'get_median', 'minh', 'maxh', 'maxn', 'len', 'maxh', 'minn', 'len', 'minh', 'maxn', 'minn', 'return', 'minh', 'maxh', 'elif', 'maxn', 'minn', 'return', 'maxh', 'elif', 'maxn', 'min']",def addtomedianheap minh maxh item median get_median minh maxh item median heapq heappush maxh item els heapq heappush minh item len minh len maxh elem heapq heappop minh heapq heappush maxh elem len maxh len minh elem heapq heappop maxh heapq heappush minh elem print minh maxh def get_median minh maxh maxn len maxh minn len minh maxn minn return minh maxh elif maxn minn return maxh elif maxn min,sortingalgorithms,CS,CS110
143127,"def rebalance (minh, maxh):
    while len (minh) - len (maxh) >= : 
        heapq.heappush (maxh, -heapq.heappop (minh))
    while len (maxh) - len (minh) >=:
        heapq.heappush (minh, -heapq.heappop (maxh))
        
def add_to_median_heap (minh, maxh, elem):
    if (not minh) or elem >= minh[]: 
        heapq.heappush (minh, elem)
    else: 
        heapq.heappush (maxh, -elem)
    rebalance (minh, maxh)

def median(minh, maxh):
    if len (minh) == len (maxh):
        return (minh [] - maxh [])/
    if len (minh) > len (maxh):
        return minh []
    else: 
        return -maxh",#sort,4,7119,"['def', 'rebalance', 'minh', 'maxh', 'while', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'while', 'len', 'maxh', 'len', 'minh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'maxh', 'def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'not', 'minh', 'or', 'elem', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'else', 'heapq', 'heappush', 'maxh', 'elem', 'rebalance', 'minh', 'maxh', 'def', 'median', 'minh', 'maxh', 'if', 'len', 'minh', 'len', 'maxh', 'return', 'minh', 'maxh', 'if', 'len', 'minh', 'len', 'maxh', 'return', 'minh', 'else', 'return', 'maxh']","['def', 'rebal', 'minh', 'maxh', 'while', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'while', 'len', 'maxh', 'len', 'minh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'maxh', 'def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'not', 'minh', 'or', 'elem', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'els', 'heapq', 'heappush', 'maxh', 'elem', 'rebal', 'minh', 'maxh', 'def', 'median', 'minh', 'maxh', 'if', 'len', 'minh', 'len', 'maxh', 'return', 'minh', 'maxh', 'if', 'len', 'minh', 'len', 'maxh', 'return', 'minh', 'els', 'return', 'maxh']","['def', 'rebal', 'minh', 'maxh', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'len', 'maxh', 'len', 'minh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'maxh', 'def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'minh', 'elem', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'els', 'heapq', 'heappush', 'maxh', 'elem', 'rebal', 'minh', 'maxh', 'def', 'median', 'minh', 'maxh', 'len', 'minh', 'len', 'maxh', 'return', 'minh', 'maxh', 'len', 'minh', 'len', 'maxh', 'return', 'minh', 'els', 'return', 'maxh']",def rebal minh maxh len minh len maxh heapq heappush maxh heapq heappop minh len maxh len minh heapq heappush minh heapq heappop maxh def add_to_median_heap minh maxh elem minh elem minh heapq heappush minh elem els heapq heappush maxh elem rebal minh maxh def median minh maxh len minh len maxh return minh maxh len minh len maxh return minh els return maxh,sortingalgorithms,CS,CS110
143127,"import heapq
def add_to_median_heap(minh, maxh, elem): 
    if elem > -maxh[]: 
        heapq.heappush(minh, elem)
    else: 
        heapq.heappush(maxh, -elem)
        
    if len(minh)==len(maxh):
        med = ((-maxh[]+minh[])/)
    elif len(minh)+==len(maxh):
        med = (-maxh[])
    elif len(minh)==len(maxh)+:
        med = minh[]
    return med",#sort,2,7119,"['import', 'heapq', 'def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'elem', 'maxh', 'heapq', 'heappush', 'minh', 'elem', 'else', 'heapq', 'heappush', 'maxh', 'elem', 'if', 'len', 'minh', 'len', 'maxh', 'med', 'maxh', 'minh', 'elif', 'len', 'minh', 'len', 'maxh', 'med', 'maxh', 'elif', 'len', 'minh', 'len', 'maxh', 'med', 'minh', 'return', 'med']","['import', 'heapq', 'def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'elem', 'maxh', 'heapq', 'heappush', 'minh', 'elem', 'els', 'heapq', 'heappush', 'maxh', 'elem', 'if', 'len', 'minh', 'len', 'maxh', 'med', 'maxh', 'minh', 'elif', 'len', 'minh', 'len', 'maxh', 'med', 'maxh', 'elif', 'len', 'minh', 'len', 'maxh', 'med', 'minh', 'return', 'med']","['import', 'heapq', 'def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'elem', 'maxh', 'heapq', 'heappush', 'minh', 'elem', 'els', 'heapq', 'heappush', 'maxh', 'elem', 'len', 'minh', 'len', 'maxh', 'med', 'maxh', 'minh', 'elif', 'len', 'minh', 'len', 'maxh', 'med', 'maxh', 'elif', 'len', 'minh', 'len', 'maxh', 'med', 'minh', 'return', 'med']",import heapq def add_to_median_heap minh maxh elem elem maxh heapq heappush minh elem els heapq heappush maxh elem len minh len maxh med maxh minh elif len minh len maxh med maxh elif len minh len maxh med minh return med,sortingalgorithms,CS,CS110
143127,"def add_to_median_heap(minh, maxh, a):
    if len(minh) == : heapq.heappush(minh, -*a)
    else:
        maxh_max = - * minh[]
        if a > maxh_max:
            heapq.heappush(maxh, a)
        else:
            heapq.heappush(minh, -*a)
        if len(minh) > len(maxh) + :
            heapq.heappush(maxh, -*heapq.heappop(minh))
        elif len(minh) < len(maxh):
            heapq.heappush(minh, -*heapq.heappop(maxh))",#sort,4,7119,"['def', 'add_to_median_heap', 'minh', 'maxh', 'a', 'if', 'len', 'minh', 'heapq', 'heappush', 'minh', 'a', 'else', 'maxh_max', 'minh', 'if', 'a', 'maxh_max', 'heapq', 'heappush', 'maxh', 'a', 'else', 'heapq', 'heappush', 'minh', 'a', 'if', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'elif', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'maxh']","['def', 'add_to_median_heap', 'minh', 'maxh', 'a', 'if', 'len', 'minh', 'heapq', 'heappush', 'minh', 'a', 'els', 'maxh_max', 'minh', 'if', 'a', 'maxh_max', 'heapq', 'heappush', 'maxh', 'a', 'els', 'heapq', 'heappush', 'minh', 'a', 'if', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'elif', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'maxh']","['def', 'add_to_median_heap', 'minh', 'maxh', 'len', 'minh', 'heapq', 'heappush', 'minh', 'els', 'maxh_max', 'minh', 'maxh_max', 'heapq', 'heappush', 'maxh', 'els', 'heapq', 'heappush', 'minh', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'elif', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'maxh']",def add_to_median_heap minh maxh len minh heapq heappush minh els maxh_max minh maxh_max heapq heappush maxh els heapq heappush minh len minh len maxh heapq heappush maxh heapq heappop minh elif len minh len maxh heapq heappush minh heapq heappop maxh,sortingalgorithms,CS,CS110
143127,"def add_to_median_heap(minh,maxh,ele):
    if not maxh and not minh:
        heapq.heappush(maxh,-ele)
    elif maxh:
        if ele>= -maxh[]:
            heapq.heappush(minh,ele)
            if len(minh)==len(maxh)+:
                heapq.heappush(maxh,-heapq.heappop(minh))
        elif ele< -maxh[]:
            heapq.heappush(maxh,-ele)
            if len(maxh)==len(minh)+:
                heapq.heappush(minh,-heapq.heappop(maxh))
    return minh, maxh",#sort,4,7119,"['def', 'add_to_median_heap', 'minh', 'maxh', 'ele', 'if', 'not', 'maxh', 'and', 'not', 'minh', 'heapq', 'heappush', 'maxh', 'ele', 'elif', 'maxh', 'if', 'ele', 'maxh', 'heapq', 'heappush', 'minh', 'ele', 'if', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'elif', 'ele', 'maxh', 'heapq', 'heappush', 'maxh', 'ele', 'if', 'len', 'maxh', 'len', 'minh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'maxh', 'return', 'minh', 'maxh']","['def', 'add_to_median_heap', 'minh', 'maxh', 'ele', 'if', 'not', 'maxh', 'and', 'not', 'minh', 'heapq', 'heappush', 'maxh', 'ele', 'elif', 'maxh', 'if', 'ele', 'maxh', 'heapq', 'heappush', 'minh', 'ele', 'if', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'elif', 'ele', 'maxh', 'heapq', 'heappush', 'maxh', 'ele', 'if', 'len', 'maxh', 'len', 'minh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'maxh', 'return', 'minh', 'maxh']","['def', 'add_to_median_heap', 'minh', 'maxh', 'ele', 'maxh', 'minh', 'heapq', 'heappush', 'maxh', 'ele', 'elif', 'maxh', 'ele', 'maxh', 'heapq', 'heappush', 'minh', 'ele', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'elif', 'ele', 'maxh', 'heapq', 'heappush', 'maxh', 'ele', 'len', 'maxh', 'len', 'minh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'maxh', 'return', 'minh', 'maxh']",def add_to_median_heap minh maxh ele maxh minh heapq heappush maxh ele elif maxh ele maxh heapq heappush minh ele len minh len maxh heapq heappush maxh heapq heappop minh elif ele maxh heapq heappush maxh ele len maxh len minh heapq heappush minh heapq heappop maxh return minh maxh,sortingalgorithms,CS,CS110
143127,"#assuming all items in maxheap < minheap
def add_to_median_heap(minh,maxh,elem):
    if len(minh) == :
        heapq.heappush(minh,elem)
        return
    if minh[]>elem:
        heapq.heappush(maxh,elem)
    else:
        heapq.heappush(minh,elem)",#sort,3,7119,"['assuming', 'all', 'items', 'in', 'maxheap', 'minheap', 'def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'len', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'return', 'if', 'minh', 'elem', 'heapq', 'heappush', 'maxh', 'elem', 'else', 'heapq', 'heappush', 'minh', 'elem']","['assum', 'all', 'item', 'in', 'maxheap', 'minheap', 'def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'len', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'return', 'if', 'minh', 'elem', 'heapq', 'heappush', 'maxh', 'elem', 'els', 'heapq', 'heappush', 'minh', 'elem']","['assum', 'item', 'maxheap', 'minheap', 'def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'len', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'return', 'minh', 'elem', 'heapq', 'heappush', 'maxh', 'elem', 'els', 'heapq', 'heappush', 'minh', 'elem']",assum item maxheap minheap def add_to_median_heap minh maxh elem len minh heapq heappush minh elem return minh elem heapq heappush maxh elem els heapq heappush minh elem,sortingalgorithms,CS,CS110
143127,"def add_to_median_heap(minh, maxh, elem): 
    if len(maxh) ==  and len(maxh) == :
        heapq.heappush(minh, elem)
    elif len(maxh) == :
        if elem >= minh[]:
            heapq.heappush(minh, elem)        
        else:
             _heappush_max(maxh, elem)
    elif len(minh) == :
        if elem <= maxh[]:
            _heappush_max(maxh, elem)
        else:
            heapq.heappush(minh, elem) 
    elif elem <= maxh[]:
        _heappush_max(maxh, elem)    
    elif elem >= minh[]:
        heapq.heappush(minh, elem)   
    elif elem > maxh[] and elem < minh[]:
       if",#sort,4,7119,"['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'len', 'maxh', 'and', 'len', 'maxh', 'heapq', 'heappush', 'minh', 'elem', 'elif', 'len', 'maxh', 'if', 'elem', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'else', '_heappush_max', 'maxh', 'elem', 'elif', 'len', 'minh', 'if', 'elem', 'maxh', '_heappush_max', 'maxh', 'elem', 'else', 'heapq', 'heappush', 'minh', 'elem', 'elif', 'elem', 'maxh', '_heappush_max', 'maxh', 'elem', 'elif', 'elem', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'elif', 'elem', 'maxh', 'and', 'elem', 'minh', 'if']","['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'len', 'maxh', 'and', 'len', 'maxh', 'heapq', 'heappush', 'minh', 'elem', 'elif', 'len', 'maxh', 'if', 'elem', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'els', '_heappush_max', 'maxh', 'elem', 'elif', 'len', 'minh', 'if', 'elem', 'maxh', '_heappush_max', 'maxh', 'elem', 'els', 'heapq', 'heappush', 'minh', 'elem', 'elif', 'elem', 'maxh', '_heappush_max', 'maxh', 'elem', 'elif', 'elem', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'elif', 'elem', 'maxh', 'and', 'elem', 'minh', 'if']","['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'len', 'maxh', 'len', 'maxh', 'heapq', 'heappush', 'minh', 'elem', 'elif', 'len', 'maxh', 'elem', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'els', '_heappush_max', 'maxh', 'elem', 'elif', 'len', 'minh', 'elem', 'maxh', '_heappush_max', 'maxh', 'elem', 'els', 'heapq', 'heappush', 'minh', 'elem', 'elif', 'elem', 'maxh', '_heappush_max', 'maxh', 'elem', 'elif', 'elem', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'elif', 'elem', 'maxh', 'elem', 'minh']",def add_to_median_heap minh maxh elem len maxh len maxh heapq heappush minh elem elif len maxh elem minh heapq heappush minh elem els _heappush_max maxh elem elif len minh elem maxh _heappush_max maxh elem els heapq heappush minh elem elif elem maxh _heappush_max maxh elem elif elem minh heapq heappush minh elem elif elem maxh elem minh,sortingalgorithms,CS,CS110
143127,"def add_to_median_heap(minh, maxh, elem): 
    if elem >= minh[]: 
        heapq.heappush(minh, elem)
    elif elem < maxh[]: 
        maxh = [i*- for i in maxh[:len(maxh)]]
        elem = elem*-
        heapq.heappush(maxh, elem) 
        maxh = [i*- for i in maxh[:len(maxh)]]
    #Now will check that they are within  of each others' length  
    i = False 
    while i == False : 
        if len(maxh)== len(minh) or len(maxh) == len(minh)+ or len(minh) == len(maxh)+: 
            i = True 
            return minh, maxh  
        if len(maxh)> len(minh): 
            #pop maxh[] and",#sort,3,7119,"['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'elem', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'elif', 'elem', 'maxh', 'maxh', 'i', 'for', 'i', 'in', 'maxh', 'len', 'maxh', 'elem', 'elem', 'heapq', 'heappush', 'maxh', 'elem', 'maxh', 'i', 'for', 'i', 'in', 'maxh', 'len', 'maxh', 'Now', 'will', 'check', 'that', 'they', 'are', 'within', 'of', 'each', ""others'"", 'length', 'i', 'False', 'while', 'i', 'False', 'if', 'len', 'maxh', 'len', 'minh', 'or', 'len', 'maxh', 'len', 'minh', 'or', 'len', 'minh', 'len', 'maxh', 'i', 'True', 'return', 'minh', 'maxh', 'if', 'len', 'maxh', 'len', 'minh', 'pop', 'maxh', 'and']","['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'elem', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'elif', 'elem', 'maxh', 'maxh', 'i', 'for', 'i', 'in', 'maxh', 'len', 'maxh', 'elem', 'elem', 'heapq', 'heappush', 'maxh', 'elem', 'maxh', 'i', 'for', 'i', 'in', 'maxh', 'len', 'maxh', 'now', 'will', 'check', 'that', 'they', 'are', 'within', 'of', 'each', 'other', 'length', 'i', 'fals', 'while', 'i', 'fals', 'if', 'len', 'maxh', 'len', 'minh', 'or', 'len', 'maxh', 'len', 'minh', 'or', 'len', 'minh', 'len', 'maxh', 'i', 'true', 'return', 'minh', 'maxh', 'if', 'len', 'maxh', 'len', 'minh', 'pop', 'maxh', 'and']","['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'elem', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'elif', 'elem', 'maxh', 'maxh', 'maxh', 'len', 'maxh', 'elem', 'elem', 'heapq', 'heappush', 'maxh', 'elem', 'maxh', 'maxh', 'len', 'maxh', 'check', 'within', 'length', 'fals', 'fals', 'len', 'maxh', 'len', 'minh', 'len', 'maxh', 'len', 'minh', 'len', 'minh', 'len', 'maxh', 'true', 'return', 'minh', 'maxh', 'len', 'maxh', 'len', 'minh', 'pop', 'maxh']",def add_to_median_heap minh maxh elem elem minh heapq heappush minh elem elif elem maxh maxh maxh len maxh elem elem heapq heappush maxh elem maxh maxh len maxh check within length fals fals len maxh len minh len maxh len minh len minh len maxh true return minh maxh len maxh len minh pop maxh,sortingalgorithms,CS,CS110
143127,"import heapq, random
#def add_to_median_heap(minh, maxh, a)

maxh = []
minh = []
    
for i in range(,,):

    # Initialize the data-structure and insert/push the st streaming value
    if not maxh and not minh:
        heapq.heappush(maxh,-i)
        print float(i)
    elif maxh:

        # Insert/push the other streaming values
        if i >= -maxh[]:
            heapq.heappush(minh,i)
        else:
            heapq.heappush(maxh,-i)

        # Calculate the median
        if len(maxh)==len(minh):
            print float(-maxh[]+minh[])/
        elif len(maxh)==len(minh)+:
   ..",#sort,3,7119,"['import', 'heapq', 'random', 'def', 'add_to_median_heap', 'minh', 'maxh', 'a', 'maxh', 'minh', 'for', 'i', 'in', 'range', 'Initialize', 'the', 'data', 'structure', 'and', 'insert', 'push', 'the', 'st', 'streaming', 'value', 'if', 'not', 'maxh', 'and', 'not', 'minh', 'heapq', 'heappush', 'maxh', 'i', 'print', 'float', 'i', 'elif', 'maxh', 'Insert', 'push', 'the', 'other', 'streaming', 'values', 'if', 'i', 'maxh', 'heapq', 'heappush', 'minh', 'i', 'else', 'heapq', 'heappush', 'maxh', 'i', 'Calculate', 'the', 'median', 'if', 'len', 'maxh', 'len', 'minh', 'print', 'float', 'maxh', 'minh', 'elif', 'len', 'maxh', 'len', 'minh']","['import', 'heapq', 'random', 'def', 'add_to_median_heap', 'minh', 'maxh', 'a', 'maxh', 'minh', 'for', 'i', 'in', 'rang', 'initi', 'the', 'data', 'structur', 'and', 'insert', 'push', 'the', 'st', 'stream', 'valu', 'if', 'not', 'maxh', 'and', 'not', 'minh', 'heapq', 'heappush', 'maxh', 'i', 'print', 'float', 'i', 'elif', 'maxh', 'insert', 'push', 'the', 'other', 'stream', 'valu', 'if', 'i', 'maxh', 'heapq', 'heappush', 'minh', 'i', 'els', 'heapq', 'heappush', 'maxh', 'i', 'calcul', 'the', 'median', 'if', 'len', 'maxh', 'len', 'minh', 'print', 'float', 'maxh', 'minh', 'elif', 'len', 'maxh', 'len', 'minh']","['import', 'heapq', 'random', 'def', 'add_to_median_heap', 'minh', 'maxh', 'maxh', 'minh', 'rang', 'initi', 'data', 'structur', 'insert', 'push', 'st', 'stream', 'valu', 'maxh', 'minh', 'heapq', 'heappush', 'maxh', 'print', 'float', 'elif', 'maxh', 'insert', 'push', 'stream', 'valu', 'maxh', 'heapq', 'heappush', 'minh', 'els', 'heapq', 'heappush', 'maxh', 'calcul', 'median', 'len', 'maxh', 'len', 'minh', 'print', 'float', 'maxh', 'minh', 'elif', 'len', 'maxh', 'len', 'minh']",import heapq random def add_to_median_heap minh maxh maxh minh rang initi data structur insert push st stream valu maxh minh heapq heappush maxh print float elif maxh insert push stream valu maxh heapq heappush minh els heapq heappush maxh calcul median len maxh len minh print float maxh minh elif len maxh len minh,sortingalgorithms,CS,CS110
143127,"import heapq

def median(minh, maxh):
    minh_max = - * minh[]
    maxh_min = minh[]
    if (len(minh)+len(maxh)) %  == :
        return (minh_max + maxh_min) / 
    else:
        return minh_max

add_to_median_heap(minh, maxh, a):
    if len(minh) == : heapq.heappush(minh, -*a)
    else:
        minh_max = - * minh[]
        if a > minheap_max:
            heapq.heappush(maxh, a)
        else:
            heapq.heappush(minheap, -*a)
        if len(minh) > len(maxh) + :
            heapq.heappush(minh, -*heapq.heappop(minh))
        else lif len(minh) < len(maxh):
            he",#sort,3,7119,"['import', 'heapq', 'def', 'median', 'minh', 'maxh', 'minh_max', 'minh', 'maxh_min', 'minh', 'if', 'len', 'minh', 'len', 'maxh', 'return', 'minh_max', 'maxh_min', 'else', 'return', 'minh_max', 'add_to_median_heap', 'minh', 'maxh', 'a', 'if', 'len', 'minh', 'heapq', 'heappush', 'minh', 'a', 'else', 'minh_max', 'minh', 'if', 'a', 'minheap_max', 'heapq', 'heappush', 'maxh', 'a', 'else', 'heapq', 'heappush', 'minheap', 'a', 'if', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'minh', 'else', 'lif', 'len', 'minh', 'len', 'maxh', 'he']","['import', 'heapq', 'def', 'median', 'minh', 'maxh', 'minh_max', 'minh', 'maxh_min', 'minh', 'if', 'len', 'minh', 'len', 'maxh', 'return', 'minh_max', 'maxh_min', 'els', 'return', 'minh_max', 'add_to_median_heap', 'minh', 'maxh', 'a', 'if', 'len', 'minh', 'heapq', 'heappush', 'minh', 'a', 'els', 'minh_max', 'minh', 'if', 'a', 'minheap_max', 'heapq', 'heappush', 'maxh', 'a', 'els', 'heapq', 'heappush', 'minheap', 'a', 'if', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'minh', 'els', 'lif', 'len', 'minh', 'len', 'maxh', 'he']","['import', 'heapq', 'def', 'median', 'minh', 'maxh', 'minh_max', 'minh', 'maxh_min', 'minh', 'len', 'minh', 'len', 'maxh', 'return', 'minh_max', 'maxh_min', 'els', 'return', 'minh_max', 'add_to_median_heap', 'minh', 'maxh', 'len', 'minh', 'heapq', 'heappush', 'minh', 'els', 'minh_max', 'minh', 'minheap_max', 'heapq', 'heappush', 'maxh', 'els', 'heapq', 'heappush', 'minheap', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'minh', 'els', 'lif', 'len', 'minh', 'len', 'maxh']",import heapq def median minh maxh minh_max minh maxh_min minh len minh len maxh return minh_max maxh_min els return minh_max add_to_median_heap minh maxh len minh heapq heappush minh els minh_max minh minheap_max heapq heappush maxh els heapq heappush minheap len minh len maxh heapq heappush minh heapq heappop minh els lif len minh len maxh,sortingalgorithms,CS,CS110
143135,"def add_median(minheap,maxheap,a):
    if len(minheap)==:
        minheap.insert(,a)
    else:        
        if len(maxheap)==:
            maxheap.insert(,a)
        else: 
            if a>=minheap[] and len(maxheap)>: 
                minheap.insert(,a)
                heapify(minheap)
            elif a<minheap[] and len(minheap)>: 
                maxheap.insert(,a)
                buildmaxheap(maxheap)
    if len(maxheap)>len(minheap)+:
        x=maxheap.pop()
        minheap.insert(,x)
        buildmaxheap(maxheap)
        heapify(minheap)
    if len(minheap)>len",#sort,3,7120,"['def', 'add_median', 'minheap', 'maxheap', 'a', 'if', 'len', 'minheap', 'minheap', 'insert', 'a', 'else', 'if', 'len', 'maxheap', 'maxheap', 'insert', 'a', 'else', 'if', 'a', 'minheap', 'and', 'len', 'maxheap', 'minheap', 'insert', 'a', 'heapify', 'minheap', 'elif', 'a', 'minheap', 'and', 'len', 'minheap', 'maxheap', 'insert', 'a', 'buildmaxheap', 'maxheap', 'if', 'len', 'maxheap', 'len', 'minheap', 'x', 'maxheap', 'pop', 'minheap', 'insert', 'x', 'buildmaxheap', 'maxheap', 'heapify', 'minheap', 'if', 'len', 'minheap', 'len']","['def', 'add_median', 'minheap', 'maxheap', 'a', 'if', 'len', 'minheap', 'minheap', 'insert', 'a', 'els', 'if', 'len', 'maxheap', 'maxheap', 'insert', 'a', 'els', 'if', 'a', 'minheap', 'and', 'len', 'maxheap', 'minheap', 'insert', 'a', 'heapifi', 'minheap', 'elif', 'a', 'minheap', 'and', 'len', 'minheap', 'maxheap', 'insert', 'a', 'buildmaxheap', 'maxheap', 'if', 'len', 'maxheap', 'len', 'minheap', 'x', 'maxheap', 'pop', 'minheap', 'insert', 'x', 'buildmaxheap', 'maxheap', 'heapifi', 'minheap', 'if', 'len', 'minheap', 'len']","['def', 'add_median', 'minheap', 'maxheap', 'len', 'minheap', 'minheap', 'insert', 'els', 'len', 'maxheap', 'maxheap', 'insert', 'els', 'minheap', 'len', 'maxheap', 'minheap', 'insert', 'heapifi', 'minheap', 'elif', 'minheap', 'len', 'minheap', 'maxheap', 'insert', 'buildmaxheap', 'maxheap', 'len', 'maxheap', 'len', 'minheap', 'x', 'maxheap', 'pop', 'minheap', 'insert', 'x', 'buildmaxheap', 'maxheap', 'heapifi', 'minheap', 'len', 'minheap', 'len']",def add_median minheap maxheap len minheap minheap insert els len maxheap maxheap insert els minheap len maxheap minheap insert heapifi minheap elif minheap len minheap maxheap insert buildmaxheap maxheap len maxheap len minheap x maxheap pop minheap insert x buildmaxheap maxheap heapifi minheap len minheap len,sortingalgorithms,CS,CS110
143135,"def add_to_median_heap(minh, maxh, elem):
    heapq.heappush(minh, elem)
    heapq.heappush(maxh, elem)
    return median_heap
    
def median(minh, maxh):
    median = 
    s = sorted(minh)
    r = sorted(maxh)
    K = s+r
    length = len(K)
    centre = length / 
    if length %  == :
        x = 
        mn = []
        mn = K[centre- : centre+ ]
        for i in mn:
            x += i
            median = x / 
        return median_heap
    else:
        return K[centre]",#sort,1,7120,"['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'heapq', 'heappush', 'minh', 'elem', 'heapq', 'heappush', 'maxh', 'elem', 'return', 'median_heap', 'def', 'median', 'minh', 'maxh', 'median', 's', 'sorted', 'minh', 'r', 'sorted', 'maxh', 'K', 's', 'r', 'length', 'len', 'K', 'centre', 'length', 'if', 'length', 'x', 'mn', 'mn', 'K', 'centre', 'centre', 'for', 'i', 'in', 'mn', 'x', 'i', 'median', 'x', 'return', 'median_heap', 'else', 'return', 'K', 'centre']","['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'heapq', 'heappush', 'minh', 'elem', 'heapq', 'heappush', 'maxh', 'elem', 'return', 'median_heap', 'def', 'median', 'minh', 'maxh', 'median', 's', 'sort', 'minh', 'r', 'sort', 'maxh', 'k', 's', 'r', 'length', 'len', 'k', 'centr', 'length', 'if', 'length', 'x', 'mn', 'mn', 'k', 'centr', 'centr', 'for', 'i', 'in', 'mn', 'x', 'i', 'median', 'x', 'return', 'median_heap', 'els', 'return', 'k', 'centr']","['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'heapq', 'heappush', 'minh', 'elem', 'heapq', 'heappush', 'maxh', 'elem', 'return', 'median_heap', 'def', 'median', 'minh', 'maxh', 'median', 'sort', 'minh', 'r', 'sort', 'maxh', 'k', 'r', 'length', 'len', 'k', 'centr', 'length', 'length', 'x', 'mn', 'mn', 'k', 'centr', 'centr', 'mn', 'x', 'median', 'x', 'return', 'median_heap', 'els', 'return', 'k', 'centr']",def add_to_median_heap minh maxh elem heapq heappush minh elem heapq heappush maxh elem return median_heap def median minh maxh median sort minh r sort maxh k r length len k centr length length x mn mn k centr centr mn x median x return median_heap els return k centr,sortingalgorithms,CS,CS110
143135,"def add_to_median_heap(minh,maxh,elem):
    if len(minh) == :
        heapq.heappush(minh,elem)
    else:
        med = median(minh,maxh)
        if med <= elem:
            heapq.heappush(minh,elem)
        else:
            heapq.heappush(maxh,-*elem)
        if len(minh) == len(maxh):
            pass
        else:
            if len(minh) - len(maxh) > :
                heapq.heappush(maxh,-*heapq.heappop(minh))
            elif len(maxh) - len(minh) > :
                heapq.heappush(minh,-*heapq.heappop(maxh))",#sort,4,7120,"['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'len', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'else', 'med', 'median', 'minh', 'maxh', 'if', 'med', 'elem', 'heapq', 'heappush', 'minh', 'elem', 'else', 'heapq', 'heappush', 'maxh', 'elem', 'if', 'len', 'minh', 'len', 'maxh', 'pass', 'else', 'if', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'elif', 'len', 'maxh', 'len', 'minh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'maxh']","['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'if', 'len', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'els', 'med', 'median', 'minh', 'maxh', 'if', 'med', 'elem', 'heapq', 'heappush', 'minh', 'elem', 'els', 'heapq', 'heappush', 'maxh', 'elem', 'if', 'len', 'minh', 'len', 'maxh', 'pass', 'els', 'if', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'elif', 'len', 'maxh', 'len', 'minh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'maxh']","['def', 'add_to_median_heap', 'minh', 'maxh', 'elem', 'len', 'minh', 'heapq', 'heappush', 'minh', 'elem', 'els', 'med', 'median', 'minh', 'maxh', 'med', 'elem', 'heapq', 'heappush', 'minh', 'elem', 'els', 'heapq', 'heappush', 'maxh', 'elem', 'len', 'minh', 'len', 'maxh', 'pass', 'els', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'elif', 'len', 'maxh', 'len', 'minh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'maxh']",def add_to_median_heap minh maxh elem len minh heapq heappush minh elem els med median minh maxh med elem heapq heappush minh elem els heapq heappush maxh elem len minh len maxh pass els len minh len maxh heapq heappush maxh heapq heappop minh elif len maxh len minh heapq heappush minh heapq heappop maxh,sortingalgorithms,CS,CS110
143135,"def add_to_median_heap(minh, maxh, a):
    if len(minh) == : 
        heapq.heappush(minh, -*a)
    else:
        maxh_max = - * minh[]
        if a > maxh_max:
            heapq.heappush(maxh, a)
        else:
            heapq.heappush(minh, -*a)
        if len(minh) > len(maxh) + :
            heapq.heappush(maxh, -*heapq.heappop(minh))
        elif len(minh) < len(maxh):
            heapq.heappush(minh, -*heapq.heappop(maxh))",#sort,3,7120,"['def', 'add_to_median_heap', 'minh', 'maxh', 'a', 'if', 'len', 'minh', 'heapq', 'heappush', 'minh', 'a', 'else', 'maxh_max', 'minh', 'if', 'a', 'maxh_max', 'heapq', 'heappush', 'maxh', 'a', 'else', 'heapq', 'heappush', 'minh', 'a', 'if', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'elif', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'maxh']","['def', 'add_to_median_heap', 'minh', 'maxh', 'a', 'if', 'len', 'minh', 'heapq', 'heappush', 'minh', 'a', 'els', 'maxh_max', 'minh', 'if', 'a', 'maxh_max', 'heapq', 'heappush', 'maxh', 'a', 'els', 'heapq', 'heappush', 'minh', 'a', 'if', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'elif', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'maxh']","['def', 'add_to_median_heap', 'minh', 'maxh', 'len', 'minh', 'heapq', 'heappush', 'minh', 'els', 'maxh_max', 'minh', 'maxh_max', 'heapq', 'heappush', 'maxh', 'els', 'heapq', 'heappush', 'minh', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'maxh', 'heapq', 'heappop', 'minh', 'elif', 'len', 'minh', 'len', 'maxh', 'heapq', 'heappush', 'minh', 'heapq', 'heappop', 'maxh']",def add_to_median_heap minh maxh len minh heapq heappush minh els maxh_max minh maxh_max heapq heappush maxh els heapq heappush minh len minh len maxh heapq heappush maxh heapq heappop minh elif len minh len maxh heapq heappush minh heapq heappop maxh,sortingalgorithms,CS,CS110
202359,"When dividing the array into two parts, I used a[:int(len(a)/)] and a[int(len(a)/):]. The implementation of int() avoids the occurrence of indexes in decimal numbers. Also, I set the limit to stop breaking down in the recursion to be len(a) == . So if the list has odd number of entries, it won't have any difference than even length arrays other than some arrays may skip the first ""conquer"" step (Since it does not have another length one array to compare to)",#sort,4,9531,"['When', 'dividing', 'the', 'array', 'into', 'two', 'parts', 'I', 'used', 'a', 'int', 'len', 'a', 'and', 'a', 'int', 'len', 'a', 'The', 'implementation', 'of', 'int', 'avoids', 'the', 'occurrence', 'of', 'indexes', 'in', 'decimal', 'numbers', 'Also', 'I', 'set', 'the', 'limit', 'to', 'stop', 'breaking', 'down', 'in', 'the', 'recursion', 'to', 'be', 'len', 'a', 'So', 'if', 'the', 'list', 'has', 'odd', 'number', 'of', 'entries', 'it', ""won't"", 'have', 'any', 'difference', 'than', 'even', 'length', 'arrays', 'other', 'than', 'some', 'arrays', 'may', 'skip', 'the', 'first', 'conquer', 'step', 'Since', 'it', 'does', 'not', 'have', 'another', 'length', 'one', 'array', 'to', 'compare', 'to']","['when', 'divid', 'the', 'array', 'into', 'two', 'part', 'i', 'use', 'a', 'int', 'len', 'a', 'and', 'a', 'int', 'len', 'a', 'the', 'implement', 'of', 'int', 'avoid', 'the', 'occurr', 'of', 'index', 'in', 'decim', 'number', 'also', 'i', 'set', 'the', 'limit', 'to', 'stop', 'break', 'down', 'in', 'the', 'recurs', 'to', 'be', 'len', 'a', 'so', 'if', 'the', 'list', 'has', 'odd', 'number', 'of', 'entri', 'it', ""won't"", 'have', 'ani', 'differ', 'than', 'even', 'length', 'array', 'other', 'than', 'some', 'array', 'may', 'skip', 'the', 'first', 'conquer', 'step', 'sinc', 'it', 'doe', 'not', 'have', 'anoth', 'length', 'one', 'array', 'to', 'compar', 'to']","['divid', 'array', 'two', 'part', 'int', 'len', 'int', 'len', 'implement', 'int', 'avoid', 'occurr', 'index', 'decim', 'number', 'set', 'limit', 'stop', 'break', 'recurs', 'len', 'list', 'odd', 'number', 'entri', 'ani', 'differ', 'even', 'length', 'array', 'array', 'may', 'skip', 'first', 'conquer', 'step', 'sinc', 'doe', 'anoth', 'length', 'one', 'array', 'compar']",divid array two part int len int len implement int avoid occurr index decim number set limit stop break recurs len list odd number entri ani differ even length array array may skip first conquer step sinc doe anoth length one array compar,sortingalgorithms,CS,CS110
90524,"p(A)*p(B)*p(C|A, B)*p(D|C). Because the graph is acyclic, there are terminal nodes with in-degree == . Follow the dependency from there.",#graphicalmodels,4,1902,"['p', 'A', 'p', 'B', 'p', 'C', 'A', 'B', 'p', 'D', 'C', 'Because', 'the', 'graph', 'is', 'acyclic', 'there', 'are', 'terminal', 'nodes', 'with', 'in', 'degree', 'Follow', 'the', 'dependency', 'from', 'there']","['p', 'a', 'p', 'b', 'p', 'c', 'a', 'b', 'p', 'd', 'c', 'becaus', 'the', 'graph', 'is', 'acycl', 'there', 'are', 'termin', 'node', 'with', 'in', 'degre', 'follow', 'the', 'depend', 'from', 'there']","['p', 'p', 'b', 'p', 'c', 'b', 'p', 'c', 'becaus', 'graph', 'acycl', 'termin', 'node', 'degre', 'follow', 'depend']",p p b p c b p c becaus graph acycl termin node degre follow depend,graphicalmodels,CS,CS156
90538,"I chose a model with low complexity (simple multiple regression), and used cross-validation to test its results. I think it is probably on the underfitting side given the low complexity and without interaction terms. My Facebook model returned that 'type'==Video, 'category' and 'paid' statistically significantly contribute to like/comment/share. Otherwise, it has a relatively low R^ - not very confident in its predictive power.",#overfitting,4,1908,"['I', 'chose', 'a', 'model', 'with', 'low', 'complexity', 'simple', 'multiple', 'regression', 'and', 'used', 'cross', 'validation', 'to', 'test', 'its', 'results', 'I', 'think', 'it', 'is', 'probably', 'on', 'the', 'underfitting', 'side', 'given', 'the', 'low', 'complexity', 'and', 'without', 'interaction', 'terms', 'My', 'Facebook', 'model', 'returned', 'that', ""'type'"", 'Video', ""'category'"", 'and', ""'paid'"", 'statistically', 'significantly', 'contribute', 'to', 'like', 'comment', 'share', 'Otherwise', 'it', 'has', 'a', 'relatively', 'low', 'R', 'not', 'very', 'confident', 'in', 'its', 'predictive', 'power']","['i', 'chose', 'a', 'model', 'with', 'low', 'complex', 'simpl', 'multipl', 'regress', 'and', 'use', 'cross', 'valid', 'to', 'test', 'it', 'result', 'i', 'think', 'it', 'is', 'probabl', 'on', 'the', 'underfit', 'side', 'given', 'the', 'low', 'complex', 'and', 'without', 'interact', 'term', 'my', 'facebook', 'model', 'return', 'that', 'type', 'video', 'categori', 'and', 'paid', 'statist', 'signific', 'contribut', 'to', 'like', 'comment', 'share', 'otherwis', 'it', 'has', 'a', 'relat', 'low', 'r', 'not', 'veri', 'confid', 'in', 'it', 'predict', 'power']","['chose', 'model', 'low', 'complex', 'simpl', 'multipl', 'regress', 'cross', 'valid', 'test', 'result', 'think', 'probabl', 'underfit', 'side', 'given', 'low', 'complex', 'without', 'interact', 'term', 'facebook', 'model', 'return', 'type', 'video', 'categori', 'paid', 'statist', 'signific', 'contribut', 'like', 'comment', 'share', 'otherwis', 'relat', 'low', 'r', 'veri', 'confid', 'predict', 'power']",chose model low complex simpl multipl regress cross valid test result think probabl underfit side given low complex without interact term facebook model return type video categori paid statist signific contribut like comment share otherwis relat low r veri confid predict power,overfitting,CS,CS156
90556,"predicted = clf.predict(X_test)
np.mean(predicted==y_test)",#modelmetrics,4,1916,"['predicted', 'clf', 'predict', 'X_test', 'np', 'mean', 'predicted', 'y_test']","['predict', 'clf', 'predict', 'x_test', 'np', 'mean', 'predict', 'y_test']","['predict', 'clf', 'predict', 'x_test', 'np', 'mean', 'predict', 'y_test']",predict clf predict x_test np mean predict y_test,modelmetrics,CS,CS156
90556,"sum(casualty_test[Y] == cas_test_pred) / float(len(casualty_test))
print(classification_report(casualty_test[Y], cas_test_pred))
# redundant, but just keeping them in for completion's sake
accuracy_score(casualty_test['severe'], cas_test_pred)
precision_score(casualty_test['severe'], cas_test_pred)
recall_score(casualty_test['severe'], cas_test_pred)
roc_auc_score(casualty_test['severe'], cas_test_pred)",#modelmetrics,4,1916,"['sum', 'casualty_test', 'Y', 'cas_test_pred', 'float', 'len', 'casualty_test', 'print', 'classification_report', 'casualty_test', 'Y', 'cas_test_pred', 'redundant', 'but', 'just', 'keeping', 'them', 'in', 'for', ""completion's"", 'sake', 'accuracy_score', 'casualty_test', ""'severe'"", 'cas_test_pred', 'precision_score', 'casualty_test', ""'severe'"", 'cas_test_pred', 'recall_score', 'casualty_test', ""'severe'"", 'cas_test_pred', 'roc_auc_score', 'casualty_test', ""'severe'"", 'cas_test_pred']","['sum', 'casualty_test', 'y', 'cas_test_pr', 'float', 'len', 'casualty_test', 'print', 'classification_report', 'casualty_test', 'y', 'cas_test_pr', 'redund', 'but', 'just', 'keep', 'them', 'in', 'for', 'complet', 'sake', 'accuracy_scor', 'casualty_test', 'sever', 'cas_test_pr', 'precision_scor', 'casualty_test', 'sever', 'cas_test_pr', 'recall_scor', 'casualty_test', 'sever', 'cas_test_pr', 'roc_auc_scor', 'casualty_test', 'sever', 'cas_test_pr']","['sum', 'casualty_test', 'cas_test_pr', 'float', 'len', 'casualty_test', 'print', 'classification_report', 'casualty_test', 'cas_test_pr', 'redund', 'keep', 'complet', 'sake', 'accuracy_scor', 'casualty_test', 'sever', 'cas_test_pr', 'precision_scor', 'casualty_test', 'sever', 'cas_test_pr', 'recall_scor', 'casualty_test', 'sever', 'cas_test_pr', 'roc_auc_scor', 'casualty_test', 'sever', 'cas_test_pr']",sum casualty_test cas_test_pr float len casualty_test print classification_report casualty_test cas_test_pr redund keep complet sake accuracy_scor casualty_test sever cas_test_pr precision_scor casualty_test sever cas_test_pr recall_scor casualty_test sever cas_test_pr roc_auc_scor casualty_test sever cas_test_pr,modelmetrics,CS,CS156
105344,"unfortunately, i was unable to complete this part of pre-class work fully as i could only complete the search function of the BST: 
def search(root, value):
    # Your code goes here
    if root is None or value == root.data
        return root
    else:
        if value < root.value:
            return search(root.l_child, value)
        else:
            return search(root.r_child, value)

this is for search:
for i in range():
    print search(root, i)",#searchtrees,2,3686,"['unfortunately', 'i', 'was', 'unable', 'to', 'complete', 'this', 'part', 'of', 'pre', 'class', 'work', 'fully', 'as', 'i', 'could', 'only', 'complete', 'the', 'search', 'function', 'of', 'the', 'BST', 'def', 'search', 'root', 'value', 'Your', 'code', 'goes', 'here', 'if', 'root', 'is', 'None', 'or', 'value', 'root', 'data', 'return', 'root', 'else', 'if', 'value', 'root', 'value', 'return', 'search', 'root', 'l_child', 'value', 'else', 'return', 'search', 'root', 'r_child', 'value', 'this', 'is', 'for', 'search', 'for', 'i', 'in', 'range', 'print', 'search', 'root', 'i']","['unfortun', 'i', 'was', 'unabl', 'to', 'complet', 'this', 'part', 'of', 'pre', 'class', 'work', 'fulli', 'as', 'i', 'could', 'onli', 'complet', 'the', 'search', 'function', 'of', 'the', 'bst', 'def', 'search', 'root', 'valu', 'your', 'code', 'goe', 'here', 'if', 'root', 'is', 'none', 'or', 'valu', 'root', 'data', 'return', 'root', 'els', 'if', 'valu', 'root', 'valu', 'return', 'search', 'root', 'l_child', 'valu', 'els', 'return', 'search', 'root', 'r_child', 'valu', 'this', 'is', 'for', 'search', 'for', 'i', 'in', 'rang', 'print', 'search', 'root', 'i']","['unfortun', 'unabl', 'complet', 'part', 'pre', 'class', 'work', 'fulli', 'onli', 'complet', 'search', 'function', 'bst', 'def', 'search', 'root', 'valu', 'code', 'goe', 'root', 'none', 'valu', 'root', 'data', 'return', 'root', 'els', 'valu', 'root', 'valu', 'return', 'search', 'root', 'l_child', 'valu', 'els', 'return', 'search', 'root', 'r_child', 'valu', 'search', 'rang', 'print', 'search', 'root']",unfortun unabl complet part pre class work fulli onli complet search function bst def search root valu code goe root none valu root data return root els valu root valu return search root l_child valu els return search root r_child valu search rang print search root,search,CS,CS152
105344,"def search(root, value):
    while root != None and value != root.data:
        if value < root.data:
            root = root.l_child
        else:
            root = root.r_child

def minimum(x):
    while x.left != None:
        x = x.left
    return x

def transplant(t,u,v):
    if u.parent == None:
        t.root = v
    elif u == u.l_parent:
        u.l_parent = v
    else u.r_parent = v
    if v != None:
        v.parent = u.parent

def delete(root, node):
 
I did not get my code to work properly, so I was not able to find out how it compared to the BST implementation with a sorted list.",#searchtrees,2,3686,"['def', 'search', 'root', 'value', 'while', 'root', 'None', 'and', 'value', 'root', 'data', 'if', 'value', 'root', 'data', 'root', 'root', 'l_child', 'else', 'root', 'root', 'r_child', 'def', 'minimum', 'x', 'while', 'x', 'left', 'None', 'x', 'x', 'left', 'return', 'x', 'def', 'transplant', 't', 'u', 'v', 'if', 'u', 'parent', 'None', 't', 'root', 'v', 'elif', 'u', 'u', 'l_parent', 'u', 'l_parent', 'v', 'else', 'u', 'r_parent', 'v', 'if', 'v', 'None', 'v', 'parent', 'u', 'parent', 'def', 'delete', 'root', 'node', 'I', 'did', 'not', 'get', 'my', 'code', 'to', 'work', 'properly', 'so', 'I', 'was', 'not', 'able', 'to', 'find', 'out', 'how', 'it', 'compared', 'to', 'the', 'BST', 'implementation', 'with', 'a', 'sorted', 'list']","['def', 'search', 'root', 'valu', 'while', 'root', 'none', 'and', 'valu', 'root', 'data', 'if', 'valu', 'root', 'data', 'root', 'root', 'l_child', 'els', 'root', 'root', 'r_child', 'def', 'minimum', 'x', 'while', 'x', 'left', 'none', 'x', 'x', 'left', 'return', 'x', 'def', 'transplant', 't', 'u', 'v', 'if', 'u', 'parent', 'none', 't', 'root', 'v', 'elif', 'u', 'u', 'l_parent', 'u', 'l_parent', 'v', 'els', 'u', 'r_parent', 'v', 'if', 'v', 'none', 'v', 'parent', 'u', 'parent', 'def', 'delet', 'root', 'node', 'i', 'did', 'not', 'get', 'my', 'code', 'to', 'work', 'proper', 'so', 'i', 'was', 'not', 'abl', 'to', 'find', 'out', 'how', 'it', 'compar', 'to', 'the', 'bst', 'implement', 'with', 'a', 'sort', 'list']","['def', 'search', 'root', 'valu', 'root', 'none', 'valu', 'root', 'data', 'valu', 'root', 'data', 'root', 'root', 'l_child', 'els', 'root', 'root', 'r_child', 'def', 'minimum', 'x', 'x', 'left', 'none', 'x', 'x', 'left', 'return', 'x', 'def', 'transplant', 'u', 'v', 'u', 'parent', 'none', 'root', 'v', 'elif', 'u', 'u', 'l_parent', 'u', 'l_parent', 'v', 'els', 'u', 'r_parent', 'v', 'v', 'none', 'v', 'parent', 'u', 'parent', 'def', 'delet', 'root', 'node', 'get', 'code', 'work', 'proper', 'abl', 'find', 'compar', 'bst', 'implement', 'sort', 'list']",def search root valu root none valu root data valu root data root root l_child els root root r_child def minimum x x left none x x left return x def transplant u v u parent none root v elif u u l_parent u l_parent v els u r_parent v v none v parent u parent def delet root node get code work proper abl find compar bst implement sort list,search,CS,CS152
105344,"def search(root, value):
    while root != None and value != root.data:
        if value < root.data:
            root = root.l_child
        else: root = root.r_child
    return root

def transplant(root, node, newnode):
    if node.p == None:
        root = newnode
    elif node == node.p.left:
        node.p.left = newnode
    else:
        node.p.right = newnode
    if newnode != None:
        newnode.p = node.p
    
def minimum(node):
    x = None
    while node.left != None:
        x = node.left
        node = node.left
    return x
    
def delete(root, node):
    if node.left == None:",#searchtrees,4,3686,"['def', 'search', 'root', 'value', 'while', 'root', 'None', 'and', 'value', 'root', 'data', 'if', 'value', 'root', 'data', 'root', 'root', 'l_child', 'else', 'root', 'root', 'r_child', 'return', 'root', 'def', 'transplant', 'root', 'node', 'newnode', 'if', 'node', 'p', 'None', 'root', 'newnode', 'elif', 'node', 'node', 'p', 'left', 'node', 'p', 'left', 'newnode', 'else', 'node', 'p', 'right', 'newnode', 'if', 'newnode', 'None', 'newnode', 'p', 'node', 'p', 'def', 'minimum', 'node', 'x', 'None', 'while', 'node', 'left', 'None', 'x', 'node', 'left', 'node', 'node', 'left', 'return', 'x', 'def', 'delete', 'root', 'node', 'if', 'node', 'left', 'None']","['def', 'search', 'root', 'valu', 'while', 'root', 'none', 'and', 'valu', 'root', 'data', 'if', 'valu', 'root', 'data', 'root', 'root', 'l_child', 'els', 'root', 'root', 'r_child', 'return', 'root', 'def', 'transplant', 'root', 'node', 'newnod', 'if', 'node', 'p', 'none', 'root', 'newnod', 'elif', 'node', 'node', 'p', 'left', 'node', 'p', 'left', 'newnod', 'els', 'node', 'p', 'right', 'newnod', 'if', 'newnod', 'none', 'newnod', 'p', 'node', 'p', 'def', 'minimum', 'node', 'x', 'none', 'while', 'node', 'left', 'none', 'x', 'node', 'left', 'node', 'node', 'left', 'return', 'x', 'def', 'delet', 'root', 'node', 'if', 'node', 'left', 'none']","['def', 'search', 'root', 'valu', 'root', 'none', 'valu', 'root', 'data', 'valu', 'root', 'data', 'root', 'root', 'l_child', 'els', 'root', 'root', 'r_child', 'return', 'root', 'def', 'transplant', 'root', 'node', 'newnod', 'node', 'p', 'none', 'root', 'newnod', 'elif', 'node', 'node', 'p', 'left', 'node', 'p', 'left', 'newnod', 'els', 'node', 'p', 'right', 'newnod', 'newnod', 'none', 'newnod', 'p', 'node', 'p', 'def', 'minimum', 'node', 'x', 'none', 'node', 'left', 'none', 'x', 'node', 'left', 'node', 'node', 'left', 'return', 'x', 'def', 'delet', 'root', 'node', 'node', 'left', 'none']",def search root valu root none valu root data valu root data root root l_child els root root r_child return root def transplant root node newnod node p none root newnod elif node node p left node p left newnod els node p right newnod newnod none newnod p node p def minimum node x none node left none x node left node node left return x def delet root node node left none,search,CS,CS152
105344,"I honestly was not able to get that far with the code as I got stuck on implementing deletes. I will paste in what I was able to accomplish. Theoretically, the results should match, though the BST should be faster as it operates in O(h) time whereas sorted list operates in O(lg n) time. Don't know about practically.
def search(root, value):
    while root != None and value != root.value:
        if value < root.value:
            root = root.l_child
        else:
            root = root.r_child
    return root

def delete(root, node):
    if node.r_child == None and node.l_child == None:",#searchtrees,2,3686,"['I', 'honestly', 'was', 'not', 'able', 'to', 'get', 'that', 'far', 'with', 'the', 'code', 'as', 'I', 'got', 'stuck', 'on', 'implementing', 'deletes', 'I', 'will', 'paste', 'in', 'what', 'I', 'was', 'able', 'to', 'accomplish', 'Theoretically', 'the', 'results', 'should', 'match', 'though', 'the', 'BST', 'should', 'be', 'faster', 'as', 'it', 'operates', 'in', 'O', 'h', 'time', 'whereas', 'sorted', 'list', 'operates', 'in', 'O', 'lg', 'n', 'time', ""Don't"", 'know', 'about', 'practically', 'def', 'search', 'root', 'value', 'while', 'root', 'None', 'and', 'value', 'root', 'value', 'if', 'value', 'root', 'value', 'root', 'root', 'l_child', 'else', 'root', 'root', 'r_child', 'return', 'root', 'def', 'delete', 'root', 'node', 'if', 'node', 'r_child', 'None', 'and', 'node', 'l_child', 'None']","['i', 'honest', 'was', 'not', 'abl', 'to', 'get', 'that', 'far', 'with', 'the', 'code', 'as', 'i', 'got', 'stuck', 'on', 'implement', 'delet', 'i', 'will', 'past', 'in', 'what', 'i', 'was', 'abl', 'to', 'accomplish', 'theoret', 'the', 'result', 'should', 'match', 'though', 'the', 'bst', 'should', 'be', 'faster', 'as', 'it', 'oper', 'in', 'o', 'h', 'time', 'wherea', 'sort', 'list', 'oper', 'in', 'o', 'lg', 'n', 'time', ""don't"", 'know', 'about', 'practic', 'def', 'search', 'root', 'valu', 'while', 'root', 'none', 'and', 'valu', 'root', 'valu', 'if', 'valu', 'root', 'valu', 'root', 'root', 'l_child', 'els', 'root', 'root', 'r_child', 'return', 'root', 'def', 'delet', 'root', 'node', 'if', 'node', 'r_child', 'none', 'and', 'node', 'l_child', 'none']","['honest', 'abl', 'get', 'far', 'code', 'got', 'stuck', 'implement', 'delet', 'past', 'abl', 'accomplish', 'theoret', 'result', 'match', 'though', 'bst', 'faster', 'oper', 'h', 'time', 'wherea', 'sort', 'list', 'oper', 'lg', 'n', 'time', 'know', 'practic', 'def', 'search', 'root', 'valu', 'root', 'none', 'valu', 'root', 'valu', 'valu', 'root', 'valu', 'root', 'root', 'l_child', 'els', 'root', 'root', 'r_child', 'return', 'root', 'def', 'delet', 'root', 'node', 'node', 'r_child', 'none', 'node', 'l_child', 'none']",honest abl get far code got stuck implement delet past abl accomplish theoret result match though bst faster oper h time wherea sort list oper lg n time know practic def search root valu root none valu root valu valu root valu root root l_child els root root r_child return root def delet root node node r_child none node l_child none,search,CS,CS152
105349,"arr = []
root = Node()
import random
inserts = [i for i in range()]
random.shuffle(inserts)
deletes = [i for i in range()]
random.shuffle(deletes)
for i in inserts:
    arr.append(i)
    insert(root, Node(i))
    
for d in deletes:
    arr.remove(d)
    elem = search(root, d)
    root = delete(root, elem)

arr = sorted(arr)
lst = tree_output(root) 
return arr == lst",#searchtrees,4,3689,"['arr', 'root', 'Node', 'import', 'random', 'inserts', 'i', 'for', 'i', 'in', 'range', 'random', 'shuffle', 'inserts', 'deletes', 'i', 'for', 'i', 'in', 'range', 'random', 'shuffle', 'deletes', 'for', 'i', 'in', 'inserts', 'arr', 'append', 'i', 'insert', 'root', 'Node', 'i', 'for', 'd', 'in', 'deletes', 'arr', 'remove', 'd', 'elem', 'search', 'root', 'd', 'root', 'delete', 'root', 'elem', 'arr', 'sorted', 'arr', 'lst', 'tree_output', 'root', 'return', 'arr', 'lst']","['arr', 'root', 'node', 'import', 'random', 'insert', 'i', 'for', 'i', 'in', 'rang', 'random', 'shuffl', 'insert', 'delet', 'i', 'for', 'i', 'in', 'rang', 'random', 'shuffl', 'delet', 'for', 'i', 'in', 'insert', 'arr', 'append', 'i', 'insert', 'root', 'node', 'i', 'for', 'd', 'in', 'delet', 'arr', 'remov', 'd', 'elem', 'search', 'root', 'd', 'root', 'delet', 'root', 'elem', 'arr', 'sort', 'arr', 'lst', 'tree_output', 'root', 'return', 'arr', 'lst']","['arr', 'root', 'node', 'import', 'random', 'insert', 'rang', 'random', 'shuffl', 'insert', 'delet', 'rang', 'random', 'shuffl', 'delet', 'insert', 'arr', 'append', 'insert', 'root', 'node', 'delet', 'arr', 'remov', 'elem', 'search', 'root', 'root', 'delet', 'root', 'elem', 'arr', 'sort', 'arr', 'lst', 'tree_output', 'root', 'return', 'arr', 'lst']",arr root node import random insert rang random shuffl insert delet rang random shuffl delet insert arr append insert root node delet arr remov elem search root root delet root elem arr sort arr lst tree_output root return arr lst,search,CS,CS152
105349,"import random

class Node:
    def __init__(self, val):
        self.l_child = None
        self.r_child = None
        self.data = val

def insert(root, node):
    if root is None:
        root = node
    else:
        if root.data > node.data:
            if root.l_child is None:
                root.l_child = node
            else:
                insert(root.l_child, node)
        else:
            if root.r_child is None:
                root.r_child = node
            else:
                insert(root.r_child, node)
def search(root, value):
    if root.data==value or root.data==None: ret",#searchtrees,4,3689,"['import', 'random', 'class', 'Node', 'def', '__init__', 'self', 'val', 'self', 'l_child', 'None', 'self', 'r_child', 'None', 'self', 'data', 'val', 'def', 'insert', 'root', 'node', 'if', 'root', 'is', 'None', 'root', 'node', 'else', 'if', 'root', 'data', 'node', 'data', 'if', 'root', 'l_child', 'is', 'None', 'root', 'l_child', 'node', 'else', 'insert', 'root', 'l_child', 'node', 'else', 'if', 'root', 'r_child', 'is', 'None', 'root', 'r_child', 'node', 'else', 'insert', 'root', 'r_child', 'node', 'def', 'search', 'root', 'value', 'if', 'root', 'data', 'value', 'or', 'root', 'data', 'None', 'ret']","['import', 'random', 'class', 'node', 'def', '__init__', 'self', 'val', 'self', 'l_child', 'none', 'self', 'r_child', 'none', 'self', 'data', 'val', 'def', 'insert', 'root', 'node', 'if', 'root', 'is', 'none', 'root', 'node', 'els', 'if', 'root', 'data', 'node', 'data', 'if', 'root', 'l_child', 'is', 'none', 'root', 'l_child', 'node', 'els', 'insert', 'root', 'l_child', 'node', 'els', 'if', 'root', 'r_child', 'is', 'none', 'root', 'r_child', 'node', 'els', 'insert', 'root', 'r_child', 'node', 'def', 'search', 'root', 'valu', 'if', 'root', 'data', 'valu', 'or', 'root', 'data', 'none', 'ret']","['import', 'random', 'class', 'node', 'def', '__init__', 'self', 'val', 'self', 'l_child', 'none', 'self', 'r_child', 'none', 'self', 'data', 'val', 'def', 'insert', 'root', 'node', 'root', 'none', 'root', 'node', 'els', 'root', 'data', 'node', 'data', 'root', 'l_child', 'none', 'root', 'l_child', 'node', 'els', 'insert', 'root', 'l_child', 'node', 'els', 'root', 'r_child', 'none', 'root', 'r_child', 'node', 'els', 'insert', 'root', 'r_child', 'node', 'def', 'search', 'root', 'valu', 'root', 'data', 'valu', 'root', 'data', 'none', 'ret']",import random class node def __init__ self val self l_child none self r_child none self data val def insert root node root none root node els root data node data root l_child none root l_child node els insert root l_child node els root r_child none root r_child node els insert root r_child node def search root valu root data valu root data none ret,search,CS,CS152
105349,"root = Node()
insert(root, Node())
insert(root, Node())
insert(root, Node())
print print_tree(root)
delete(root,)
print print_tree(root)

lis = []
lis.append()
lis.append()
lis.append()
lis.append()
lis = sorted(lis)
for i in range(len(lis)-):
    if lis[i]==:
        del lis[i]
print lis
I didn't have much time to work on this as I got stuck on the ""delete"". But I figured it out in the end :) The two sequences produced by the list and the tree are the same because they actually perform the same operations, their running time is different, the binary tree is more efficient for",#searchtrees,4,3689,"['root', 'Node', 'insert', 'root', 'Node', 'insert', 'root', 'Node', 'insert', 'root', 'Node', 'print', 'print_tree', 'root', 'delete', 'root', 'print', 'print_tree', 'root', 'lis', 'lis', 'append', 'lis', 'append', 'lis', 'append', 'lis', 'append', 'lis', 'sorted', 'lis', 'for', 'i', 'in', 'range', 'len', 'lis', 'if', 'lis', 'i', 'del', 'lis', 'i', 'print', 'lis', 'I', ""didn't"", 'have', 'much', 'time', 'to', 'work', 'on', 'this', 'as', 'I', 'got', 'stuck', 'on', 'the', 'delete', 'But', 'I', 'figured', 'it', 'out', 'in', 'the', 'end', 'The', 'two', 'sequences', 'produced', 'by', 'the', 'list', 'and', 'the', 'tree', 'are', 'the', 'same', 'because', 'they', 'actually', 'perform', 'the', 'same', 'operations', 'their', 'running', 'time', 'is', 'different', 'the', 'binary', 'tree', 'is', 'more', 'efficient', 'for']","['root', 'node', 'insert', 'root', 'node', 'insert', 'root', 'node', 'insert', 'root', 'node', 'print', 'print_tre', 'root', 'delet', 'root', 'print', 'print_tre', 'root', 'lis', 'lis', 'append', 'lis', 'append', 'lis', 'append', 'lis', 'append', 'lis', 'sort', 'lis', 'for', 'i', 'in', 'rang', 'len', 'lis', 'if', 'lis', 'i', 'del', 'lis', 'i', 'print', 'lis', 'i', ""didn't"", 'have', 'much', 'time', 'to', 'work', 'on', 'this', 'as', 'i', 'got', 'stuck', 'on', 'the', 'delet', 'but', 'i', 'figur', 'it', 'out', 'in', 'the', 'end', 'the', 'two', 'sequenc', 'produc', 'by', 'the', 'list', 'and', 'the', 'tree', 'are', 'the', 'same', 'becaus', 'they', 'actual', 'perform', 'the', 'same', 'oper', 'their', 'run', 'time', 'is', 'differ', 'the', 'binari', 'tree', 'is', 'more', 'effici', 'for']","['root', 'node', 'insert', 'root', 'node', 'insert', 'root', 'node', 'insert', 'root', 'node', 'print', 'print_tre', 'root', 'delet', 'root', 'print', 'print_tre', 'root', 'lis', 'lis', 'append', 'lis', 'append', 'lis', 'append', 'lis', 'append', 'lis', 'sort', 'lis', 'rang', 'len', 'lis', 'lis', 'del', 'lis', 'print', 'lis', 'much', 'time', 'work', 'got', 'stuck', 'delet', 'figur', 'end', 'two', 'sequenc', 'produc', 'list', 'tree', 'becaus', 'actual', 'perform', 'oper', 'run', 'time', 'differ', 'binari', 'tree', 'effici']",root node insert root node insert root node insert root node print print_tre root delet root print print_tre root lis lis append lis append lis append lis append lis sort lis rang len lis lis del lis print lis much time work got stuck delet figur end two sequenc produc list tree becaus actual perform oper run time differ binari tree effici,search,CS,CS152
105349,"I couldn't do this part :( Coded the functions, but couldn't get the random testers to work.

def search(root, value):
    if root == value:
        return root 
    else:
        if value < root.data: 
            return search(root.l_child, value)
        else: 
            return search(root.r_child, value) 
  
def delete(root, node):
    if node.l_child == None: 
        transplant(node,node.r_child)
    elif z.r_child == None:
        transplant(node,node.l_child)
    else:
        y = treemin(node.r_child)
        if y.parent != node: 
            transplant(y, y.r_child) (cont in email)",#searchtrees,2,3689,"['I', ""couldn't"", 'do', 'this', 'part', 'Coded', 'the', 'functions', 'but', ""couldn't"", 'get', 'the', 'random', 'testers', 'to', 'work', 'def', 'search', 'root', 'value', 'if', 'root', 'value', 'return', 'root', 'else', 'if', 'value', 'root', 'data', 'return', 'search', 'root', 'l_child', 'value', 'else', 'return', 'search', 'root', 'r_child', 'value', 'def', 'delete', 'root', 'node', 'if', 'node', 'l_child', 'None', 'transplant', 'node', 'node', 'r_child', 'elif', 'z', 'r_child', 'None', 'transplant', 'node', 'node', 'l_child', 'else', 'y', 'treemin', 'node', 'r_child', 'if', 'y', 'parent', 'node', 'transplant', 'y', 'y', 'r_child', 'cont', 'in', 'email']","['i', ""couldn't"", 'do', 'this', 'part', 'code', 'the', 'function', 'but', ""couldn't"", 'get', 'the', 'random', 'tester', 'to', 'work', 'def', 'search', 'root', 'valu', 'if', 'root', 'valu', 'return', 'root', 'els', 'if', 'valu', 'root', 'data', 'return', 'search', 'root', 'l_child', 'valu', 'els', 'return', 'search', 'root', 'r_child', 'valu', 'def', 'delet', 'root', 'node', 'if', 'node', 'l_child', 'none', 'transplant', 'node', 'node', 'r_child', 'elif', 'z', 'r_child', 'none', 'transplant', 'node', 'node', 'l_child', 'els', 'y', 'treemin', 'node', 'r_child', 'if', 'y', 'parent', 'node', 'transplant', 'y', 'y', 'r_child', 'cont', 'in', 'email']","['part', 'code', 'function', 'get', 'random', 'tester', 'work', 'def', 'search', 'root', 'valu', 'root', 'valu', 'return', 'root', 'els', 'valu', 'root', 'data', 'return', 'search', 'root', 'l_child', 'valu', 'els', 'return', 'search', 'root', 'r_child', 'valu', 'def', 'delet', 'root', 'node', 'node', 'l_child', 'none', 'transplant', 'node', 'node', 'r_child', 'elif', 'z', 'r_child', 'none', 'transplant', 'node', 'node', 'l_child', 'els', 'treemin', 'node', 'r_child', 'parent', 'node', 'transplant', 'r_child', 'cont', 'email']",part code function get random tester work def search root valu root valu return root els valu root data return search root l_child valu els return search root r_child valu def delet root node node l_child none transplant node node r_child elif z r_child none transplant node node l_child els treemin node r_child parent node transplant r_child cont email,search,CS,CS152
105349,"def search(root, value):
    if root == None or value == root.data:
        return root
    if value < root.data:
        return search(root.l_child, value)
    else:
        return search(root.r_child, value)

I had some challenges getting the search code to work which resulted in me trying to make it work and not getting to this task. I strongy believe that the BST implementation would be quicker than the sorted list at insertion and deletion while being roughly as quick as the sorted list at searching.",#searchtrees,2,3689,"['def', 'search', 'root', 'value', 'if', 'root', 'None', 'or', 'value', 'root', 'data', 'return', 'root', 'if', 'value', 'root', 'data', 'return', 'search', 'root', 'l_child', 'value', 'else', 'return', 'search', 'root', 'r_child', 'value', 'I', 'had', 'some', 'challenges', 'getting', 'the', 'search', 'code', 'to', 'work', 'which', 'resulted', 'in', 'me', 'trying', 'to', 'make', 'it', 'work', 'and', 'not', 'getting', 'to', 'this', 'task', 'I', 'strongy', 'believe', 'that', 'the', 'BST', 'implementation', 'would', 'be', 'quicker', 'than', 'the', 'sorted', 'list', 'at', 'insertion', 'and', 'deletion', 'while', 'being', 'roughly', 'as', 'quick', 'as', 'the', 'sorted', 'list', 'at', 'searching']","['def', 'search', 'root', 'valu', 'if', 'root', 'none', 'or', 'valu', 'root', 'data', 'return', 'root', 'if', 'valu', 'root', 'data', 'return', 'search', 'root', 'l_child', 'valu', 'els', 'return', 'search', 'root', 'r_child', 'valu', 'i', 'had', 'some', 'challeng', 'get', 'the', 'search', 'code', 'to', 'work', 'which', 'result', 'in', 'me', 'tri', 'to', 'make', 'it', 'work', 'and', 'not', 'get', 'to', 'this', 'task', 'i', 'strongi', 'believ', 'that', 'the', 'bst', 'implement', 'would', 'be', 'quicker', 'than', 'the', 'sort', 'list', 'at', 'insert', 'and', 'delet', 'while', 'be', 'rough', 'as', 'quick', 'as', 'the', 'sort', 'list', 'at', 'search']","['def', 'search', 'root', 'valu', 'root', 'none', 'valu', 'root', 'data', 'return', 'root', 'valu', 'root', 'data', 'return', 'search', 'root', 'l_child', 'valu', 'els', 'return', 'search', 'root', 'r_child', 'valu', 'challeng', 'get', 'search', 'code', 'work', 'result', 'tri', 'make', 'work', 'get', 'task', 'strongi', 'believ', 'bst', 'implement', 'quicker', 'sort', 'list', 'insert', 'delet', 'rough', 'quick', 'sort', 'list', 'search']",def search root valu root none valu root data return root valu root data return search root l_child valu els return search root r_child valu challeng get search code work result tri make work get task strongi believ bst implement quicker sort list insert delet rough quick sort list search,search,CS,CS152
105349,"I didn't test it against the simple sorted-list but here's the code for BST: def search(root, value):
    # Your code goes here
    if (root is None) or (root.data == value):
        return root
    if value < root.data:
        return search(root.l_child, value)
    return search(root.r_child, value)
def delete(root, node):
    # Your code goes here:
    if node.l_child is None:
        transplant(root, node, node.l_child)
    elif node.r_child is None:
        transplant(root, node, node.l_child)
    else:
        y = minimum(node.r_child)
        if y.parent != node:
            transplant(",#searchtrees,2,3689,"['I', ""didn't"", 'test', 'it', 'against', 'the', 'simple', 'sorted', 'list', 'but', ""here's"", 'the', 'code', 'for', 'BST', 'def', 'search', 'root', 'value', 'Your', 'code', 'goes', 'here', 'if', 'root', 'is', 'None', 'or', 'root', 'data', 'value', 'return', 'root', 'if', 'value', 'root', 'data', 'return', 'search', 'root', 'l_child', 'value', 'return', 'search', 'root', 'r_child', 'value', 'def', 'delete', 'root', 'node', 'Your', 'code', 'goes', 'here', 'if', 'node', 'l_child', 'is', 'None', 'transplant', 'root', 'node', 'node', 'l_child', 'elif', 'node', 'r_child', 'is', 'None', 'transplant', 'root', 'node', 'node', 'l_child', 'else', 'y', 'minimum', 'node', 'r_child', 'if', 'y', 'parent', 'node', 'transplant']","['i', ""didn't"", 'test', 'it', 'against', 'the', 'simpl', 'sort', 'list', 'but', 'here', 'the', 'code', 'for', 'bst', 'def', 'search', 'root', 'valu', 'your', 'code', 'goe', 'here', 'if', 'root', 'is', 'none', 'or', 'root', 'data', 'valu', 'return', 'root', 'if', 'valu', 'root', 'data', 'return', 'search', 'root', 'l_child', 'valu', 'return', 'search', 'root', 'r_child', 'valu', 'def', 'delet', 'root', 'node', 'your', 'code', 'goe', 'here', 'if', 'node', 'l_child', 'is', 'none', 'transplant', 'root', 'node', 'node', 'l_child', 'elif', 'node', 'r_child', 'is', 'none', 'transplant', 'root', 'node', 'node', 'l_child', 'els', 'y', 'minimum', 'node', 'r_child', 'if', 'y', 'parent', 'node', 'transplant']","['test', 'simpl', 'sort', 'list', 'code', 'bst', 'def', 'search', 'root', 'valu', 'code', 'goe', 'root', 'none', 'root', 'data', 'valu', 'return', 'root', 'valu', 'root', 'data', 'return', 'search', 'root', 'l_child', 'valu', 'return', 'search', 'root', 'r_child', 'valu', 'def', 'delet', 'root', 'node', 'code', 'goe', 'node', 'l_child', 'none', 'transplant', 'root', 'node', 'node', 'l_child', 'elif', 'node', 'r_child', 'none', 'transplant', 'root', 'node', 'node', 'l_child', 'els', 'minimum', 'node', 'r_child', 'parent', 'node', 'transplant']",test simpl sort list code bst def search root valu code goe root none root data valu return root valu root data return search root l_child valu return search root r_child valu def delet root node code goe node l_child none transplant root node node l_child elif node r_child none transplant root node node l_child els minimum node r_child parent node transplant,search,CS,CS152
105354,"def select(node, k):
    if node is None:
        raise ValueError(""Empty bst"")
    if k == node.l_num:
        return node.data
    elif k < node.l_num:
        return select(node.l_child,k)
    else:
        return select(node.r_child,k-node.l_num-)",#searchtrees,4,3692,"['def', 'select', 'node', 'k', 'if', 'node', 'is', 'None', 'raise', 'ValueError', 'Empty', 'bst', 'if', 'k', 'node', 'l_num', 'return', 'node', 'data', 'elif', 'k', 'node', 'l_num', 'return', 'select', 'node', 'l_child', 'k', 'else', 'return', 'select', 'node', 'r_child', 'k', 'node', 'l_num']","['def', 'select', 'node', 'k', 'if', 'node', 'is', 'none', 'rais', 'valueerror', 'empti', 'bst', 'if', 'k', 'node', 'l_num', 'return', 'node', 'data', 'elif', 'k', 'node', 'l_num', 'return', 'select', 'node', 'l_child', 'k', 'els', 'return', 'select', 'node', 'r_child', 'k', 'node', 'l_num']","['def', 'select', 'node', 'k', 'node', 'none', 'rais', 'valueerror', 'empti', 'bst', 'k', 'node', 'l_num', 'return', 'node', 'data', 'elif', 'k', 'node', 'l_num', 'return', 'select', 'node', 'l_child', 'k', 'els', 'return', 'select', 'node', 'r_child', 'k', 'node', 'l_num']",def select node k node none rais valueerror empti bst k node l_num return node data elif k node l_num return select node l_child k els return select node r_child k node l_num,search,CS,CS152
105354,"I did not get to make my select function to work (and did not understand what happened in OH for that), so I'm pasting the function I got to actually work, whihc is the find height one:
def find_height(root):
    if(root == None):
        return -
    
    h_left = find_height(root.left)
    h_right = find_height(root.right)
    return max(h_left, h_right) + ",#searchtrees,1,3692,"['I', 'did', 'not', 'get', 'to', 'make', 'my', 'select', 'function', 'to', 'work', 'and', 'did', 'not', 'understand', 'what', 'happened', 'in', 'OH', 'for', 'that', 'so', ""I'm"", 'pasting', 'the', 'function', 'I', 'got', 'to', 'actually', 'work', 'whihc', 'is', 'the', 'find', 'height', 'one', 'def', 'find_height', 'root', 'if', 'root', 'None', 'return', 'h_left', 'find_height', 'root', 'left', 'h_right', 'find_height', 'root', 'right', 'return', 'max', 'h_left', 'h_right']","['i', 'did', 'not', 'get', 'to', 'make', 'my', 'select', 'function', 'to', 'work', 'and', 'did', 'not', 'understand', 'what', 'happen', 'in', 'oh', 'for', 'that', 'so', ""i'm"", 'past', 'the', 'function', 'i', 'got', 'to', 'actual', 'work', 'whihc', 'is', 'the', 'find', 'height', 'one', 'def', 'find_height', 'root', 'if', 'root', 'none', 'return', 'h_left', 'find_height', 'root', 'left', 'h_right', 'find_height', 'root', 'right', 'return', 'max', 'h_left', 'h_right']","['get', 'make', 'select', 'function', 'work', 'understand', 'happen', 'oh', ""i'm"", 'past', 'function', 'got', 'actual', 'work', 'whihc', 'find', 'height', 'one', 'def', 'find_height', 'root', 'root', 'none', 'return', 'h_left', 'find_height', 'root', 'left', 'h_right', 'find_height', 'root', 'right', 'return', 'max', 'h_left', 'h_right']",get make select function work understand happen oh i'm past function got actual work whihc find height one def find_height root root none return h_left find_height root left h_right find_height root right return max h_left h_right,search,CS,CS152
105354,"def select(node, k):
    try:
        if node.left_tree +  == k:
            return node.data
        else:
            if node.left_tree < k:
                k = k - (node.left_tree + )
                return select(node.r_child, k)
            else:
                return select(node.l_child, k)
    except:
        print ""Error in Select Module""",#searchtrees,1,3692,"['def', 'select', 'node', 'k', 'try', 'if', 'node', 'left_tree', 'k', 'return', 'node', 'data', 'else', 'if', 'node', 'left_tree', 'k', 'k', 'k', 'node', 'left_tree', 'return', 'select', 'node', 'r_child', 'k', 'else', 'return', 'select', 'node', 'l_child', 'k', 'except', 'print', 'Error', 'in', 'Select', 'Module']","['def', 'select', 'node', 'k', 'tri', 'if', 'node', 'left_tre', 'k', 'return', 'node', 'data', 'els', 'if', 'node', 'left_tre', 'k', 'k', 'k', 'node', 'left_tre', 'return', 'select', 'node', 'r_child', 'k', 'els', 'return', 'select', 'node', 'l_child', 'k', 'except', 'print', 'error', 'in', 'select', 'modul']","['def', 'select', 'node', 'k', 'tri', 'node', 'left_tre', 'k', 'return', 'node', 'data', 'els', 'node', 'left_tre', 'k', 'k', 'k', 'node', 'left_tre', 'return', 'select', 'node', 'r_child', 'k', 'els', 'return', 'select', 'node', 'l_child', 'k', 'except', 'print', 'error', 'select', 'modul']",def select node k tri node left_tre k return node data els node left_tre k k k node left_tre return select node r_child k els return select node l_child k except print error select modul,search,CS,CS152
105354,"def select(lst, k):
    random.shuffle(lst)
    root = Node(lst)
    left_count=
    for i in lst:
        if i<root.data[]:
            left_count+=
        insert(root, Node(i))
    if left_count==k:
        return lst[left_count]
    elif left_count>k:
        select(root.r_child, k-(left_count))
    elif left_count<k:
        select(root.l_child, k-)

Note: the code does not run because of the way I created the tree especially confusions with regards to what root means (a node or an entire tree).",#searchtrees,2,3692,"['def', 'select', 'lst', 'k', 'random', 'shuffle', 'lst', 'root', 'Node', 'lst', 'left_count', 'for', 'i', 'in', 'lst', 'if', 'i', 'root', 'data', 'left_count', 'insert', 'root', 'Node', 'i', 'if', 'left_count', 'k', 'return', 'lst', 'left_count', 'elif', 'left_count', 'k', 'select', 'root', 'r_child', 'k', 'left_count', 'elif', 'left_count', 'k', 'select', 'root', 'l_child', 'k', 'Note', 'the', 'code', 'does', 'not', 'run', 'because', 'of', 'the', 'way', 'I', 'created', 'the', 'tree', 'especially', 'confusions', 'with', 'regards', 'to', 'what', 'root', 'means', 'a', 'node', 'or', 'an', 'entire', 'tree']","['def', 'select', 'lst', 'k', 'random', 'shuffl', 'lst', 'root', 'node', 'lst', 'left_count', 'for', 'i', 'in', 'lst', 'if', 'i', 'root', 'data', 'left_count', 'insert', 'root', 'node', 'i', 'if', 'left_count', 'k', 'return', 'lst', 'left_count', 'elif', 'left_count', 'k', 'select', 'root', 'r_child', 'k', 'left_count', 'elif', 'left_count', 'k', 'select', 'root', 'l_child', 'k', 'note', 'the', 'code', 'doe', 'not', 'run', 'becaus', 'of', 'the', 'way', 'i', 'creat', 'the', 'tree', 'especi', 'confus', 'with', 'regard', 'to', 'what', 'root', 'mean', 'a', 'node', 'or', 'an', 'entir', 'tree']","['def', 'select', 'lst', 'k', 'random', 'shuffl', 'lst', 'root', 'node', 'lst', 'left_count', 'lst', 'root', 'data', 'left_count', 'insert', 'root', 'node', 'left_count', 'k', 'return', 'lst', 'left_count', 'elif', 'left_count', 'k', 'select', 'root', 'r_child', 'k', 'left_count', 'elif', 'left_count', 'k', 'select', 'root', 'l_child', 'k', 'note', 'code', 'doe', 'run', 'becaus', 'way', 'creat', 'tree', 'especi', 'confus', 'regard', 'root', 'mean', 'node', 'entir', 'tree']",def select lst k random shuffl lst root node lst left_count lst root data left_count insert root node left_count k return lst left_count elif left_count k select root r_child k left_count elif left_count k select root l_child k note code doe run becaus way creat tree especi confus regard root mean node entir tree,search,CS,CS152
105354,"def SELECT(node, k):
        if node.left_tree +  == k:
            return node.data
        else:
            if node.left_tree < k:
                k -= (node.left_tree + )
                return select(node.r_child, k)
            else:
                return select(node.l_child, k)",#searchtrees,3,3692,"['def', 'SELECT', 'node', 'k', 'if', 'node', 'left_tree', 'k', 'return', 'node', 'data', 'else', 'if', 'node', 'left_tree', 'k', 'k', 'node', 'left_tree', 'return', 'select', 'node', 'r_child', 'k', 'else', 'return', 'select', 'node', 'l_child', 'k']","['def', 'select', 'node', 'k', 'if', 'node', 'left_tre', 'k', 'return', 'node', 'data', 'els', 'if', 'node', 'left_tre', 'k', 'k', 'node', 'left_tre', 'return', 'select', 'node', 'r_child', 'k', 'els', 'return', 'select', 'node', 'l_child', 'k']","['def', 'select', 'node', 'k', 'node', 'left_tre', 'k', 'return', 'node', 'data', 'els', 'node', 'left_tre', 'k', 'k', 'node', 'left_tre', 'return', 'select', 'node', 'r_child', 'k', 'els', 'return', 'select', 'node', 'l_child', 'k']",def select node k node left_tre k return node data els node left_tre k k node left_tre return select node r_child k els return select node l_child k,search,CS,CS152
105354,"credits to office hours:
def select(node, k):
    try:
        if node.left +  == k:
            return node.data
        else:
            if node.left < k:
                k = k - (node.left + )
                return select(node.r_child, k)
            else:
                return select(node.l_child, k)
    except:
        print ""Error""",#searchtrees,4,3692,"['credits', 'to', 'office', 'hours', 'def', 'select', 'node', 'k', 'try', 'if', 'node', 'left', 'k', 'return', 'node', 'data', 'else', 'if', 'node', 'left', 'k', 'k', 'k', 'node', 'left', 'return', 'select', 'node', 'r_child', 'k', 'else', 'return', 'select', 'node', 'l_child', 'k', 'except', 'print', 'Error']","['credit', 'to', 'offic', 'hour', 'def', 'select', 'node', 'k', 'tri', 'if', 'node', 'left', 'k', 'return', 'node', 'data', 'els', 'if', 'node', 'left', 'k', 'k', 'k', 'node', 'left', 'return', 'select', 'node', 'r_child', 'k', 'els', 'return', 'select', 'node', 'l_child', 'k', 'except', 'print', 'error']","['credit', 'offic', 'hour', 'def', 'select', 'node', 'k', 'tri', 'node', 'left', 'k', 'return', 'node', 'data', 'els', 'node', 'left', 'k', 'k', 'k', 'node', 'left', 'return', 'select', 'node', 'r_child', 'k', 'els', 'return', 'select', 'node', 'l_child', 'k', 'except', 'print', 'error']",credit offic hour def select node k tri node left k return node data els node left k k k node left return select node r_child k els return select node l_child k except print error,search,CS,CS152
105354,"def select(node,k):
    if k == node.l_child + :
        return node.data
    elif k > node.l_child:
        k = k - (root.l_child + )
        node = node.r_child
        return select(node,k)
    elif k < node.l_child:
        node = node.l_child
        return select(node,k)",#searchtrees,3,3692,"['def', 'select', 'node', 'k', 'if', 'k', 'node', 'l_child', 'return', 'node', 'data', 'elif', 'k', 'node', 'l_child', 'k', 'k', 'root', 'l_child', 'node', 'node', 'r_child', 'return', 'select', 'node', 'k', 'elif', 'k', 'node', 'l_child', 'node', 'node', 'l_child', 'return', 'select', 'node', 'k']","['def', 'select', 'node', 'k', 'if', 'k', 'node', 'l_child', 'return', 'node', 'data', 'elif', 'k', 'node', 'l_child', 'k', 'k', 'root', 'l_child', 'node', 'node', 'r_child', 'return', 'select', 'node', 'k', 'elif', 'k', 'node', 'l_child', 'node', 'node', 'l_child', 'return', 'select', 'node', 'k']","['def', 'select', 'node', 'k', 'k', 'node', 'l_child', 'return', 'node', 'data', 'elif', 'k', 'node', 'l_child', 'k', 'k', 'root', 'l_child', 'node', 'node', 'r_child', 'return', 'select', 'node', 'k', 'elif', 'k', 'node', 'l_child', 'node', 'node', 'l_child', 'return', 'select', 'node', 'k']",def select node k k node l_child return node data elif k node l_child k k root l_child node node r_child return select node k elif k node l_child node node l_child return select node k,search,CS,CS152
105359,"def select(node,k):
    if left_count(node) == k:
        return node.data
    elif left_count(node)<k:
        select(node.r_child,(k-node.left_count-))
    else:
        select(node.l_child,k)",#searchtrees,4,3695,"['def', 'select', 'node', 'k', 'if', 'left_count', 'node', 'k', 'return', 'node', 'data', 'elif', 'left_count', 'node', 'k', 'select', 'node', 'r_child', 'k', 'node', 'left_count', 'else', 'select', 'node', 'l_child', 'k']","['def', 'select', 'node', 'k', 'if', 'left_count', 'node', 'k', 'return', 'node', 'data', 'elif', 'left_count', 'node', 'k', 'select', 'node', 'r_child', 'k', 'node', 'left_count', 'els', 'select', 'node', 'l_child', 'k']","['def', 'select', 'node', 'k', 'left_count', 'node', 'k', 'return', 'node', 'data', 'elif', 'left_count', 'node', 'k', 'select', 'node', 'r_child', 'k', 'node', 'left_count', 'els', 'select', 'node', 'l_child', 'k']",def select node k left_count node k return node data elif left_count node k select node r_child k node left_count els select node l_child k,search,CS,CS152
105359,"#l_tree keeps track of the index of nodes in left tree. The code is inspired by Nik's code during office hour. I re-coded it myself.
def select(node, k):
    if node.l_tree +  == k:
        return node.data
    else:
        if node.l_tree < k:
            k = k - (node.l_tree + )
            return select(node.r_child, k)
        else:
            return select(node.l_child, k)",#searchtrees,4,3695,"['l_tree', 'keeps', 'track', 'of', 'the', 'index', 'of', 'nodes', 'in', 'left', 'tree', 'The', 'code', 'is', 'inspired', 'by', ""Nik's"", 'code', 'during', 'office', 'hour', 'I', 're', 'coded', 'it', 'myself', 'def', 'select', 'node', 'k', 'if', 'node', 'l_tree', 'k', 'return', 'node', 'data', 'else', 'if', 'node', 'l_tree', 'k', 'k', 'k', 'node', 'l_tree', 'return', 'select', 'node', 'r_child', 'k', 'else', 'return', 'select', 'node', 'l_child', 'k']","['l_tree', 'keep', 'track', 'of', 'the', 'index', 'of', 'node', 'in', 'left', 'tree', 'the', 'code', 'is', 'inspir', 'by', 'nik', 'code', 'dure', 'offic', 'hour', 'i', 're', 'code', 'it', 'myself', 'def', 'select', 'node', 'k', 'if', 'node', 'l_tree', 'k', 'return', 'node', 'data', 'els', 'if', 'node', 'l_tree', 'k', 'k', 'k', 'node', 'l_tree', 'return', 'select', 'node', 'r_child', 'k', 'els', 'return', 'select', 'node', 'l_child', 'k']","['l_tree', 'keep', 'track', 'index', 'node', 'left', 'tree', 'code', 'inspir', 'nik', 'code', 'dure', 'offic', 'hour', 'code', 'def', 'select', 'node', 'k', 'node', 'l_tree', 'k', 'return', 'node', 'data', 'els', 'node', 'l_tree', 'k', 'k', 'k', 'node', 'l_tree', 'return', 'select', 'node', 'r_child', 'k', 'els', 'return', 'select', 'node', 'l_child', 'k']",l_tree keep track index node left tree code inspir nik code dure offic hour code def select node k node l_tree k return node data els node l_tree k k k node l_tree return select node r_child k els return select node l_child k,search,CS,CS152
105359,"def select(bst, k):
    if bst is None:
        return None
    if bst.l_count == k:
        return bst.data
    if bst.l_count > k:
        return select(bst.l_child, k)
    else:
        return select(bst.r_child, k - bst.l_count - )",#searchtrees,4,3695,"['def', 'select', 'bst', 'k', 'if', 'bst', 'is', 'None', 'return', 'None', 'if', 'bst', 'l_count', 'k', 'return', 'bst', 'data', 'if', 'bst', 'l_count', 'k', 'return', 'select', 'bst', 'l_child', 'k', 'else', 'return', 'select', 'bst', 'r_child', 'k', 'bst', 'l_count']","['def', 'select', 'bst', 'k', 'if', 'bst', 'is', 'none', 'return', 'none', 'if', 'bst', 'l_count', 'k', 'return', 'bst', 'data', 'if', 'bst', 'l_count', 'k', 'return', 'select', 'bst', 'l_child', 'k', 'els', 'return', 'select', 'bst', 'r_child', 'k', 'bst', 'l_count']","['def', 'select', 'bst', 'k', 'bst', 'none', 'return', 'none', 'bst', 'l_count', 'k', 'return', 'bst', 'data', 'bst', 'l_count', 'k', 'return', 'select', 'bst', 'l_child', 'k', 'els', 'return', 'select', 'bst', 'r_child', 'k', 'bst', 'l_count']",def select bst k bst none return none bst l_count k return bst data bst l_count k return select bst l_child k els return select bst r_child k bst l_count,search,CS,CS152
105359,"def select(root, k):
    counter = root.count_l
    if counter == k:
        return root
    if counter > k:
        return select(root.l, k-)
    if counter < k:
        return select(root.r, k-counter)
    if root = None: return root",#searchtrees,4,3695,"['def', 'select', 'root', 'k', 'counter', 'root', 'count_l', 'if', 'counter', 'k', 'return', 'root', 'if', 'counter', 'k', 'return', 'select', 'root', 'l', 'k', 'if', 'counter', 'k', 'return', 'select', 'root', 'r', 'k', 'counter', 'if', 'root', 'None', 'return', 'root']","['def', 'select', 'root', 'k', 'counter', 'root', 'count_l', 'if', 'counter', 'k', 'return', 'root', 'if', 'counter', 'k', 'return', 'select', 'root', 'l', 'k', 'if', 'counter', 'k', 'return', 'select', 'root', 'r', 'k', 'counter', 'if', 'root', 'none', 'return', 'root']","['def', 'select', 'root', 'k', 'counter', 'root', 'count_l', 'counter', 'k', 'return', 'root', 'counter', 'k', 'return', 'select', 'root', 'l', 'k', 'counter', 'k', 'return', 'select', 'root', 'r', 'k', 'counter', 'root', 'none', 'return', 'root']",def select root k counter root count_l counter k return root counter k return select root l k counter k return select root r k counter root none return root,search,CS,CS152
105359,"def select(root, index):
    if root.subrank == index: return root.data
    elif root.subrank > index: return select(root.l_child, index)
    elif root.r_child == None: return None
    else: select(root.r_child, index)",#searchtrees,4,3695,"['def', 'select', 'root', 'index', 'if', 'root', 'subrank', 'index', 'return', 'root', 'data', 'elif', 'root', 'subrank', 'index', 'return', 'select', 'root', 'l_child', 'index', 'elif', 'root', 'r_child', 'None', 'return', 'None', 'else', 'select', 'root', 'r_child', 'index']","['def', 'select', 'root', 'index', 'if', 'root', 'subrank', 'index', 'return', 'root', 'data', 'elif', 'root', 'subrank', 'index', 'return', 'select', 'root', 'l_child', 'index', 'elif', 'root', 'r_child', 'none', 'return', 'none', 'els', 'select', 'root', 'r_child', 'index']","['def', 'select', 'root', 'index', 'root', 'subrank', 'index', 'return', 'root', 'data', 'elif', 'root', 'subrank', 'index', 'return', 'select', 'root', 'l_child', 'index', 'elif', 'root', 'r_child', 'none', 'return', 'none', 'els', 'select', 'root', 'r_child', 'index']",def select root index root subrank index return root data elif root subrank index return select root l_child index elif root r_child none return none els select root r_child index,search,CS,CS152
105359,"def select(node, k):
    try:
        if node.lefttree +  == k:
            return node.data
        else:
            if node.lefttree < k:
                k = k - (node.left + )
                return select(node.right, k)
            else:
                return select(node.left, k)
    except:
        print ""Error""

Wrote my own version before but adapted with improvements from office hours :-)",#searchtrees,4,3695,"['def', 'select', 'node', 'k', 'try', 'if', 'node', 'lefttree', 'k', 'return', 'node', 'data', 'else', 'if', 'node', 'lefttree', 'k', 'k', 'k', 'node', 'left', 'return', 'select', 'node', 'right', 'k', 'else', 'return', 'select', 'node', 'left', 'k', 'except', 'print', 'Error', 'Wrote', 'my', 'own', 'version', 'before', 'but', 'adapted', 'with', 'improvements', 'from', 'office', 'hours']","['def', 'select', 'node', 'k', 'tri', 'if', 'node', 'lefttre', 'k', 'return', 'node', 'data', 'els', 'if', 'node', 'lefttre', 'k', 'k', 'k', 'node', 'left', 'return', 'select', 'node', 'right', 'k', 'els', 'return', 'select', 'node', 'left', 'k', 'except', 'print', 'error', 'wrote', 'my', 'own', 'version', 'befor', 'but', 'adapt', 'with', 'improv', 'from', 'offic', 'hour']","['def', 'select', 'node', 'k', 'tri', 'node', 'lefttre', 'k', 'return', 'node', 'data', 'els', 'node', 'lefttre', 'k', 'k', 'k', 'node', 'left', 'return', 'select', 'node', 'right', 'k', 'els', 'return', 'select', 'node', 'left', 'k', 'except', 'print', 'error', 'wrote', 'version', 'befor', 'adapt', 'improv', 'offic', 'hour']",def select node k tri node lefttre k return node data els node lefttre k k k node left return select node right k els return select node left k except print error wrote version befor adapt improv offic hour,search,CS,CS152
105359,"rank = 
def select(node):
    if node != None:
        select(node.l_child)
    rank += 
    if rank == k:
        return node.data
    select(node.r_child)",#searchtrees,2,3695,"['rank', 'def', 'select', 'node', 'if', 'node', 'None', 'select', 'node', 'l_child', 'rank', 'if', 'rank', 'k', 'return', 'node', 'data', 'select', 'node', 'r_child']","['rank', 'def', 'select', 'node', 'if', 'node', 'none', 'select', 'node', 'l_child', 'rank', 'if', 'rank', 'k', 'return', 'node', 'data', 'select', 'node', 'r_child']","['rank', 'def', 'select', 'node', 'node', 'none', 'select', 'node', 'l_child', 'rank', 'rank', 'k', 'return', 'node', 'data', 'select', 'node', 'r_child']",rank def select node node none select node l_child rank rank k return node data select node r_child,search,CS,CS152
105359,"def select(node, k):
    if k == node.left_count:
        return
    if k<node.left_count:
        return select(node.l_child, k)
    else:
        return select(node.r_child, k-node.left_count)",#searchtrees,2,3695,"['def', 'select', 'node', 'k', 'if', 'k', 'node', 'left_count', 'return', 'if', 'k', 'node', 'left_count', 'return', 'select', 'node', 'l_child', 'k', 'else', 'return', 'select', 'node', 'r_child', 'k', 'node', 'left_count']","['def', 'select', 'node', 'k', 'if', 'k', 'node', 'left_count', 'return', 'if', 'k', 'node', 'left_count', 'return', 'select', 'node', 'l_child', 'k', 'els', 'return', 'select', 'node', 'r_child', 'k', 'node', 'left_count']","['def', 'select', 'node', 'k', 'k', 'node', 'left_count', 'return', 'k', 'node', 'left_count', 'return', 'select', 'node', 'l_child', 'k', 'els', 'return', 'select', 'node', 'r_child', 'k', 'node', 'left_count']",def select node k k node left_count return k node left_count return select node l_child k els return select node r_child k node left_count,search,CS,CS152
105359,"CREDITS OH
def select(node, k):
        if node.l_tree +  == k:
            return node.data
        else:
            if node.l_tree < k:
                k = k - (node.l_tree + )
                return select(node.r_child, k)
            else:
                return select(node.l_child, k)
    except:
        print ""E""
def rank(node, val):
        if node.data == val:
            return node.l_tree + 
        elif node.data < val:
            return  + node.l_tree + rank(node.r_child, val)
        else:
            return rank(node.l_child, val)
    except:
        print 'E'",#searchtrees,3,3695,"['CREDITS', 'OH', 'def', 'select', 'node', 'k', 'if', 'node', 'l_tree', 'k', 'return', 'node', 'data', 'else', 'if', 'node', 'l_tree', 'k', 'k', 'k', 'node', 'l_tree', 'return', 'select', 'node', 'r_child', 'k', 'else', 'return', 'select', 'node', 'l_child', 'k', 'except', 'print', 'E', 'def', 'rank', 'node', 'val', 'if', 'node', 'data', 'val', 'return', 'node', 'l_tree', 'elif', 'node', 'data', 'val', 'return', 'node', 'l_tree', 'rank', 'node', 'r_child', 'val', 'else', 'return', 'rank', 'node', 'l_child', 'val', 'except', 'print', ""'E'""]","['credit', 'oh', 'def', 'select', 'node', 'k', 'if', 'node', 'l_tree', 'k', 'return', 'node', 'data', 'els', 'if', 'node', 'l_tree', 'k', 'k', 'k', 'node', 'l_tree', 'return', 'select', 'node', 'r_child', 'k', 'els', 'return', 'select', 'node', 'l_child', 'k', 'except', 'print', 'e', 'def', 'rank', 'node', 'val', 'if', 'node', 'data', 'val', 'return', 'node', 'l_tree', 'elif', 'node', 'data', 'val', 'return', 'node', 'l_tree', 'rank', 'node', 'r_child', 'val', 'els', 'return', 'rank', 'node', 'l_child', 'val', 'except', 'print', 'e']","['credit', 'oh', 'def', 'select', 'node', 'k', 'node', 'l_tree', 'k', 'return', 'node', 'data', 'els', 'node', 'l_tree', 'k', 'k', 'k', 'node', 'l_tree', 'return', 'select', 'node', 'r_child', 'k', 'els', 'return', 'select', 'node', 'l_child', 'k', 'except', 'print', 'e', 'def', 'rank', 'node', 'val', 'node', 'data', 'val', 'return', 'node', 'l_tree', 'elif', 'node', 'data', 'val', 'return', 'node', 'l_tree', 'rank', 'node', 'r_child', 'val', 'els', 'return', 'rank', 'node', 'l_child', 'val', 'except', 'print', 'e']",credit oh def select node k node l_tree k return node data els node l_tree k k k node l_tree return select node r_child k els return select node l_child k except print e def rank node val node data val return node l_tree elif node data val return node l_tree rank node r_child val els return rank node l_child val except print e,search,CS,CS152
117220,"Rotations  maintain the red black property and we can only maintain this property if the newly inserted node is the only violation when inserted. IE, insert time is the only chance to maintain the property. If we do not maintain this property, then the tree can get arbitrarily unbalanced as more and more nodes are inserted and fixing it will become extremely difficult (probably harder than just building the tree again as a proper RB tree). Therefore, each insertion must do the rotates it needs to do. Plus, the complexity of the full insert procedure is O(log(n)) == BST insert with no rotate",#searchtrees,4,5068,"['Rotations', 'maintain', 'the', 'red', 'black', 'property', 'and', 'we', 'can', 'only', 'maintain', 'this', 'property', 'if', 'the', 'newly', 'inserted', 'node', 'is', 'the', 'only', 'violation', 'when', 'inserted', 'IE', 'insert', 'time', 'is', 'the', 'only', 'chance', 'to', 'maintain', 'the', 'property', 'If', 'we', 'do', 'not', 'maintain', 'this', 'property', 'then', 'the', 'tree', 'can', 'get', 'arbitrarily', 'unbalanced', 'as', 'more', 'and', 'more', 'nodes', 'are', 'inserted', 'and', 'fixing', 'it', 'will', 'become', 'extremely', 'difficult', 'probably', 'harder', 'than', 'just', 'building', 'the', 'tree', 'again', 'as', 'a', 'proper', 'RB', 'tree', 'Therefore', 'each', 'insertion', 'must', 'do', 'the', 'rotates', 'it', 'needs', 'to', 'do', 'Plus', 'the', 'complexity', 'of', 'the', 'full', 'insert', 'procedure', 'is', 'O', 'log', 'n', 'BST', 'insert', 'with', 'no', 'rotate']","['rotat', 'maintain', 'the', 'red', 'black', 'properti', 'and', 'we', 'can', 'onli', 'maintain', 'this', 'properti', 'if', 'the', 'newli', 'insert', 'node', 'is', 'the', 'onli', 'violat', 'when', 'insert', 'ie', 'insert', 'time', 'is', 'the', 'onli', 'chanc', 'to', 'maintain', 'the', 'properti', 'if', 'we', 'do', 'not', 'maintain', 'this', 'properti', 'then', 'the', 'tree', 'can', 'get', 'arbitrarili', 'unbalanc', 'as', 'more', 'and', 'more', 'node', 'are', 'insert', 'and', 'fix', 'it', 'will', 'becom', 'extrem', 'difficult', 'probabl', 'harder', 'than', 'just', 'build', 'the', 'tree', 'again', 'as', 'a', 'proper', 'rb', 'tree', 'therefor', 'each', 'insert', 'must', 'do', 'the', 'rotat', 'it', 'need', 'to', 'do', 'plus', 'the', 'complex', 'of', 'the', 'full', 'insert', 'procedur', 'is', 'o', 'log', 'n', 'bst', 'insert', 'with', 'no', 'rotat']","['rotat', 'maintain', 'red', 'black', 'properti', 'onli', 'maintain', 'properti', 'newli', 'insert', 'node', 'onli', 'violat', 'insert', 'ie', 'insert', 'time', 'onli', 'chanc', 'maintain', 'properti', 'maintain', 'properti', 'tree', 'get', 'arbitrarili', 'unbalanc', 'node', 'insert', 'fix', 'becom', 'extrem', 'difficult', 'probabl', 'harder', 'build', 'tree', 'proper', 'rb', 'tree', 'therefor', 'insert', 'must', 'rotat', 'need', 'plus', 'complex', 'full', 'insert', 'procedur', 'log', 'n', 'bst', 'insert', 'rotat']",rotat maintain red black properti onli maintain properti newli insert node onli violat insert ie insert time onli chanc maintain properti maintain properti tree get arbitrarili unbalanc node insert fix becom extrem difficult probabl harder build tree proper rb tree therefor insert must rotat need plus complex full insert procedur log n bst insert rotat,search,CS,CS152
143183,"def select(node,k):
    counter =  # This will keep track of the value we're at
    current = node
    while current != None: # Have to make sure there's a node
        if current.l_child == None:  # Means we've reached minimum
            counter +=
            if counter == k:   # kth value has been found by now
                return current
            current = current.r_child
        else:",#searchtrees,2,7127,"['def', 'select', 'node', 'k', 'counter', 'This', 'will', 'keep', 'track', 'of', 'the', 'value', ""we're"", 'at', 'current', 'node', 'while', 'current', 'None', 'Have', 'to', 'make', 'sure', ""there's"", 'a', 'node', 'if', 'current', 'l_child', 'None', 'Means', ""we've"", 'reached', 'minimum', 'counter', 'if', 'counter', 'k', 'kth', 'value', 'has', 'been', 'found', 'by', 'now', 'return', 'current', 'current', 'current', 'r_child', 'else']","['def', 'select', 'node', 'k', 'counter', 'this', 'will', 'keep', 'track', 'of', 'the', 'valu', ""we'r"", 'at', 'current', 'node', 'while', 'current', 'none', 'have', 'to', 'make', 'sure', 'there', 'a', 'node', 'if', 'current', 'l_child', 'none', 'mean', ""we'v"", 'reach', 'minimum', 'counter', 'if', 'counter', 'k', 'kth', 'valu', 'has', 'been', 'found', 'by', 'now', 'return', 'current', 'current', 'current', 'r_child', 'els']","['def', 'select', 'node', 'k', 'counter', 'keep', 'track', 'valu', ""we'r"", 'current', 'node', 'current', 'none', 'make', 'sure', 'node', 'current', 'l_child', 'none', 'mean', ""we'v"", 'reach', 'minimum', 'counter', 'counter', 'k', 'kth', 'valu', 'found', 'return', 'current', 'current', 'current', 'r_child', 'els']",def select node k counter keep track valu we'r current node current none make sure node current l_child none mean we'v reach minimum counter counter k kth valu found return current current current r_child els,search,CS,CS152
143183,"def select(root, index):
    if root.leftcount == index: 
    	return root.data
    elif root.leftcount > index: 
        #root.leftcount -= 
    	return select(root.l_child, index)
    elif root.r_child == None: 
    	return None
    else: 
    	select(root.r_child, index - root.leftcount - )",#searchtrees,2,7127,"['def', 'select', 'root', 'index', 'if', 'root', 'leftcount', 'index', 'return', 'root', 'data', 'elif', 'root', 'leftcount', 'index', 'root', 'leftcount', 'return', 'select', 'root', 'l_child', 'index', 'elif', 'root', 'r_child', 'None', 'return', 'None', 'else', 'select', 'root', 'r_child', 'index', 'root', 'leftcount']","['def', 'select', 'root', 'index', 'if', 'root', 'leftcount', 'index', 'return', 'root', 'data', 'elif', 'root', 'leftcount', 'index', 'root', 'leftcount', 'return', 'select', 'root', 'l_child', 'index', 'elif', 'root', 'r_child', 'none', 'return', 'none', 'els', 'select', 'root', 'r_child', 'index', 'root', 'leftcount']","['def', 'select', 'root', 'index', 'root', 'leftcount', 'index', 'return', 'root', 'data', 'elif', 'root', 'leftcount', 'index', 'root', 'leftcount', 'return', 'select', 'root', 'l_child', 'index', 'elif', 'root', 'r_child', 'none', 'return', 'none', 'els', 'select', 'root', 'r_child', 'index', 'root', 'leftcount']",def select root index root leftcount index return root data elif root leftcount index root leftcount return select root l_child index elif root r_child none return none els select root r_child index root leftcount,search,CS,CS152
143183,"#I keep track of whether the current element
#of traversal is the kth smallest one
#if it is, I return it and stop going through the tree
def select(node,k):
    s, current, array = [], root, 

        while s or current:
            if current:
                s.append(current)
                current = current.left
            else:
                current = s.pop()
                array += 
                if array == k:
                    return current.val
                currnet = current.right

        return float(""-inf"")",#searchtrees,2,7127,"['I', 'keep', 'track', 'of', 'whether', 'the', 'current', 'element', 'of', 'traversal', 'is', 'the', 'kth', 'smallest', 'one', 'if', 'it', 'is', 'I', 'return', 'it', 'and', 'stop', 'going', 'through', 'the', 'tree', 'def', 'select', 'node', 'k', 's', 'current', 'array', 'root', 'while', 's', 'or', 'current', 'if', 'current', 's', 'append', 'current', 'current', 'current', 'left', 'else', 'current', 's', 'pop', 'array', 'if', 'array', 'k', 'return', 'current', 'val', 'currnet', 'current', 'right', 'return', 'float', 'inf']","['i', 'keep', 'track', 'of', 'whether', 'the', 'current', 'element', 'of', 'travers', 'is', 'the', 'kth', 'smallest', 'one', 'if', 'it', 'is', 'i', 'return', 'it', 'and', 'stop', 'go', 'through', 'the', 'tree', 'def', 'select', 'node', 'k', 's', 'current', 'array', 'root', 'while', 's', 'or', 'current', 'if', 'current', 's', 'append', 'current', 'current', 'current', 'left', 'els', 'current', 's', 'pop', 'array', 'if', 'array', 'k', 'return', 'current', 'val', 'currnet', 'current', 'right', 'return', 'float', 'inf']","['keep', 'track', 'whether', 'current', 'element', 'travers', 'kth', 'smallest', 'one', 'return', 'stop', 'go', 'tree', 'def', 'select', 'node', 'k', 'current', 'array', 'root', 'current', 'current', 'append', 'current', 'current', 'current', 'left', 'els', 'current', 'pop', 'array', 'array', 'k', 'return', 'current', 'val', 'currnet', 'current', 'right', 'return', 'float', 'inf']",keep track whether current element travers kth smallest one return stop go tree def select node k current array root current current append current current current left els current pop array array k return current val currnet current right return float inf,search,CS,CS152
143183,"def select(node,k):
    if node.left == None:
        if k == :
            return node.key
        else:
            return select(node.right,k - )
    else:
        if k <= node.left.size:
            return select(node.left,k)
        elif k == node.left.size + :
            return node.key
        elif k > node.left.size + :
            return select(node.right,k-node.left.size - )",#searchtrees,4,7127,"['def', 'select', 'node', 'k', 'if', 'node', 'left', 'None', 'if', 'k', 'return', 'node', 'key', 'else', 'return', 'select', 'node', 'right', 'k', 'else', 'if', 'k', 'node', 'left', 'size', 'return', 'select', 'node', 'left', 'k', 'elif', 'k', 'node', 'left', 'size', 'return', 'node', 'key', 'elif', 'k', 'node', 'left', 'size', 'return', 'select', 'node', 'right', 'k', 'node', 'left', 'size']","['def', 'select', 'node', 'k', 'if', 'node', 'left', 'none', 'if', 'k', 'return', 'node', 'key', 'els', 'return', 'select', 'node', 'right', 'k', 'els', 'if', 'k', 'node', 'left', 'size', 'return', 'select', 'node', 'left', 'k', 'elif', 'k', 'node', 'left', 'size', 'return', 'node', 'key', 'elif', 'k', 'node', 'left', 'size', 'return', 'select', 'node', 'right', 'k', 'node', 'left', 'size']","['def', 'select', 'node', 'k', 'node', 'left', 'none', 'k', 'return', 'node', 'key', 'els', 'return', 'select', 'node', 'right', 'k', 'els', 'k', 'node', 'left', 'size', 'return', 'select', 'node', 'left', 'k', 'elif', 'k', 'node', 'left', 'size', 'return', 'node', 'key', 'elif', 'k', 'node', 'left', 'size', 'return', 'select', 'node', 'right', 'k', 'node', 'left', 'size']",def select node k node left none k return node key els return select node right k els k node left size return select node left k elif k node left size return node key elif k node left size return select node right k node left size,search,CS,CS152
143183,"def select(node,k):
if node.count == k:
return node
def select(node.left,k)",#searchtrees,1,7127,"['def', 'select', 'node', 'k', 'if', 'node', 'count', 'k', 'return', 'node', 'def', 'select', 'node', 'left', 'k']","['def', 'select', 'node', 'k', 'if', 'node', 'count', 'k', 'return', 'node', 'def', 'select', 'node', 'left', 'k']","['def', 'select', 'node', 'k', 'node', 'count', 'k', 'return', 'node', 'def', 'select', 'node', 'left', 'k']",def select node k node count k return node def select node left k,search,CS,CS152
143183,"def select (node, k): 
    #It must find then find the K’th index in the BST. 
    #(i.e. there should be exactly k items that are smaller then the item that is returned.)
    if k == node.l_count: 
        return node
    if k < node.l_count: 
        select(node.l_child, k)
    else: 
        select(node.r_child, k)",#searchtrees,2,7127,"['def', 'select', 'node', 'k', 'It', 'must', 'find', 'then', 'find', 'the', 'K', 'th', 'index', 'in', 'the', 'BST', 'i', 'e', 'there', 'should', 'be', 'exactly', 'k', 'items', 'that', 'are', 'smaller', 'then', 'the', 'item', 'that', 'is', 'returned', 'if', 'k', 'node', 'l_count', 'return', 'node', 'if', 'k', 'node', 'l_count', 'select', 'node', 'l_child', 'k', 'else', 'select', 'node', 'r_child', 'k']","['def', 'select', 'node', 'k', 'it', 'must', 'find', 'then', 'find', 'the', 'k', 'th', 'index', 'in', 'the', 'bst', 'i', 'e', 'there', 'should', 'be', 'exact', 'k', 'item', 'that', 'are', 'smaller', 'then', 'the', 'item', 'that', 'is', 'return', 'if', 'k', 'node', 'l_count', 'return', 'node', 'if', 'k', 'node', 'l_count', 'select', 'node', 'l_child', 'k', 'els', 'select', 'node', 'r_child', 'k']","['def', 'select', 'node', 'k', 'must', 'find', 'find', 'k', 'th', 'index', 'bst', 'e', 'exact', 'k', 'item', 'smaller', 'item', 'return', 'k', 'node', 'l_count', 'return', 'node', 'k', 'node', 'l_count', 'select', 'node', 'l_child', 'k', 'els', 'select', 'node', 'r_child', 'k']",def select node k must find find k th index bst e exact k item smaller item return k node l_count return node k node l_count select node l_child k els select node r_child k,search,CS,CS152
143183,"def select(root, k):
    if root:
        if root.count == k:
            return root
        elif root.count > k:
            return select(root.left_child, k)
        else:
            return select(root.right_child, k-root.count)",#searchtrees,2,7127,"['def', 'select', 'root', 'k', 'if', 'root', 'if', 'root', 'count', 'k', 'return', 'root', 'elif', 'root', 'count', 'k', 'return', 'select', 'root', 'left_child', 'k', 'else', 'return', 'select', 'root', 'right_child', 'k', 'root', 'count']","['def', 'select', 'root', 'k', 'if', 'root', 'if', 'root', 'count', 'k', 'return', 'root', 'elif', 'root', 'count', 'k', 'return', 'select', 'root', 'left_child', 'k', 'els', 'return', 'select', 'root', 'right_child', 'k', 'root', 'count']","['def', 'select', 'root', 'k', 'root', 'root', 'count', 'k', 'return', 'root', 'elif', 'root', 'count', 'k', 'return', 'select', 'root', 'left_child', 'k', 'els', 'return', 'select', 'root', 'right_child', 'k', 'root', 'count']",def select root k root root count k return root elif root count k return select root left_child k els return select root right_child k root count,search,CS,CS152
143188,"def select(node,k):
    if node.left == None:
        if k == :
            return node.value
        else:
            return select(node.right,k - )
    else:
        if k <= node.left.size:
            return select(node.left,k)
        elif k == node.left.size + :
            return node.value
        elif k > node.left.size + :
            return select(node.right,k-node.left.size - )",#searchtrees,4,7128,"['def', 'select', 'node', 'k', 'if', 'node', 'left', 'None', 'if', 'k', 'return', 'node', 'value', 'else', 'return', 'select', 'node', 'right', 'k', 'else', 'if', 'k', 'node', 'left', 'size', 'return', 'select', 'node', 'left', 'k', 'elif', 'k', 'node', 'left', 'size', 'return', 'node', 'value', 'elif', 'k', 'node', 'left', 'size', 'return', 'select', 'node', 'right', 'k', 'node', 'left', 'size']","['def', 'select', 'node', 'k', 'if', 'node', 'left', 'none', 'if', 'k', 'return', 'node', 'valu', 'els', 'return', 'select', 'node', 'right', 'k', 'els', 'if', 'k', 'node', 'left', 'size', 'return', 'select', 'node', 'left', 'k', 'elif', 'k', 'node', 'left', 'size', 'return', 'node', 'valu', 'elif', 'k', 'node', 'left', 'size', 'return', 'select', 'node', 'right', 'k', 'node', 'left', 'size']","['def', 'select', 'node', 'k', 'node', 'left', 'none', 'k', 'return', 'node', 'valu', 'els', 'return', 'select', 'node', 'right', 'k', 'els', 'k', 'node', 'left', 'size', 'return', 'select', 'node', 'left', 'k', 'elif', 'k', 'node', 'left', 'size', 'return', 'node', 'valu', 'elif', 'k', 'node', 'left', 'size', 'return', 'select', 'node', 'right', 'k', 'node', 'left', 'size']",def select node k node left none k return node valu els return select node right k els k node left size return select node left k elif k node left size return node valu elif k node left size return select node right k node left size,search,CS,CS152
143188,"I tried selecting the node from an array, thus this is the code that I wrote, I was not sure how can I improve it, but this was my logic: 
 
def debth(item):
    x = 
    if array.index(item) == :
        print ""Level of debth is ""  
    if array.index(item) == x or array.index(item) == x + :
        print ""Level of debth is "" 
    if array.index(item) == x+  or array.index(item) == x +  or array.index(item) == x +  or array.index(item) == x + :
        print ""Level of debth is """,#searchtrees,1,7128,"['I', 'tried', 'selecting', 'the', 'node', 'from', 'an', 'array', 'thus', 'this', 'is', 'the', 'code', 'that', 'I', 'wrote', 'I', 'was', 'not', 'sure', 'how', 'can', 'I', 'improve', 'it', 'but', 'this', 'was', 'my', 'logic', 'def', 'debth', 'item', 'x', 'if', 'array', 'index', 'item', 'print', 'Level', 'of', 'debth', 'is', 'if', 'array', 'index', 'item', 'x', 'or', 'array', 'index', 'item', 'x', 'print', 'Level', 'of', 'debth', 'is', 'if', 'array', 'index', 'item', 'x', 'or', 'array', 'index', 'item', 'x', 'or', 'array', 'index', 'item', 'x', 'or', 'array', 'index', 'item', 'x', 'print', 'Level', 'of', 'debth', 'is']","['i', 'tri', 'select', 'the', 'node', 'from', 'an', 'array', 'thus', 'this', 'is', 'the', 'code', 'that', 'i', 'wrote', 'i', 'was', 'not', 'sure', 'how', 'can', 'i', 'improv', 'it', 'but', 'this', 'was', 'my', 'logic', 'def', 'debth', 'item', 'x', 'if', 'array', 'index', 'item', 'print', 'level', 'of', 'debth', 'is', 'if', 'array', 'index', 'item', 'x', 'or', 'array', 'index', 'item', 'x', 'print', 'level', 'of', 'debth', 'is', 'if', 'array', 'index', 'item', 'x', 'or', 'array', 'index', 'item', 'x', 'or', 'array', 'index', 'item', 'x', 'or', 'array', 'index', 'item', 'x', 'print', 'level', 'of', 'debth', 'is']","['tri', 'select', 'node', 'array', 'thus', 'code', 'wrote', 'sure', 'improv', 'logic', 'def', 'debth', 'item', 'x', 'array', 'index', 'item', 'print', 'level', 'debth', 'array', 'index', 'item', 'x', 'array', 'index', 'item', 'x', 'print', 'level', 'debth', 'array', 'index', 'item', 'x', 'array', 'index', 'item', 'x', 'array', 'index', 'item', 'x', 'array', 'index', 'item', 'x', 'print', 'level', 'debth']",tri select node array thus code wrote sure improv logic def debth item x array index item print level debth array index item x array index item x print level debth array index item x array index item x array index item x array index item x print level debth,search,CS,CS152
143188,"select(node,k):
    if k == node.count:
        return node
    else: return select(root.l_child,k)",#searchtrees,1,7128,"['select', 'node', 'k', 'if', 'k', 'node', 'count', 'return', 'node', 'else', 'return', 'select', 'root', 'l_child', 'k']","['select', 'node', 'k', 'if', 'k', 'node', 'count', 'return', 'node', 'els', 'return', 'select', 'root', 'l_child', 'k']","['select', 'node', 'k', 'k', 'node', 'count', 'return', 'node', 'els', 'return', 'select', 'root', 'l_child', 'k']",select node k k node count return node els return select root l_child k,search,CS,CS152
143188,"def select(node, k):
    if k == node.l_count+: 
       return node 
   if k < node.l_count: 
       select(node.l_child, k) 
   else: 
       select(node.r_child, (k - (node.l_count+)))",#searchtrees,4,7128,"['def', 'select', 'node', 'k', 'if', 'k', 'node', 'l_count', 'return', 'node', 'if', 'k', 'node', 'l_count', 'select', 'node', 'l_child', 'k', 'else', 'select', 'node', 'r_child', 'k', 'node', 'l_count']","['def', 'select', 'node', 'k', 'if', 'k', 'node', 'l_count', 'return', 'node', 'if', 'k', 'node', 'l_count', 'select', 'node', 'l_child', 'k', 'els', 'select', 'node', 'r_child', 'k', 'node', 'l_count']","['def', 'select', 'node', 'k', 'k', 'node', 'l_count', 'return', 'node', 'k', 'node', 'l_count', 'select', 'node', 'l_child', 'k', 'els', 'select', 'node', 'r_child', 'k', 'node', 'l_count']",def select node k k node l_count return node k node l_count select node l_child k els select node r_child k node l_count,search,CS,CS152
143188,"def select(node, index, counter=):
    if counter == index:
        return node.val
    if node is None:
        return
    select(node.l_child, index)
    counter += 
    select(node.r_child, index)",#searchtrees,2,7128,"['def', 'select', 'node', 'index', 'counter', 'if', 'counter', 'index', 'return', 'node', 'val', 'if', 'node', 'is', 'None', 'return', 'select', 'node', 'l_child', 'index', 'counter', 'select', 'node', 'r_child', 'index']","['def', 'select', 'node', 'index', 'counter', 'if', 'counter', 'index', 'return', 'node', 'val', 'if', 'node', 'is', 'none', 'return', 'select', 'node', 'l_child', 'index', 'counter', 'select', 'node', 'r_child', 'index']","['def', 'select', 'node', 'index', 'counter', 'counter', 'index', 'return', 'node', 'val', 'node', 'none', 'return', 'select', 'node', 'l_child', 'index', 'counter', 'select', 'node', 'r_child', 'index']",def select node index counter counter index return node val node none return select node l_child index counter select node r_child index,search,CS,CS152
143188,"I was not able to write a SELECT function but this is as far as I got with the height function: 

def max_heigh_BST():
    if BST.length == :
        print (""Height = "")
    elif BST.length <=  
        print (""Height = "")
    elif BST.length <= 
        print (""Height = "")
    elif BST.length <= 
        print (""Height = "")
    ...",#searchtrees,1,7128,"['I', 'was', 'not', 'able', 'to', 'write', 'a', 'SELECT', 'function', 'but', 'this', 'is', 'as', 'far', 'as', 'I', 'got', 'with', 'the', 'height', 'function', 'def', 'max_heigh_BST', 'if', 'BST', 'length', 'print', 'Height', 'elif', 'BST', 'length', 'print', 'Height', 'elif', 'BST', 'length', 'print', 'Height', 'elif', 'BST', 'length', 'print', 'Height']","['i', 'was', 'not', 'abl', 'to', 'write', 'a', 'select', 'function', 'but', 'this', 'is', 'as', 'far', 'as', 'i', 'got', 'with', 'the', 'height', 'function', 'def', 'max_heigh_bst', 'if', 'bst', 'length', 'print', 'height', 'elif', 'bst', 'length', 'print', 'height', 'elif', 'bst', 'length', 'print', 'height', 'elif', 'bst', 'length', 'print', 'height']","['abl', 'write', 'select', 'function', 'far', 'got', 'height', 'function', 'def', 'max_heigh_bst', 'bst', 'length', 'print', 'height', 'elif', 'bst', 'length', 'print', 'height', 'elif', 'bst', 'length', 'print', 'height', 'elif', 'bst', 'length', 'print', 'height']",abl write select function far got height function def max_heigh_bst bst length print height elif bst length print height elif bst length print height elif bst length print height,search,CS,CS152
153588,"The algorithm could consider NIL nodes to be black nodes and have a counter of black nodes including NIL nodes. It could run the same algorithm on the left and the right side to see whether black_depth_right == black_depth_red. If they're not the same, it cannot be a valid red-black tree. One rotation to rebalance the tree could be to change the root node. E.g. if the root node is switches with the next smaller node in the tree, the whole tree would rebalance to the right. Similarly, if the root is replaced by the next greater node, the whole tree rebalances to the left.",#searchtrees,3,7643,"['The', 'algorithm', 'could', 'consider', 'NIL', 'nodes', 'to', 'be', 'black', 'nodes', 'and', 'have', 'a', 'counter', 'of', 'black', 'nodes', 'including', 'NIL', 'nodes', 'It', 'could', 'run', 'the', 'same', 'algorithm', 'on', 'the', 'left', 'and', 'the', 'right', 'side', 'to', 'see', 'whether', 'black_depth_right', 'black_depth_red', 'If', ""they're"", 'not', 'the', 'same', 'it', 'cannot', 'be', 'a', 'valid', 'red', 'black', 'tree', 'One', 'rotation', 'to', 'rebalance', 'the', 'tree', 'could', 'be', 'to', 'change', 'the', 'root', 'node', 'E', 'g', 'if', 'the', 'root', 'node', 'is', 'switches', 'with', 'the', 'next', 'smaller', 'node', 'in', 'the', 'tree', 'the', 'whole', 'tree', 'would', 'rebalance', 'to', 'the', 'right', 'Similarly', 'if', 'the', 'root', 'is', 'replaced', 'by', 'the', 'next', 'greater', 'node', 'the', 'whole', 'tree', 'rebalances', 'to', 'the', 'left']","['the', 'algorithm', 'could', 'consid', 'nil', 'node', 'to', 'be', 'black', 'node', 'and', 'have', 'a', 'counter', 'of', 'black', 'node', 'includ', 'nil', 'node', 'it', 'could', 'run', 'the', 'same', 'algorithm', 'on', 'the', 'left', 'and', 'the', 'right', 'side', 'to', 'see', 'whether', 'black_depth_right', 'black_depth_r', 'if', ""they'r"", 'not', 'the', 'same', 'it', 'cannot', 'be', 'a', 'valid', 'red', 'black', 'tree', 'one', 'rotat', 'to', 'rebal', 'the', 'tree', 'could', 'be', 'to', 'chang', 'the', 'root', 'node', 'e', 'g', 'if', 'the', 'root', 'node', 'is', 'switch', 'with', 'the', 'next', 'smaller', 'node', 'in', 'the', 'tree', 'the', 'whole', 'tree', 'would', 'rebal', 'to', 'the', 'right', 'similar', 'if', 'the', 'root', 'is', 'replac', 'by', 'the', 'next', 'greater', 'node', 'the', 'whole', 'tree', 'rebal', 'to', 'the', 'left']","['algorithm', 'consid', 'nil', 'node', 'black', 'node', 'counter', 'black', 'node', 'includ', 'nil', 'node', 'run', 'algorithm', 'left', 'right', 'side', 'see', 'whether', 'black_depth_right', 'black_depth_r', ""they'r"", 'cannot', 'valid', 'red', 'black', 'tree', 'one', 'rotat', 'rebal', 'tree', 'chang', 'root', 'node', 'e', 'g', 'root', 'node', 'switch', 'next', 'smaller', 'node', 'tree', 'whole', 'tree', 'rebal', 'right', 'similar', 'root', 'replac', 'next', 'greater', 'node', 'whole', 'tree', 'rebal', 'left']",algorithm consid nil node black node counter black node includ nil node run algorithm left right side see whether black_depth_right black_depth_r they'r cannot valid red black tree one rotat rebal tree chang root node e g root node switch next smaller node tree whole tree rebal right similar root replac next greater node whole tree rebal left,search,CS,CS152
243412,"def get_cmps( root, value):
    counter = 
    if root.data == value:
        
        return counter
    if root.data < value:
        counter+=get_cmps(root.r_child, value)
                
    else: 
        counter+=get_cmps(root.l_child, value)
            
              
    return counter

def avg_cmp (root):
    sum=
    l=inorder(root)
    for index, item in enumerate(l):
        sum+= get_cmps(root, item)
        return sum
    avg= sum/len(l)
    return avg",#searchtrees,3,11223,"['def', 'get_cmps', 'root', 'value', 'counter', 'if', 'root', 'data', 'value', 'return', 'counter', 'if', 'root', 'data', 'value', 'counter', 'get_cmps', 'root', 'r_child', 'value', 'else', 'counter', 'get_cmps', 'root', 'l_child', 'value', 'return', 'counter', 'def', 'avg_cmp', 'root', 'sum', 'l', 'inorder', 'root', 'for', 'index', 'item', 'in', 'enumerate', 'l', 'sum', 'get_cmps', 'root', 'item', 'return', 'sum', 'avg', 'sum', 'len', 'l', 'return', 'avg']","['def', 'get_cmp', 'root', 'valu', 'counter', 'if', 'root', 'data', 'valu', 'return', 'counter', 'if', 'root', 'data', 'valu', 'counter', 'get_cmp', 'root', 'r_child', 'valu', 'els', 'counter', 'get_cmp', 'root', 'l_child', 'valu', 'return', 'counter', 'def', 'avg_cmp', 'root', 'sum', 'l', 'inord', 'root', 'for', 'index', 'item', 'in', 'enumer', 'l', 'sum', 'get_cmp', 'root', 'item', 'return', 'sum', 'avg', 'sum', 'len', 'l', 'return', 'avg']","['def', 'get_cmp', 'root', 'valu', 'counter', 'root', 'data', 'valu', 'return', 'counter', 'root', 'data', 'valu', 'counter', 'get_cmp', 'root', 'r_child', 'valu', 'els', 'counter', 'get_cmp', 'root', 'l_child', 'valu', 'return', 'counter', 'def', 'avg_cmp', 'root', 'sum', 'l', 'inord', 'root', 'index', 'item', 'enumer', 'l', 'sum', 'get_cmp', 'root', 'item', 'return', 'sum', 'avg', 'sum', 'len', 'l', 'return', 'avg']",def get_cmp root valu counter root data valu return counter root data valu counter get_cmp root r_child valu els counter get_cmp root l_child valu return counter def avg_cmp root sum l inord root index item enumer l sum get_cmp root item return sum avg sum len l return avg,search,CS,CS152
243412,"#The first return is the answer
def avg_cmp(node):
    if node == None:
        return ,
    if node.l_child == None and node.r_child == None:
        return ,
    avg_right, num_right = avg_cmp(node.r_child)
    avg_left, num_left = avg_cmp(node.l_child)
    return ((avg_left+)*num_left+(avg_right+)*num_right+)/(+num_right+num_left), +num_right+num_left",#searchtrees,3,11223,"['The', 'first', 'return', 'is', 'the', 'answer', 'def', 'avg_cmp', 'node', 'if', 'node', 'None', 'return', 'if', 'node', 'l_child', 'None', 'and', 'node', 'r_child', 'None', 'return', 'avg_right', 'num_right', 'avg_cmp', 'node', 'r_child', 'avg_left', 'num_left', 'avg_cmp', 'node', 'l_child', 'return', 'avg_left', 'num_left', 'avg_right', 'num_right', 'num_right', 'num_left', 'num_right', 'num_left']","['the', 'first', 'return', 'is', 'the', 'answer', 'def', 'avg_cmp', 'node', 'if', 'node', 'none', 'return', 'if', 'node', 'l_child', 'none', 'and', 'node', 'r_child', 'none', 'return', 'avg_right', 'num_right', 'avg_cmp', 'node', 'r_child', 'avg_left', 'num_left', 'avg_cmp', 'node', 'l_child', 'return', 'avg_left', 'num_left', 'avg_right', 'num_right', 'num_right', 'num_left', 'num_right', 'num_left']","['first', 'return', 'answer', 'def', 'avg_cmp', 'node', 'node', 'none', 'return', 'node', 'l_child', 'none', 'node', 'r_child', 'none', 'return', 'avg_right', 'num_right', 'avg_cmp', 'node', 'r_child', 'avg_left', 'num_left', 'avg_cmp', 'node', 'l_child', 'return', 'avg_left', 'num_left', 'avg_right', 'num_right', 'num_right', 'num_left', 'num_right', 'num_left']",first return answer def avg_cmp node node none return node l_child none node r_child none return avg_right num_right avg_cmp node r_child avg_left num_left avg_cmp node l_child return avg_left num_left avg_right num_right num_right num_left num_right num_left,search,CS,CS152
243412,"def avg_cmp(bst):
    return _sum_cmp(bst.root,)/bst.size

def _sum_cmp(root,depth):
    
    if root == None:
        return 
    
    return _sum_cmp(root.l,depth+)+_sum_cmp(root.r,depth+)+depth+",#searchtrees,3,11223,"['def', 'avg_cmp', 'bst', 'return', '_sum_cmp', 'bst', 'root', 'bst', 'size', 'def', '_sum_cmp', 'root', 'depth', 'if', 'root', 'None', 'return', 'return', '_sum_cmp', 'root', 'l', 'depth', '_sum_cmp', 'root', 'r', 'depth', 'depth']","['def', 'avg_cmp', 'bst', 'return', '_sum_cmp', 'bst', 'root', 'bst', 'size', 'def', '_sum_cmp', 'root', 'depth', 'if', 'root', 'none', 'return', 'return', '_sum_cmp', 'root', 'l', 'depth', '_sum_cmp', 'root', 'r', 'depth', 'depth']","['def', 'avg_cmp', 'bst', 'return', '_sum_cmp', 'bst', 'root', 'bst', 'size', 'def', '_sum_cmp', 'root', 'depth', 'root', 'none', 'return', 'return', '_sum_cmp', 'root', 'l', 'depth', '_sum_cmp', 'root', 'r', 'depth', 'depth']",def avg_cmp bst return _sum_cmp bst root bst size def _sum_cmp root depth root none return return _sum_cmp root l depth _sum_cmp root r depth depth,search,CS,CS152
243418,"def avg_cmp(bst):
    count = 
    def droot(root, node):
        """"""finds distance from the node to the root. droot of root is """"""
        if node == root:
            return 
        else:
            return droot(bst,node.parent)+
        
    def tot_cmp(node):
        nonlocal count
        """"""finds total comparisons for searching all elements of the tree rooted at node""""""
        if node == None: 
            return 
        count +=  
        return droot(bst, node) + tot_cmp(node.l_child) + tot_cmp(node.r_child)
    return tot_cmp(bst)/count",#searchtrees,4,11226,"['def', 'avg_cmp', 'bst', 'count', 'def', 'droot', 'root', 'node', 'finds', 'distance', 'from', 'the', 'node', 'to', 'the', 'root', 'droot', 'of', 'root', 'is', 'if', 'node', 'root', 'return', 'else', 'return', 'droot', 'bst', 'node', 'parent', 'def', 'tot_cmp', 'node', 'nonlocal', 'count', 'finds', 'total', 'comparisons', 'for', 'searching', 'all', 'elements', 'of', 'the', 'tree', 'rooted', 'at', 'node', 'if', 'node', 'None', 'return', 'count', 'return', 'droot', 'bst', 'node', 'tot_cmp', 'node', 'l_child', 'tot_cmp', 'node', 'r_child', 'return', 'tot_cmp', 'bst', 'count']","['def', 'avg_cmp', 'bst', 'count', 'def', 'droot', 'root', 'node', 'find', 'distanc', 'from', 'the', 'node', 'to', 'the', 'root', 'droot', 'of', 'root', 'is', 'if', 'node', 'root', 'return', 'els', 'return', 'droot', 'bst', 'node', 'parent', 'def', 'tot_cmp', 'node', 'nonloc', 'count', 'find', 'total', 'comparison', 'for', 'search', 'all', 'element', 'of', 'the', 'tree', 'root', 'at', 'node', 'if', 'node', 'none', 'return', 'count', 'return', 'droot', 'bst', 'node', 'tot_cmp', 'node', 'l_child', 'tot_cmp', 'node', 'r_child', 'return', 'tot_cmp', 'bst', 'count']","['def', 'avg_cmp', 'bst', 'count', 'def', 'droot', 'root', 'node', 'find', 'distanc', 'node', 'root', 'droot', 'root', 'node', 'root', 'return', 'els', 'return', 'droot', 'bst', 'node', 'parent', 'def', 'tot_cmp', 'node', 'nonloc', 'count', 'find', 'total', 'comparison', 'search', 'element', 'tree', 'root', 'node', 'node', 'none', 'return', 'count', 'return', 'droot', 'bst', 'node', 'tot_cmp', 'node', 'l_child', 'tot_cmp', 'node', 'r_child', 'return', 'tot_cmp', 'bst', 'count']",def avg_cmp bst count def droot root node find distanc node root droot root node root return els return droot bst node parent def tot_cmp node nonloc count find total comparison search element tree root node node none return count return droot bst node tot_cmp node l_child tot_cmp node r_child return tot_cmp bst count,search,CS,CS152
243418,"def search(root, value):
    global num_comparisons
    
    """"""searches a tree rooted at root for a node with data = value, returns the node if found, None otherwise""""""
    if root == None or value == root.data:
         
        num_comparisons +=
        return  num_comparisons
    
    if value < root.data:
        num_comparisons +=
        return search(root.l_child, value)
    else:
        num_comparisons +=
        
        return search(root.r_child, value)",#searchtrees,2,11226,"['def', 'search', 'root', 'value', 'global', 'num_comparisons', 'searches', 'a', 'tree', 'rooted', 'at', 'root', 'for', 'a', 'node', 'with', 'data', 'value', 'returns', 'the', 'node', 'if', 'found', 'None', 'otherwise', 'if', 'root', 'None', 'or', 'value', 'root', 'data', 'num_comparisons', 'return', 'num_comparisons', 'if', 'value', 'root', 'data', 'num_comparisons', 'return', 'search', 'root', 'l_child', 'value', 'else', 'num_comparisons', 'return', 'search', 'root', 'r_child', 'value']","['def', 'search', 'root', 'valu', 'global', 'num_comparison', 'search', 'a', 'tree', 'root', 'at', 'root', 'for', 'a', 'node', 'with', 'data', 'valu', 'return', 'the', 'node', 'if', 'found', 'none', 'otherwis', 'if', 'root', 'none', 'or', 'valu', 'root', 'data', 'num_comparison', 'return', 'num_comparison', 'if', 'valu', 'root', 'data', 'num_comparison', 'return', 'search', 'root', 'l_child', 'valu', 'els', 'num_comparison', 'return', 'search', 'root', 'r_child', 'valu']","['def', 'search', 'root', 'valu', 'global', 'num_comparison', 'search', 'tree', 'root', 'root', 'node', 'data', 'valu', 'return', 'node', 'found', 'none', 'otherwis', 'root', 'none', 'valu', 'root', 'data', 'num_comparison', 'return', 'num_comparison', 'valu', 'root', 'data', 'num_comparison', 'return', 'search', 'root', 'l_child', 'valu', 'els', 'num_comparison', 'return', 'search', 'root', 'r_child', 'valu']",def search root valu global num_comparison search tree root root node data valu return node found none otherwis root none valu root data num_comparison return num_comparison valu root data num_comparison return search root l_child valu els num_comparison return search root r_child valu,search,CS,CS152
243424,"def findLen(node):
    if node == None:
        return 
    else:
        return ( + findLen(node.l_child) + findLen(node.r_child))

import numpy as np
def cmp(root):
    # Base case
    count = root.height
    count_left = 
    count_right = 
    if root.l_child != None:
        count_left = cmp(root.l_child)
    if root.r_child != None:
        count_right = cmp(root.r_child)
    return count + count_left + count_right

def avg_cmp(root):
    return cmp(root)/findLen(root)",#searchtrees,4,11229,"['def', 'findLen', 'node', 'if', 'node', 'None', 'return', 'else', 'return', 'findLen', 'node', 'l_child', 'findLen', 'node', 'r_child', 'import', 'numpy', 'as', 'np', 'def', 'cmp', 'root', 'Base', 'case', 'count', 'root', 'height', 'count_left', 'count_right', 'if', 'root', 'l_child', 'None', 'count_left', 'cmp', 'root', 'l_child', 'if', 'root', 'r_child', 'None', 'count_right', 'cmp', 'root', 'r_child', 'return', 'count', 'count_left', 'count_right', 'def', 'avg_cmp', 'root', 'return', 'cmp', 'root', 'findLen', 'root']","['def', 'findlen', 'node', 'if', 'node', 'none', 'return', 'els', 'return', 'findlen', 'node', 'l_child', 'findlen', 'node', 'r_child', 'import', 'numpi', 'as', 'np', 'def', 'cmp', 'root', 'base', 'case', 'count', 'root', 'height', 'count_left', 'count_right', 'if', 'root', 'l_child', 'none', 'count_left', 'cmp', 'root', 'l_child', 'if', 'root', 'r_child', 'none', 'count_right', 'cmp', 'root', 'r_child', 'return', 'count', 'count_left', 'count_right', 'def', 'avg_cmp', 'root', 'return', 'cmp', 'root', 'findlen', 'root']","['def', 'findlen', 'node', 'node', 'none', 'return', 'els', 'return', 'findlen', 'node', 'l_child', 'findlen', 'node', 'r_child', 'import', 'numpi', 'np', 'def', 'cmp', 'root', 'base', 'case', 'count', 'root', 'height', 'count_left', 'count_right', 'root', 'l_child', 'none', 'count_left', 'cmp', 'root', 'l_child', 'root', 'r_child', 'none', 'count_right', 'cmp', 'root', 'r_child', 'return', 'count', 'count_left', 'count_right', 'def', 'avg_cmp', 'root', 'return', 'cmp', 'root', 'findlen', 'root']",def findlen node node none return els return findlen node l_child findlen node r_child import numpi np def cmp root base case count root height count_left count_right root l_child none count_left cmp root l_child root r_child none count_right cmp root r_child return count count_left count_right def avg_cmp root return cmp root findlen root,search,CS,CS152
243424,"def avg_cmp(bst, total=,nodes=):
	
	if bst.l_child == None and bst.r_child == None:
		nodes +=
	elif bst.l_child is not None and bst.data > bst.l_child.data:
		total +=
	elif bst.r_child is not None and bst.data > bst.r_child.data:
		total +=
	if bst.l_child != None:
		avg_cmp(bst,total,nodes)
	if bst.r_child != None:
		avg_cmp(bst,total,nodes)
	return(total/nodes)",#searchtrees,3,11229,"['def', 'avg_cmp', 'bst', 'total', 'nodes', 'if', 'bst', 'l_child', 'None', 'and', 'bst', 'r_child', 'None', 'nodes', 'elif', 'bst', 'l_child', 'is', 'not', 'None', 'and', 'bst', 'data', 'bst', 'l_child', 'data', 'total', 'elif', 'bst', 'r_child', 'is', 'not', 'None', 'and', 'bst', 'data', 'bst', 'r_child', 'data', 'total', 'if', 'bst', 'l_child', 'None', 'avg_cmp', 'bst', 'total', 'nodes', 'if', 'bst', 'r_child', 'None', 'avg_cmp', 'bst', 'total', 'nodes', 'return', 'total', 'nodes']","['def', 'avg_cmp', 'bst', 'total', 'node', 'if', 'bst', 'l_child', 'none', 'and', 'bst', 'r_child', 'none', 'node', 'elif', 'bst', 'l_child', 'is', 'not', 'none', 'and', 'bst', 'data', 'bst', 'l_child', 'data', 'total', 'elif', 'bst', 'r_child', 'is', 'not', 'none', 'and', 'bst', 'data', 'bst', 'r_child', 'data', 'total', 'if', 'bst', 'l_child', 'none', 'avg_cmp', 'bst', 'total', 'node', 'if', 'bst', 'r_child', 'none', 'avg_cmp', 'bst', 'total', 'node', 'return', 'total', 'node']","['def', 'avg_cmp', 'bst', 'total', 'node', 'bst', 'l_child', 'none', 'bst', 'r_child', 'none', 'node', 'elif', 'bst', 'l_child', 'none', 'bst', 'data', 'bst', 'l_child', 'data', 'total', 'elif', 'bst', 'r_child', 'none', 'bst', 'data', 'bst', 'r_child', 'data', 'total', 'bst', 'l_child', 'none', 'avg_cmp', 'bst', 'total', 'node', 'bst', 'r_child', 'none', 'avg_cmp', 'bst', 'total', 'node', 'return', 'total', 'node']",def avg_cmp bst total node bst l_child none bst r_child none node elif bst l_child none bst data bst l_child data total elif bst r_child none bst data bst r_child data total bst l_child none avg_cmp bst total node bst r_child none avg_cmp bst total node return total node,search,CS,CS152
243424,"def avg_comp(bst):
    No_of_comp = 
    for i in range():
        No_of_comp = No_of_comp + search(bst, random.choice(List), count)
        
        #Note that the search function has been adjusted to produce the count (number of comparisons) as output. 
    
        avg_comp = No_of_comp/  #averaged a thousand times.
    
    return avg_comp

def search(root, value, count):
    """"""searches a tree rooted at root for a node with data = value, returns the node""""""
    
    count = count + 
    if root == None or root.data == value:
    (see notebook for continuation)",#searchtrees,3,11229,"['def', 'avg_comp', 'bst', 'No_of_comp', 'for', 'i', 'in', 'range', 'No_of_comp', 'No_of_comp', 'search', 'bst', 'random', 'choice', 'List', 'count', 'Note', 'that', 'the', 'search', 'function', 'has', 'been', 'adjusted', 'to', 'produce', 'the', 'count', 'number', 'of', 'comparisons', 'as', 'output', 'avg_comp', 'No_of_comp', 'averaged', 'a', 'thousand', 'times', 'return', 'avg_comp', 'def', 'search', 'root', 'value', 'count', 'searches', 'a', 'tree', 'rooted', 'at', 'root', 'for', 'a', 'node', 'with', 'data', 'value', 'returns', 'the', 'node', 'count', 'count', 'if', 'root', 'None', 'or', 'root', 'data', 'value', 'see', 'notebook', 'for', 'continuation']","['def', 'avg_comp', 'bst', 'no_of_comp', 'for', 'i', 'in', 'rang', 'no_of_comp', 'no_of_comp', 'search', 'bst', 'random', 'choic', 'list', 'count', 'note', 'that', 'the', 'search', 'function', 'has', 'been', 'adjust', 'to', 'produc', 'the', 'count', 'number', 'of', 'comparison', 'as', 'output', 'avg_comp', 'no_of_comp', 'averag', 'a', 'thousand', 'time', 'return', 'avg_comp', 'def', 'search', 'root', 'valu', 'count', 'search', 'a', 'tree', 'root', 'at', 'root', 'for', 'a', 'node', 'with', 'data', 'valu', 'return', 'the', 'node', 'count', 'count', 'if', 'root', 'none', 'or', 'root', 'data', 'valu', 'see', 'notebook', 'for', 'continu']","['def', 'avg_comp', 'bst', 'no_of_comp', 'rang', 'no_of_comp', 'no_of_comp', 'search', 'bst', 'random', 'choic', 'list', 'count', 'note', 'search', 'function', 'adjust', 'produc', 'count', 'number', 'comparison', 'output', 'avg_comp', 'no_of_comp', 'averag', 'thousand', 'time', 'return', 'avg_comp', 'def', 'search', 'root', 'valu', 'count', 'search', 'tree', 'root', 'root', 'node', 'data', 'valu', 'return', 'node', 'count', 'count', 'root', 'none', 'root', 'data', 'valu', 'see', 'notebook', 'continu']",def avg_comp bst no_of_comp rang no_of_comp no_of_comp search bst random choic list count note search function adjust produc count number comparison output avg_comp no_of_comp averag thousand time return avg_comp def search root valu count search tree root root node data valu return node count count root none root data valu see notebook continu,search,CS,CS152
243424,"def avg_cmp(root):
    record = [[root,]]
    t_comparisons =  #checked
    t =  #maxavailalble
    h =  #maxheight
    s = 
    while t > t_comparisons:
        c = record[t_comparisons]
        if c[].l_child != None:
            if c[] == h: h += 
            record.append([c[].l_child, c[]+])
            s += c[]+
            t+= 
        if c[].r_child != None:
            if c[] == h: h += 
            record.append([c[].r_child, c[]+])
            s += c[]+
            t+= 
        t_comparisons += 
    return s / t",#searchtrees,3,11229,"['def', 'avg_cmp', 'root', 'record', 'root', 't_comparisons', 'checked', 't', 'maxavailalble', 'h', 'maxheight', 's', 'while', 't', 't_comparisons', 'c', 'record', 't_comparisons', 'if', 'c', 'l_child', 'None', 'if', 'c', 'h', 'h', 'record', 'append', 'c', 'l_child', 'c', 's', 'c', 't', 'if', 'c', 'r_child', 'None', 'if', 'c', 'h', 'h', 'record', 'append', 'c', 'r_child', 'c', 's', 'c', 't', 't_comparisons', 'return', 's', 't']","['def', 'avg_cmp', 'root', 'record', 'root', 't_comparison', 'check', 't', 'maxavailalbl', 'h', 'maxheight', 's', 'while', 't', 't_comparison', 'c', 'record', 't_comparison', 'if', 'c', 'l_child', 'none', 'if', 'c', 'h', 'h', 'record', 'append', 'c', 'l_child', 'c', 's', 'c', 't', 'if', 'c', 'r_child', 'none', 'if', 'c', 'h', 'h', 'record', 'append', 'c', 'r_child', 'c', 's', 'c', 't', 't_comparison', 'return', 's', 't']","['def', 'avg_cmp', 'root', 'record', 'root', 't_comparison', 'check', 'maxavailalbl', 'h', 'maxheight', 't_comparison', 'c', 'record', 't_comparison', 'c', 'l_child', 'none', 'c', 'h', 'h', 'record', 'append', 'c', 'l_child', 'c', 'c', 'c', 'r_child', 'none', 'c', 'h', 'h', 'record', 'append', 'c', 'r_child', 'c', 'c', 't_comparison', 'return']",def avg_cmp root record root t_comparison check maxavailalbl h maxheight t_comparison c record t_comparison c l_child none c h h record append c l_child c c c r_child none c h h record append c r_child c c t_comparison return,search,CS,CS152
243424,"#Yuhao
count=
length=
def avg_cmp(root):
    global count,length
    c=
    if root.data==None:
        return
    else:
        c+=
        length+=
        count+=c
        avg_cmp(root.l_child)
        avg_cmp(root.l_child)
print(""Average is:"", float(count)/length)",#searchtrees,3,11229,"['Yuhao', 'count', 'length', 'def', 'avg_cmp', 'root', 'global', 'count', 'length', 'c', 'if', 'root', 'data', 'None', 'return', 'else', 'c', 'length', 'count', 'c', 'avg_cmp', 'root', 'l_child', 'avg_cmp', 'root', 'l_child', 'print', 'Average', 'is', 'float', 'count', 'length']","['yuhao', 'count', 'length', 'def', 'avg_cmp', 'root', 'global', 'count', 'length', 'c', 'if', 'root', 'data', 'none', 'return', 'els', 'c', 'length', 'count', 'c', 'avg_cmp', 'root', 'l_child', 'avg_cmp', 'root', 'l_child', 'print', 'averag', 'is', 'float', 'count', 'length']","['yuhao', 'count', 'length', 'def', 'avg_cmp', 'root', 'global', 'count', 'length', 'c', 'root', 'data', 'none', 'return', 'els', 'c', 'length', 'count', 'c', 'avg_cmp', 'root', 'l_child', 'avg_cmp', 'root', 'l_child', 'print', 'averag', 'float', 'count', 'length']",yuhao count length def avg_cmp root global count length c root data none return els c length count c avg_cmp root l_child avg_cmp root l_child print averag float count length,search,CS,CS152
243424,"def _avg_cmp(bst, level):
    if bst.l_child == None and bst.r_child == None:
        return level
    elif bst.l_child != None and bst.r_child == None:
        return level + avg_cmp(bst.l_child, level + )
    elif bst.l_child == None and bst.r_child != None:
        return level + avg_cmp(bst.r_child, level + )
    return  + avg_cmp(bst.l_child, level + ) + avg_cmp(bst.r_child, level + )

def avg_cmp(bst):
    return _avg_cmp(bst, )

for i in range(, MAX_NODES_NUM):
    for x in [Node(random.randint(,)) for _ in range(i)]: 
        if not bst: 
            bst = x
        else:",#searchtrees,3,11229,"['def', '_avg_cmp', 'bst', 'level', 'if', 'bst', 'l_child', 'None', 'and', 'bst', 'r_child', 'None', 'return', 'level', 'elif', 'bst', 'l_child', 'None', 'and', 'bst', 'r_child', 'None', 'return', 'level', 'avg_cmp', 'bst', 'l_child', 'level', 'elif', 'bst', 'l_child', 'None', 'and', 'bst', 'r_child', 'None', 'return', 'level', 'avg_cmp', 'bst', 'r_child', 'level', 'return', 'avg_cmp', 'bst', 'l_child', 'level', 'avg_cmp', 'bst', 'r_child', 'level', 'def', 'avg_cmp', 'bst', 'return', '_avg_cmp', 'bst', 'for', 'i', 'in', 'range', 'MAX_NODES_NUM', 'for', 'x', 'in', 'Node', 'random', 'randint', 'for', '_', 'in', 'range', 'i', 'if', 'not', 'bst', 'bst', 'x', 'else']","['def', '_avg_cmp', 'bst', 'level', 'if', 'bst', 'l_child', 'none', 'and', 'bst', 'r_child', 'none', 'return', 'level', 'elif', 'bst', 'l_child', 'none', 'and', 'bst', 'r_child', 'none', 'return', 'level', 'avg_cmp', 'bst', 'l_child', 'level', 'elif', 'bst', 'l_child', 'none', 'and', 'bst', 'r_child', 'none', 'return', 'level', 'avg_cmp', 'bst', 'r_child', 'level', 'return', 'avg_cmp', 'bst', 'l_child', 'level', 'avg_cmp', 'bst', 'r_child', 'level', 'def', 'avg_cmp', 'bst', 'return', '_avg_cmp', 'bst', 'for', 'i', 'in', 'rang', 'max_nodes_num', 'for', 'x', 'in', 'node', 'random', 'randint', 'for', '_', 'in', 'rang', 'i', 'if', 'not', 'bst', 'bst', 'x', 'els']","['def', '_avg_cmp', 'bst', 'level', 'bst', 'l_child', 'none', 'bst', 'r_child', 'none', 'return', 'level', 'elif', 'bst', 'l_child', 'none', 'bst', 'r_child', 'none', 'return', 'level', 'avg_cmp', 'bst', 'l_child', 'level', 'elif', 'bst', 'l_child', 'none', 'bst', 'r_child', 'none', 'return', 'level', 'avg_cmp', 'bst', 'r_child', 'level', 'return', 'avg_cmp', 'bst', 'l_child', 'level', 'avg_cmp', 'bst', 'r_child', 'level', 'def', 'avg_cmp', 'bst', 'return', '_avg_cmp', 'bst', 'rang', 'max_nodes_num', 'x', 'node', 'random', 'randint', '_', 'rang', 'bst', 'bst', 'x', 'els']",def _avg_cmp bst level bst l_child none bst r_child none return level elif bst l_child none bst r_child none return level avg_cmp bst l_child level elif bst l_child none bst r_child none return level avg_cmp bst r_child level return avg_cmp bst l_child level avg_cmp bst r_child level def avg_cmp bst return _avg_cmp bst rang max_nodes_num x node random randint _ rang bst bst x els,search,CS,CS152
243424,"global count 
count=
length=
def avg_cmp(root):
    global count,length
    c=
    if root.data==None:
        return
    else:
        c+=
        length+=
        count+=c
        avg_cmp(root.l_child)
        avg_cmp(root.l_child)
return(""Average is:"", float(count)/length)",#searchtrees,3,11229,"['global', 'count', 'count', 'length', 'def', 'avg_cmp', 'root', 'global', 'count', 'length', 'c', 'if', 'root', 'data', 'None', 'return', 'else', 'c', 'length', 'count', 'c', 'avg_cmp', 'root', 'l_child', 'avg_cmp', 'root', 'l_child', 'return', 'Average', 'is', 'float', 'count', 'length']","['global', 'count', 'count', 'length', 'def', 'avg_cmp', 'root', 'global', 'count', 'length', 'c', 'if', 'root', 'data', 'none', 'return', 'els', 'c', 'length', 'count', 'c', 'avg_cmp', 'root', 'l_child', 'avg_cmp', 'root', 'l_child', 'return', 'averag', 'is', 'float', 'count', 'length']","['global', 'count', 'count', 'length', 'def', 'avg_cmp', 'root', 'global', 'count', 'length', 'c', 'root', 'data', 'none', 'return', 'els', 'c', 'length', 'count', 'c', 'avg_cmp', 'root', 'l_child', 'avg_cmp', 'root', 'l_child', 'return', 'averag', 'float', 'count', 'length']",global count count length def avg_cmp root global count length c root data none return els c length count c avg_cmp root l_child avg_cmp root l_child return averag float count length,search,CS,CS152
243424,"def maximum_height(bst):
    max_depth = 
    level = 
    
    def traverse(root):
        if root == None:
            level -= 
            if max_depth < level:
                max_depth = level
        else:
            root.data = ""visited""
            level += 
            traverse(root.l_child)
            traverse(root.r_child)

    return max_depth

def avg_cmp(bst):
    for i in maximum_height(bst):
        #count number of nodes in each level
    #return (sum of (number of nodes in that level * number of that level) for every level) * (/n)",#searchtrees,2,11229,"['def', 'maximum_height', 'bst', 'max_depth', 'level', 'def', 'traverse', 'root', 'if', 'root', 'None', 'level', 'if', 'max_depth', 'level', 'max_depth', 'level', 'else', 'root', 'data', 'visited', 'level', 'traverse', 'root', 'l_child', 'traverse', 'root', 'r_child', 'return', 'max_depth', 'def', 'avg_cmp', 'bst', 'for', 'i', 'in', 'maximum_height', 'bst', 'count', 'number', 'of', 'nodes', 'in', 'each', 'level', 'return', 'sum', 'of', 'number', 'of', 'nodes', 'in', 'that', 'level', 'number', 'of', 'that', 'level', 'for', 'every', 'level', 'n']","['def', 'maximum_height', 'bst', 'max_depth', 'level', 'def', 'travers', 'root', 'if', 'root', 'none', 'level', 'if', 'max_depth', 'level', 'max_depth', 'level', 'els', 'root', 'data', 'visit', 'level', 'travers', 'root', 'l_child', 'travers', 'root', 'r_child', 'return', 'max_depth', 'def', 'avg_cmp', 'bst', 'for', 'i', 'in', 'maximum_height', 'bst', 'count', 'number', 'of', 'node', 'in', 'each', 'level', 'return', 'sum', 'of', 'number', 'of', 'node', 'in', 'that', 'level', 'number', 'of', 'that', 'level', 'for', 'everi', 'level', 'n']","['def', 'maximum_height', 'bst', 'max_depth', 'level', 'def', 'travers', 'root', 'root', 'none', 'level', 'max_depth', 'level', 'max_depth', 'level', 'els', 'root', 'data', 'visit', 'level', 'travers', 'root', 'l_child', 'travers', 'root', 'r_child', 'return', 'max_depth', 'def', 'avg_cmp', 'bst', 'maximum_height', 'bst', 'count', 'number', 'node', 'level', 'return', 'sum', 'number', 'node', 'level', 'number', 'level', 'everi', 'level', 'n']",def maximum_height bst max_depth level def travers root root none level max_depth level max_depth level els root data visit level travers root l_child travers root r_child return max_depth def avg_cmp bst maximum_height bst count number node level return sum number node level number level everi level n,search,CS,CS152
243424,"def search_count(root, value, count):
    """"""searches a tree rooted at root for a node with data = value, returns the node""""""
    if root == None or root.data == value:
        return [root, count]
    else: 
        count+=
        if value < root.data: 
            if root.l_child is None: 
                return [None, count]
            else: 
                return search_count(root.l_child, value, count
def avg_cmp(bst):
    emptylist = []
    nodes_data = data_lst(bst, emptylist)
    comparisons = []
    for v in nodes_data:
        comparisons.append(search_count(bst,v,)[])
    retu",#searchtrees,3,11229,"['def', 'search_count', 'root', 'value', 'count', 'searches', 'a', 'tree', 'rooted', 'at', 'root', 'for', 'a', 'node', 'with', 'data', 'value', 'returns', 'the', 'node', 'if', 'root', 'None', 'or', 'root', 'data', 'value', 'return', 'root', 'count', 'else', 'count', 'if', 'value', 'root', 'data', 'if', 'root', 'l_child', 'is', 'None', 'return', 'None', 'count', 'else', 'return', 'search_count', 'root', 'l_child', 'value', 'count', 'def', 'avg_cmp', 'bst', 'emptylist', 'nodes_data', 'data_lst', 'bst', 'emptylist', 'comparisons', 'for', 'v', 'in', 'nodes_data', 'comparisons', 'append', 'search_count', 'bst', 'v', 'retu']","['def', 'search_count', 'root', 'valu', 'count', 'search', 'a', 'tree', 'root', 'at', 'root', 'for', 'a', 'node', 'with', 'data', 'valu', 'return', 'the', 'node', 'if', 'root', 'none', 'or', 'root', 'data', 'valu', 'return', 'root', 'count', 'els', 'count', 'if', 'valu', 'root', 'data', 'if', 'root', 'l_child', 'is', 'none', 'return', 'none', 'count', 'els', 'return', 'search_count', 'root', 'l_child', 'valu', 'count', 'def', 'avg_cmp', 'bst', 'emptylist', 'nodes_data', 'data_lst', 'bst', 'emptylist', 'comparison', 'for', 'v', 'in', 'nodes_data', 'comparison', 'append', 'search_count', 'bst', 'v', 'retu']","['def', 'search_count', 'root', 'valu', 'count', 'search', 'tree', 'root', 'root', 'node', 'data', 'valu', 'return', 'node', 'root', 'none', 'root', 'data', 'valu', 'return', 'root', 'count', 'els', 'count', 'valu', 'root', 'data', 'root', 'l_child', 'none', 'return', 'none', 'count', 'els', 'return', 'search_count', 'root', 'l_child', 'valu', 'count', 'def', 'avg_cmp', 'bst', 'emptylist', 'nodes_data', 'data_lst', 'bst', 'emptylist', 'comparison', 'v', 'nodes_data', 'comparison', 'append', 'search_count', 'bst', 'v', 'retu']",def search_count root valu count search tree root root node data valu return node root none root data valu return root count els count valu root data root l_child none return none count els return search_count root l_child valu count def avg_cmp bst emptylist nodes_data data_lst bst emptylist comparison v nodes_data comparison append search_count bst v retu,search,CS,CS152
243424,"def average_cmp(root): 
  count = 
  counter = 
  length = 
  if root.data == None: 
    return
  else: 
    counter += 
    length += 
    ave_cmp(root.l_child)
    ave_cmp(root.r_child)
print(count/length)",#searchtrees,3,11229,"['def', 'average_cmp', 'root', 'count', 'counter', 'length', 'if', 'root', 'data', 'None', 'return', 'else', 'counter', 'length', 'ave_cmp', 'root', 'l_child', 'ave_cmp', 'root', 'r_child', 'print', 'count', 'length']","['def', 'average_cmp', 'root', 'count', 'counter', 'length', 'if', 'root', 'data', 'none', 'return', 'els', 'counter', 'length', 'ave_cmp', 'root', 'l_child', 'ave_cmp', 'root', 'r_child', 'print', 'count', 'length']","['def', 'average_cmp', 'root', 'count', 'counter', 'length', 'root', 'data', 'none', 'return', 'els', 'counter', 'length', 'ave_cmp', 'root', 'l_child', 'ave_cmp', 'root', 'r_child', 'print', 'count', 'length']",def average_cmp root count counter length root data none return els counter length ave_cmp root l_child ave_cmp root r_child print count length,search,CS,CS152
243430,"#counting number of comparisons required for each node by getting the depth
def depth(root, value):
    q = [(root, )]
    while q:
        node, depth = q.pop()
        if node.data == value:
            return depth
        depth += 
        if node.left:
            q.append((node.left, depth))
        if node.right:
            q.append((node.right, depth))
    return None
#adding the number of comparisons then dividing that by the number of nodes
a.append(depth)
sm = sum(a[:len(a)])
no = sm/len(a)
print(no)",#searchtrees,4,11230,"['counting', 'number', 'of', 'comparisons', 'required', 'for', 'each', 'node', 'by', 'getting', 'the', 'depth', 'def', 'depth', 'root', 'value', 'q', 'root', 'while', 'q', 'node', 'depth', 'q', 'pop', 'if', 'node', 'data', 'value', 'return', 'depth', 'depth', 'if', 'node', 'left', 'q', 'append', 'node', 'left', 'depth', 'if', 'node', 'right', 'q', 'append', 'node', 'right', 'depth', 'return', 'None', 'adding', 'the', 'number', 'of', 'comparisons', 'then', 'dividing', 'that', 'by', 'the', 'number', 'of', 'nodes', 'a', 'append', 'depth', 'sm', 'sum', 'a', 'len', 'a', 'no', 'sm', 'len', 'a', 'print', 'no']","['count', 'number', 'of', 'comparison', 'requir', 'for', 'each', 'node', 'by', 'get', 'the', 'depth', 'def', 'depth', 'root', 'valu', 'q', 'root', 'while', 'q', 'node', 'depth', 'q', 'pop', 'if', 'node', 'data', 'valu', 'return', 'depth', 'depth', 'if', 'node', 'left', 'q', 'append', 'node', 'left', 'depth', 'if', 'node', 'right', 'q', 'append', 'node', 'right', 'depth', 'return', 'none', 'ad', 'the', 'number', 'of', 'comparison', 'then', 'divid', 'that', 'by', 'the', 'number', 'of', 'node', 'a', 'append', 'depth', 'sm', 'sum', 'a', 'len', 'a', 'no', 'sm', 'len', 'a', 'print', 'no']","['count', 'number', 'comparison', 'requir', 'node', 'get', 'depth', 'def', 'depth', 'root', 'valu', 'q', 'root', 'q', 'node', 'depth', 'q', 'pop', 'node', 'data', 'valu', 'return', 'depth', 'depth', 'node', 'left', 'q', 'append', 'node', 'left', 'depth', 'node', 'right', 'q', 'append', 'node', 'right', 'depth', 'return', 'none', 'ad', 'number', 'comparison', 'divid', 'number', 'node', 'append', 'depth', 'sm', 'sum', 'len', 'sm', 'len', 'print']",count number comparison requir node get depth def depth root valu q root q node depth q pop node data valu return depth depth node left q append node left depth node right q append node right depth return none ad number comparison divid number node append depth sm sum len sm len print,search,CS,CS152
243430,"def avg_cmp(node,h): 
    number_comparisons = []
    if node.l_child != None and node.r_child != None:
        return h + avg_cmp(node.l_child, h+)+avg_cmp(node.r_child, h+)
    elif node.l_child != None and node.r_child == None:
        return h +avg_cmp(node.l_child, h+)
    elif node.r_child != None and node.l_child == None:
        return h + avg_cmp(node.r_child, h+)
    else:
        return h",#searchtrees,3,11230,"['def', 'avg_cmp', 'node', 'h', 'number_comparisons', 'if', 'node', 'l_child', 'None', 'and', 'node', 'r_child', 'None', 'return', 'h', 'avg_cmp', 'node', 'l_child', 'h', 'avg_cmp', 'node', 'r_child', 'h', 'elif', 'node', 'l_child', 'None', 'and', 'node', 'r_child', 'None', 'return', 'h', 'avg_cmp', 'node', 'l_child', 'h', 'elif', 'node', 'r_child', 'None', 'and', 'node', 'l_child', 'None', 'return', 'h', 'avg_cmp', 'node', 'r_child', 'h', 'else', 'return', 'h']","['def', 'avg_cmp', 'node', 'h', 'number_comparison', 'if', 'node', 'l_child', 'none', 'and', 'node', 'r_child', 'none', 'return', 'h', 'avg_cmp', 'node', 'l_child', 'h', 'avg_cmp', 'node', 'r_child', 'h', 'elif', 'node', 'l_child', 'none', 'and', 'node', 'r_child', 'none', 'return', 'h', 'avg_cmp', 'node', 'l_child', 'h', 'elif', 'node', 'r_child', 'none', 'and', 'node', 'l_child', 'none', 'return', 'h', 'avg_cmp', 'node', 'r_child', 'h', 'els', 'return', 'h']","['def', 'avg_cmp', 'node', 'h', 'number_comparison', 'node', 'l_child', 'none', 'node', 'r_child', 'none', 'return', 'h', 'avg_cmp', 'node', 'l_child', 'h', 'avg_cmp', 'node', 'r_child', 'h', 'elif', 'node', 'l_child', 'none', 'node', 'r_child', 'none', 'return', 'h', 'avg_cmp', 'node', 'l_child', 'h', 'elif', 'node', 'r_child', 'none', 'node', 'l_child', 'none', 'return', 'h', 'avg_cmp', 'node', 'r_child', 'h', 'els', 'return', 'h']",def avg_cmp node h number_comparison node l_child none node r_child none return h avg_cmp node l_child h avg_cmp node r_child h elif node l_child none node r_child none return h avg_cmp node l_child h elif node r_child none node l_child none return h avg_cmp node r_child h els return h,search,CS,CS152
243430,"def avg_cmp(bst):
    total=
    count=
    search=
    if bst==None:
        return 
    if bst!=None:
        count+=
        search+=
        total+=search
        if bst.left is None:
            count+=avg_cmp(node.l_child)
        if bst.right is None:
            count+=avg_cmp(node.r_child)
        else:
            return total/count
        
avg_cmp(r)",#searchtrees,3,11230,"['def', 'avg_cmp', 'bst', 'total', 'count', 'search', 'if', 'bst', 'None', 'return', 'if', 'bst', 'None', 'count', 'search', 'total', 'search', 'if', 'bst', 'left', 'is', 'None', 'count', 'avg_cmp', 'node', 'l_child', 'if', 'bst', 'right', 'is', 'None', 'count', 'avg_cmp', 'node', 'r_child', 'else', 'return', 'total', 'count', 'avg_cmp', 'r']","['def', 'avg_cmp', 'bst', 'total', 'count', 'search', 'if', 'bst', 'none', 'return', 'if', 'bst', 'none', 'count', 'search', 'total', 'search', 'if', 'bst', 'left', 'is', 'none', 'count', 'avg_cmp', 'node', 'l_child', 'if', 'bst', 'right', 'is', 'none', 'count', 'avg_cmp', 'node', 'r_child', 'els', 'return', 'total', 'count', 'avg_cmp', 'r']","['def', 'avg_cmp', 'bst', 'total', 'count', 'search', 'bst', 'none', 'return', 'bst', 'none', 'count', 'search', 'total', 'search', 'bst', 'left', 'none', 'count', 'avg_cmp', 'node', 'l_child', 'bst', 'right', 'none', 'count', 'avg_cmp', 'node', 'r_child', 'els', 'return', 'total', 'count', 'avg_cmp', 'r']",def avg_cmp bst total count search bst none return bst none count search total search bst left none count avg_cmp node l_child bst right none count avg_cmp node r_child els return total count avg_cmp r,search,CS,CS152
243430,"depth = 
def depth(bst):
    global depth
    if bst == None:
        return 
    else: 
        r = depth(bst.right)
        l = depth(bst.left)
        return max(r,l) + 

I pasted the one for finding depth because I can't do the avg_cmp one
I think of how to calculate the depth of each node, compile into a list
But I cant
As my depth code count reversely from the bottom to top -> it cannot count from top to bottom to support my the avg_cmp function :(",#searchtrees,2,11230,"['depth', 'def', 'depth', 'bst', 'global', 'depth', 'if', 'bst', 'None', 'return', 'else', 'r', 'depth', 'bst', 'right', 'l', 'depth', 'bst', 'left', 'return', 'max', 'r', 'l', 'I', 'pasted', 'the', 'one', 'for', 'finding', 'depth', 'because', 'I', ""can't"", 'do', 'the', 'avg_cmp', 'one', 'I', 'think', 'of', 'how', 'to', 'calculate', 'the', 'depth', 'of', 'each', 'node', 'compile', 'into', 'a', 'list', 'But', 'I', 'cant', 'As', 'my', 'depth', 'code', 'count', 'reversely', 'from', 'the', 'bottom', 'to', 'top', 'it', 'cannot', 'count', 'from', 'top', 'to', 'bottom', 'to', 'support', 'my', 'the', 'avg_cmp', 'function']","['depth', 'def', 'depth', 'bst', 'global', 'depth', 'if', 'bst', 'none', 'return', 'els', 'r', 'depth', 'bst', 'right', 'l', 'depth', 'bst', 'left', 'return', 'max', 'r', 'l', 'i', 'past', 'the', 'one', 'for', 'find', 'depth', 'becaus', 'i', ""can't"", 'do', 'the', 'avg_cmp', 'one', 'i', 'think', 'of', 'how', 'to', 'calcul', 'the', 'depth', 'of', 'each', 'node', 'compil', 'into', 'a', 'list', 'but', 'i', 'cant', 'as', 'my', 'depth', 'code', 'count', 'revers', 'from', 'the', 'bottom', 'to', 'top', 'it', 'cannot', 'count', 'from', 'top', 'to', 'bottom', 'to', 'support', 'my', 'the', 'avg_cmp', 'function']","['depth', 'def', 'depth', 'bst', 'global', 'depth', 'bst', 'none', 'return', 'els', 'r', 'depth', 'bst', 'right', 'l', 'depth', 'bst', 'left', 'return', 'max', 'r', 'l', 'past', 'one', 'find', 'depth', 'becaus', ""can't"", 'avg_cmp', 'one', 'think', 'calcul', 'depth', 'node', 'compil', 'list', 'cant', 'depth', 'code', 'count', 'revers', 'bottom', 'top', 'cannot', 'count', 'top', 'bottom', 'support', 'avg_cmp', 'function']",depth def depth bst global depth bst none return els r depth bst right l depth bst left return max r l past one find depth becaus can't avg_cmp one think calcul depth node compil list cant depth code count revers bottom top cannot count top bottom support avg_cmp function,search,CS,CS152
243430,"def search(root, value):
    global num_comparisons
    
     with data = value, returns the node if found, None otherwise""""""
    if root == None or value == root.data:
         
        num_comparisons +=
        return  num_comparisons
    
    if value < root.data:
        num_comparisons +=
        return search(root.l_child, value)
    else:
        num_comparisons +=
        
        return search(root.r_child, value)
for x in range(): 
    if not bst: 
        bst = Node(x)
    else: 
        insert(bst, Node(x))
    list_insert(lst, Node
count = 
for i in range():
    #inorde",#searchtrees,4,11230,"['def', 'search', 'root', 'value', 'global', 'num_comparisons', 'with', 'data', 'value', 'returns', 'the', 'node', 'if', 'found', 'None', 'otherwise', 'if', 'root', 'None', 'or', 'value', 'root', 'data', 'num_comparisons', 'return', 'num_comparisons', 'if', 'value', 'root', 'data', 'num_comparisons', 'return', 'search', 'root', 'l_child', 'value', 'else', 'num_comparisons', 'return', 'search', 'root', 'r_child', 'value', 'for', 'x', 'in', 'range', 'if', 'not', 'bst', 'bst', 'Node', 'x', 'else', 'insert', 'bst', 'Node', 'x', 'list_insert', 'lst', 'Node', 'count', 'for', 'i', 'in', 'range', 'inorde']","['def', 'search', 'root', 'valu', 'global', 'num_comparison', 'with', 'data', 'valu', 'return', 'the', 'node', 'if', 'found', 'none', 'otherwis', 'if', 'root', 'none', 'or', 'valu', 'root', 'data', 'num_comparison', 'return', 'num_comparison', 'if', 'valu', 'root', 'data', 'num_comparison', 'return', 'search', 'root', 'l_child', 'valu', 'els', 'num_comparison', 'return', 'search', 'root', 'r_child', 'valu', 'for', 'x', 'in', 'rang', 'if', 'not', 'bst', 'bst', 'node', 'x', 'els', 'insert', 'bst', 'node', 'x', 'list_insert', 'lst', 'node', 'count', 'for', 'i', 'in', 'rang', 'inord']","['def', 'search', 'root', 'valu', 'global', 'num_comparison', 'data', 'valu', 'return', 'node', 'found', 'none', 'otherwis', 'root', 'none', 'valu', 'root', 'data', 'num_comparison', 'return', 'num_comparison', 'valu', 'root', 'data', 'num_comparison', 'return', 'search', 'root', 'l_child', 'valu', 'els', 'num_comparison', 'return', 'search', 'root', 'r_child', 'valu', 'x', 'rang', 'bst', 'bst', 'node', 'x', 'els', 'insert', 'bst', 'node', 'x', 'list_insert', 'lst', 'node', 'count', 'rang', 'inord']",def search root valu global num_comparison data valu return node found none otherwis root none valu root data num_comparison return num_comparison valu root data num_comparison return search root l_child valu els num_comparison return search root r_child valu x rang bst bst node x els insert bst node x list_insert lst node count rang inord,search,CS,CS152
303087,"Search: Worst case for hash table is O(n) due to ex. collisions. For RB-trees, is O(lg n) as we get less and less values per height for finding a given value.
Insertion: Worst case for hash table is O(n) due to list in collided spot. For RB-trees, is O(lg n), as we just get less and less values per height where potential inserts are possible.
Deletion: Worst case for hash table is O(n) due to traversal in ex. multiple values in the same spot (n-values max). For RB-trees, is O(lg n), for similar reasons as above.
Extra ==> Space complexity: Both are O(n) for worst.",#searchtrees,4,14316,"['Search', 'Worst', 'case', 'for', 'hash', 'table', 'is', 'O', 'n', 'due', 'to', 'ex', 'collisions', 'For', 'RB', 'trees', 'is', 'O', 'lg', 'n', 'as', 'we', 'get', 'less', 'and', 'less', 'values', 'per', 'height', 'for', 'finding', 'a', 'given', 'value', 'Insertion', 'Worst', 'case', 'for', 'hash', 'table', 'is', 'O', 'n', 'due', 'to', 'list', 'in', 'collided', 'spot', 'For', 'RB', 'trees', 'is', 'O', 'lg', 'n', 'as', 'we', 'just', 'get', 'less', 'and', 'less', 'values', 'per', 'height', 'where', 'potential', 'inserts', 'are', 'possible', 'Deletion', 'Worst', 'case', 'for', 'hash', 'table', 'is', 'O', 'n', 'due', 'to', 'traversal', 'in', 'ex', 'multiple', 'values', 'in', 'the', 'same', 'spot', 'n', 'values', 'max', 'For', 'RB', 'trees', 'is', 'O', 'lg', 'n', 'for', 'similar', 'reasons', 'as', 'above', 'Extra', 'Space', 'complexity', 'Both', 'are', 'O', 'n', 'for', 'worst']","['search', 'worst', 'case', 'for', 'hash', 'tabl', 'is', 'o', 'n', 'due', 'to', 'ex', 'collis', 'for', 'rb', 'tree', 'is', 'o', 'lg', 'n', 'as', 'we', 'get', 'less', 'and', 'less', 'valu', 'per', 'height', 'for', 'find', 'a', 'given', 'valu', 'insert', 'worst', 'case', 'for', 'hash', 'tabl', 'is', 'o', 'n', 'due', 'to', 'list', 'in', 'collid', 'spot', 'for', 'rb', 'tree', 'is', 'o', 'lg', 'n', 'as', 'we', 'just', 'get', 'less', 'and', 'less', 'valu', 'per', 'height', 'where', 'potenti', 'insert', 'are', 'possibl', 'delet', 'worst', 'case', 'for', 'hash', 'tabl', 'is', 'o', 'n', 'due', 'to', 'travers', 'in', 'ex', 'multipl', 'valu', 'in', 'the', 'same', 'spot', 'n', 'valu', 'max', 'for', 'rb', 'tree', 'is', 'o', 'lg', 'n', 'for', 'similar', 'reason', 'as', 'abov', 'extra', 'space', 'complex', 'both', 'are', 'o', 'n', 'for', 'worst']","['search', 'worst', 'case', 'hash', 'tabl', 'n', 'due', 'ex', 'collis', 'rb', 'tree', 'lg', 'n', 'get', 'less', 'less', 'valu', 'per', 'height', 'find', 'given', 'valu', 'insert', 'worst', 'case', 'hash', 'tabl', 'n', 'due', 'list', 'collid', 'spot', 'rb', 'tree', 'lg', 'n', 'get', 'less', 'less', 'valu', 'per', 'height', 'potenti', 'insert', 'possibl', 'delet', 'worst', 'case', 'hash', 'tabl', 'n', 'due', 'travers', 'ex', 'multipl', 'valu', 'spot', 'n', 'valu', 'max', 'rb', 'tree', 'lg', 'n', 'similar', 'reason', 'abov', 'extra', 'space', 'complex', 'n', 'worst']",search worst case hash tabl n due ex collis rb tree lg n get less less valu per height find given valu insert worst case hash tabl n due list collid spot rb tree lg n get less less valu per height potenti insert possibl delet worst case hash tabl n due travers ex multipl valu spot n valu max rb tree lg n similar reason abov extra space complex n worst,search,CS,CS152
109481,"def entails(KB, q):
	while agenda:
		p = agenda.pop()
		if p.symbol == q.symbol:
			return True
		if p.value == False:
			p.value = True
			for c in KB:
				if c.premise == p:
					c.premise_count = c.premise_count - 
					if c.premise_count == :
						agenda.append(c.conclusion)
	return False",#aicoding,3,4171,"['def', 'entails', 'KB', 'q', 'while', 'agenda', 'p', 'agenda', 'pop', 'if', 'p', 'symbol', 'q', 'symbol', 'return', 'True', 'if', 'p', 'value', 'False', 'p', 'value', 'True', 'for', 'c', 'in', 'KB', 'if', 'c', 'premise', 'p', 'c', 'premise_count', 'c', 'premise_count', 'if', 'c', 'premise_count', 'agenda', 'append', 'c', 'conclusion', 'return', 'False']","['def', 'entail', 'kb', 'q', 'while', 'agenda', 'p', 'agenda', 'pop', 'if', 'p', 'symbol', 'q', 'symbol', 'return', 'true', 'if', 'p', 'valu', 'fals', 'p', 'valu', 'true', 'for', 'c', 'in', 'kb', 'if', 'c', 'premis', 'p', 'c', 'premise_count', 'c', 'premise_count', 'if', 'c', 'premise_count', 'agenda', 'append', 'c', 'conclus', 'return', 'fals']","['def', 'entail', 'kb', 'q', 'agenda', 'p', 'agenda', 'pop', 'p', 'symbol', 'q', 'symbol', 'return', 'true', 'p', 'valu', 'fals', 'p', 'valu', 'true', 'c', 'kb', 'c', 'premis', 'p', 'c', 'premise_count', 'c', 'premise_count', 'c', 'premise_count', 'agenda', 'append', 'c', 'conclus', 'return', 'fals']",def entail kb q agenda p agenda pop p symbol q symbol return true p valu fals p valu true c kb c premis p c premise_count c premise_count c premise_count agenda append c conclus return fals,aicoding,CS,CS152
109481,"def plfcEntails(KB, q):

    count = dict([(c, len(conjuncts(c.args[]))) for c in KB.clauses if c.op == '>>'])
    inferred = DefaultDict(False)
    agenda = [s for s in KB.clauses if is_prop_symbol(s.op)]
    if q in agenda: return True
    while agenda:
        p = agenda.pop()
        if not inferred[p]:
            inferred[p] = True
            for c in KB.clausesPremise(p):
                count[c] -= 
                if count[c] == :
                    if c.args[] == q: return True
                    agenda.append(c.args[])
    return false",#aicoding,3,4171,"['def', 'plfcEntails', 'KB', 'q', 'count', 'dict', 'c', 'len', 'conjuncts', 'c', 'args', 'for', 'c', 'in', 'KB', 'clauses', 'if', 'c', 'op', ""'"", ""'"", 'inferred', 'DefaultDict', 'False', 'agenda', 's', 'for', 's', 'in', 'KB', 'clauses', 'if', 'is_prop_symbol', 's', 'op', 'if', 'q', 'in', 'agenda', 'return', 'True', 'while', 'agenda', 'p', 'agenda', 'pop', 'if', 'not', 'inferred', 'p', 'inferred', 'p', 'True', 'for', 'c', 'in', 'KB', 'clausesPremise', 'p', 'count', 'c', 'if', 'count', 'c', 'if', 'c', 'args', 'q', 'return', 'True', 'agenda', 'append', 'c', 'args', 'return', 'false']","['def', 'plfcentail', 'kb', 'q', 'count', 'dict', 'c', 'len', 'conjunct', 'c', 'arg', 'for', 'c', 'in', 'kb', 'claus', 'if', 'c', 'op', ""'"", ""'"", 'infer', 'defaultdict', 'fals', 'agenda', 's', 'for', 's', 'in', 'kb', 'claus', 'if', 'is_prop_symbol', 's', 'op', 'if', 'q', 'in', 'agenda', 'return', 'true', 'while', 'agenda', 'p', 'agenda', 'pop', 'if', 'not', 'infer', 'p', 'infer', 'p', 'true', 'for', 'c', 'in', 'kb', 'clausespremis', 'p', 'count', 'c', 'if', 'count', 'c', 'if', 'c', 'arg', 'q', 'return', 'true', 'agenda', 'append', 'c', 'arg', 'return', 'fals']","['def', 'plfcentail', 'kb', 'q', 'count', 'dict', 'c', 'len', 'conjunct', 'c', 'arg', 'c', 'kb', 'claus', 'c', 'op', ""'"", ""'"", 'infer', 'defaultdict', 'fals', 'agenda', 'kb', 'claus', 'is_prop_symbol', 'op', 'q', 'agenda', 'return', 'true', 'agenda', 'p', 'agenda', 'pop', 'infer', 'p', 'infer', 'p', 'true', 'c', 'kb', 'clausespremis', 'p', 'count', 'c', 'count', 'c', 'c', 'arg', 'q', 'return', 'true', 'agenda', 'append', 'c', 'arg', 'return', 'fals']",def plfcentail kb q count dict c len conjunct c arg c kb claus c op ' ' infer defaultdict fals agenda kb claus is_prop_symbol op q agenda return true agenda p agenda pop infer p infer p true c kb clausespremis p count c count c c arg q return true agenda append c arg return fals,aicoding,CS,CS152
109481,"# Didn't get mine working, but it's like this:
def PL_FC_entials(KB,q):
    count = []
    inferred = []
    agenda = [] # will be a heapqueue
    
    while agenda:
        p = heapq.heappop(agenda)
        # if p = q then return true 
        if p = q: return True
        # if inferred[p] = false then
        if inferred[p] == False:
            # inferred[p]←true
            inferred[p] = True
            # for each clause c in KB where p is in c.PREMISE 
            for c in KB:
                if p is in c.PREMISE:
                    count[c] -=  # decrement count[
    return false",#aicoding,3,4171,"[""Didn't"", 'get', 'mine', 'working', 'but', ""it's"", 'like', 'this', 'def', 'PL_FC_entials', 'KB', 'q', 'count', 'inferred', 'agenda', 'will', 'be', 'a', 'heapqueue', 'while', 'agenda', 'p', 'heapq', 'heappop', 'agenda', 'if', 'p', 'q', 'then', 'return', 'true', 'if', 'p', 'q', 'return', 'True', 'if', 'inferred', 'p', 'false', 'then', 'if', 'inferred', 'p', 'False', 'inferred', 'p', 'true', 'inferred', 'p', 'True', 'for', 'each', 'clause', 'c', 'in', 'KB', 'where', 'p', 'is', 'in', 'c', 'PREMISE', 'for', 'c', 'in', 'KB', 'if', 'p', 'is', 'in', 'c', 'PREMISE', 'count', 'c', 'decrement', 'count', 'return', 'false']","[""didn't"", 'get', 'mine', 'work', 'but', 'it', 'like', 'this', 'def', 'pl_fc_ential', 'kb', 'q', 'count', 'infer', 'agenda', 'will', 'be', 'a', 'heapqueu', 'while', 'agenda', 'p', 'heapq', 'heappop', 'agenda', 'if', 'p', 'q', 'then', 'return', 'true', 'if', 'p', 'q', 'return', 'true', 'if', 'infer', 'p', 'fals', 'then', 'if', 'infer', 'p', 'fals', 'infer', 'p', 'true', 'infer', 'p', 'true', 'for', 'each', 'claus', 'c', 'in', 'kb', 'where', 'p', 'is', 'in', 'c', 'premis', 'for', 'c', 'in', 'kb', 'if', 'p', 'is', 'in', 'c', 'premis', 'count', 'c', 'decrement', 'count', 'return', 'fals']","['get', 'mine', 'work', 'like', 'def', 'pl_fc_ential', 'kb', 'q', 'count', 'infer', 'agenda', 'heapqueu', 'agenda', 'p', 'heapq', 'heappop', 'agenda', 'p', 'q', 'return', 'true', 'p', 'q', 'return', 'true', 'infer', 'p', 'fals', 'infer', 'p', 'fals', 'infer', 'p', 'true', 'infer', 'p', 'true', 'claus', 'c', 'kb', 'p', 'c', 'premis', 'c', 'kb', 'p', 'c', 'premis', 'count', 'c', 'decrement', 'count', 'return', 'fals']",get mine work like def pl_fc_ential kb q count infer agenda heapqueu agenda p heapq heappop agenda p q return true p q return true infer p fals infer p fals infer p true infer p true claus c kb p c premis c kb p c premis count c decrement count return fals,aicoding,CS,CS152
109481,"def entails(kb,q):
    count[c] = len(kb.premise)
    inferred = [False] * len(kb.premise)
    agenda = Queue()
    
    while not agenda.empty():
        p = agenda.get()
        if p.name == q.name: 
            return (True)
        if inferred[p] == False:
            inferred[p] = True
            for c in kb: 
                if p in c.premise:
                    count[c] -=  
                    if count[c] == : 
                        agenda.put(c.conclusion)
    
    return False 

I didn't manage to get through this because I have a hard time to define the class...",#aicoding,3,4171,"['def', 'entails', 'kb', 'q', 'count', 'c', 'len', 'kb', 'premise', 'inferred', 'False', 'len', 'kb', 'premise', 'agenda', 'Queue', 'while', 'not', 'agenda', 'empty', 'p', 'agenda', 'get', 'if', 'p', 'name', 'q', 'name', 'return', 'True', 'if', 'inferred', 'p', 'False', 'inferred', 'p', 'True', 'for', 'c', 'in', 'kb', 'if', 'p', 'in', 'c', 'premise', 'count', 'c', 'if', 'count', 'c', 'agenda', 'put', 'c', 'conclusion', 'return', 'False', 'I', ""didn't"", 'manage', 'to', 'get', 'through', 'this', 'because', 'I', 'have', 'a', 'hard', 'time', 'to', 'define', 'the', 'class']","['def', 'entail', 'kb', 'q', 'count', 'c', 'len', 'kb', 'premis', 'infer', 'fals', 'len', 'kb', 'premis', 'agenda', 'queue', 'while', 'not', 'agenda', 'empti', 'p', 'agenda', 'get', 'if', 'p', 'name', 'q', 'name', 'return', 'true', 'if', 'infer', 'p', 'fals', 'infer', 'p', 'true', 'for', 'c', 'in', 'kb', 'if', 'p', 'in', 'c', 'premis', 'count', 'c', 'if', 'count', 'c', 'agenda', 'put', 'c', 'conclus', 'return', 'fals', 'i', ""didn't"", 'manag', 'to', 'get', 'through', 'this', 'becaus', 'i', 'have', 'a', 'hard', 'time', 'to', 'defin', 'the', 'class']","['def', 'entail', 'kb', 'q', 'count', 'c', 'len', 'kb', 'premis', 'infer', 'fals', 'len', 'kb', 'premis', 'agenda', 'queue', 'agenda', 'empti', 'p', 'agenda', 'get', 'p', 'name', 'q', 'name', 'return', 'true', 'infer', 'p', 'fals', 'infer', 'p', 'true', 'c', 'kb', 'p', 'c', 'premis', 'count', 'c', 'count', 'c', 'agenda', 'put', 'c', 'conclus', 'return', 'fals', 'manag', 'get', 'becaus', 'hard', 'time', 'defin', 'class']",def entail kb q count c len kb premis infer fals len kb premis agenda queue agenda empti p agenda get p name q name return true infer p fals infer p true c kb p c premis count c count c agenda put c conclus return fals manag get becaus hard time defin class,aicoding,CS,CS152
109481,"def PL_FC_Entails(KB, q):
    """"""Take a list of definite clauses and a query""""""
    count = [len(c.body) for c in KB]
    inferred = {symb: False for symb in 
                set([sym for c in KB for sym in c.body] 
                    + [c.head for c in KB])}
    agenda = [c.head for c in KB if len(c.body) == ]
    
    while agenda:
        p = agenda.pop()
        if p == q:
            return True
        if not inferred[p]:
            inferred[p] = True
            for n, clause in enumerate(KB):
                if p in clause.body:
                    count[n] -= ",#aicoding,3,4171,"['def', 'PL_FC_Entails', 'KB', 'q', 'Take', 'a', 'list', 'of', 'definite', 'clauses', 'and', 'a', 'query', 'count', 'len', 'c', 'body', 'for', 'c', 'in', 'KB', 'inferred', 'symb', 'False', 'for', 'symb', 'in', 'set', 'sym', 'for', 'c', 'in', 'KB', 'for', 'sym', 'in', 'c', 'body', 'c', 'head', 'for', 'c', 'in', 'KB', 'agenda', 'c', 'head', 'for', 'c', 'in', 'KB', 'if', 'len', 'c', 'body', 'while', 'agenda', 'p', 'agenda', 'pop', 'if', 'p', 'q', 'return', 'True', 'if', 'not', 'inferred', 'p', 'inferred', 'p', 'True', 'for', 'n', 'clause', 'in', 'enumerate', 'KB', 'if', 'p', 'in', 'clause', 'body', 'count', 'n']","['def', 'pl_fc_entail', 'kb', 'q', 'take', 'a', 'list', 'of', 'definit', 'claus', 'and', 'a', 'queri', 'count', 'len', 'c', 'bodi', 'for', 'c', 'in', 'kb', 'infer', 'symb', 'fals', 'for', 'symb', 'in', 'set', 'sym', 'for', 'c', 'in', 'kb', 'for', 'sym', 'in', 'c', 'bodi', 'c', 'head', 'for', 'c', 'in', 'kb', 'agenda', 'c', 'head', 'for', 'c', 'in', 'kb', 'if', 'len', 'c', 'bodi', 'while', 'agenda', 'p', 'agenda', 'pop', 'if', 'p', 'q', 'return', 'true', 'if', 'not', 'infer', 'p', 'infer', 'p', 'true', 'for', 'n', 'claus', 'in', 'enumer', 'kb', 'if', 'p', 'in', 'claus', 'bodi', 'count', 'n']","['def', 'pl_fc_entail', 'kb', 'q', 'take', 'list', 'definit', 'claus', 'queri', 'count', 'len', 'c', 'bodi', 'c', 'kb', 'infer', 'symb', 'fals', 'symb', 'set', 'sym', 'c', 'kb', 'sym', 'c', 'bodi', 'c', 'head', 'c', 'kb', 'agenda', 'c', 'head', 'c', 'kb', 'len', 'c', 'bodi', 'agenda', 'p', 'agenda', 'pop', 'p', 'q', 'return', 'true', 'infer', 'p', 'infer', 'p', 'true', 'n', 'claus', 'enumer', 'kb', 'p', 'claus', 'bodi', 'count', 'n']",def pl_fc_entail kb q take list definit claus queri count len c bodi c kb infer symb fals symb set sym c kb sym c bodi c head c kb agenda c head c kb len c bodi agenda p agenda pop p q return true infer p infer p true n claus enumer kb p claus bodi count n,aicoding,CS,CS152
109481,"count_a=[] #list of clauses
    count_b=[] #corresponding list of number of symbols in count_a's premises
    inferred_a = [] #list of symbols
    inferred_b = [] #corresponding list of Booleans where all are initially false for all symbols
    agenda = Queue() #a queue of symbols, initially symbols known to be true in KB
    while not agenda.empty():
        p = pop.agenda
        if p == q: return true
        if inferred[p] == False:
            inferred[p] == True
            for c in kb:
                if p in c.premise:
                count[c]-=
                if count[c]=:",#aicoding,3,4171,"['count_a', 'list', 'of', 'clauses', 'count_b', 'corresponding', 'list', 'of', 'number', 'of', 'symbols', 'in', ""count_a's"", 'premises', 'inferred_a', 'list', 'of', 'symbols', 'inferred_b', 'corresponding', 'list', 'of', 'Booleans', 'where', 'all', 'are', 'initially', 'false', 'for', 'all', 'symbols', 'agenda', 'Queue', 'a', 'queue', 'of', 'symbols', 'initially', 'symbols', 'known', 'to', 'be', 'true', 'in', 'KB', 'while', 'not', 'agenda', 'empty', 'p', 'pop', 'agenda', 'if', 'p', 'q', 'return', 'true', 'if', 'inferred', 'p', 'False', 'inferred', 'p', 'True', 'for', 'c', 'in', 'kb', 'if', 'p', 'in', 'c', 'premise', 'count', 'c', 'if', 'count', 'c']","['count_a', 'list', 'of', 'claus', 'count_b', 'correspond', 'list', 'of', 'number', 'of', 'symbol', 'in', 'count_a', 'premis', 'inferred_a', 'list', 'of', 'symbol', 'inferred_b', 'correspond', 'list', 'of', 'boolean', 'where', 'all', 'are', 'initi', 'fals', 'for', 'all', 'symbol', 'agenda', 'queue', 'a', 'queue', 'of', 'symbol', 'initi', 'symbol', 'known', 'to', 'be', 'true', 'in', 'kb', 'while', 'not', 'agenda', 'empti', 'p', 'pop', 'agenda', 'if', 'p', 'q', 'return', 'true', 'if', 'infer', 'p', 'fals', 'infer', 'p', 'true', 'for', 'c', 'in', 'kb', 'if', 'p', 'in', 'c', 'premis', 'count', 'c', 'if', 'count', 'c']","['count_a', 'list', 'claus', 'count_b', 'correspond', 'list', 'number', 'symbol', 'count_a', 'premis', 'inferred_a', 'list', 'symbol', 'inferred_b', 'correspond', 'list', 'boolean', 'initi', 'fals', 'symbol', 'agenda', 'queue', 'queue', 'symbol', 'initi', 'symbol', 'known', 'true', 'kb', 'agenda', 'empti', 'p', 'pop', 'agenda', 'p', 'q', 'return', 'true', 'infer', 'p', 'fals', 'infer', 'p', 'true', 'c', 'kb', 'p', 'c', 'premis', 'count', 'c', 'count', 'c']",count_a list claus count_b correspond list number symbol count_a premis inferred_a list symbol inferred_b correspond list boolean initi fals symbol agenda queue queue symbol initi symbol known true kb agenda empti p pop agenda p q return true infer p fals infer p true c kb p c premis count c count c,aicoding,CS,CS152
109481,"def forward_chaining(KB,q):
    all_symbols = get_all_symbols(KB)
    count = {each:len(each.body) for each in KB}
    inferred = {_:False for _ in all_symbols}
    agenda = get_facts(KB)
    
    while len(agenda)>:
        p = agenda.pop()
        if p == q:
            return True
        if inferred[p] == False:
            inferred[p] = True
            for each in KB:
                if p in each.body:
                    count[each] -= 
                    if count[each] == :
                        agenda.append(each.head)
    return False",#aicoding,3,4171,"['def', 'forward_chaining', 'KB', 'q', 'all_symbols', 'get_all_symbols', 'KB', 'count', 'each', 'len', 'each', 'body', 'for', 'each', 'in', 'KB', 'inferred', '_', 'False', 'for', '_', 'in', 'all_symbols', 'agenda', 'get_facts', 'KB', 'while', 'len', 'agenda', 'p', 'agenda', 'pop', 'if', 'p', 'q', 'return', 'True', 'if', 'inferred', 'p', 'False', 'inferred', 'p', 'True', 'for', 'each', 'in', 'KB', 'if', 'p', 'in', 'each', 'body', 'count', 'each', 'if', 'count', 'each', 'agenda', 'append', 'each', 'head', 'return', 'False']","['def', 'forward_chain', 'kb', 'q', 'all_symbol', 'get_all_symbol', 'kb', 'count', 'each', 'len', 'each', 'bodi', 'for', 'each', 'in', 'kb', 'infer', '_', 'fals', 'for', '_', 'in', 'all_symbol', 'agenda', 'get_fact', 'kb', 'while', 'len', 'agenda', 'p', 'agenda', 'pop', 'if', 'p', 'q', 'return', 'true', 'if', 'infer', 'p', 'fals', 'infer', 'p', 'true', 'for', 'each', 'in', 'kb', 'if', 'p', 'in', 'each', 'bodi', 'count', 'each', 'if', 'count', 'each', 'agenda', 'append', 'each', 'head', 'return', 'fals']","['def', 'forward_chain', 'kb', 'q', 'all_symbol', 'get_all_symbol', 'kb', 'count', 'len', 'bodi', 'kb', 'infer', '_', 'fals', '_', 'all_symbol', 'agenda', 'get_fact', 'kb', 'len', 'agenda', 'p', 'agenda', 'pop', 'p', 'q', 'return', 'true', 'infer', 'p', 'fals', 'infer', 'p', 'true', 'kb', 'p', 'bodi', 'count', 'count', 'agenda', 'append', 'head', 'return', 'fals']",def forward_chain kb q all_symbol get_all_symbol kb count len bodi kb infer _ fals _ all_symbol agenda get_fact kb len agenda p agenda pop p q return true infer p fals infer p true kb p bodi count count agenda append head return fals,aicoding,CS,CS152
109481,"def forward_chaining(knowledge_base, query):
    unprocessed_truths = deque(literal
                               for clause in knowledge_base
                               for literal in clause.premise)
    inferred = []
    unknown_premises = {c: len(c.premise) for c in knowledge_base}

    while unprocessed_truths:
        item = unprocessed_truths.popleft()

        if item == query:
            return True

        if item not in inferred:
            inferred.append(item)
            kb_clauses_with_item = list(filter(lambda c: item in c.premise,",#aicoding,3,4171,"['def', 'forward_chaining', 'knowledge_base', 'query', 'unprocessed_truths', 'deque', 'literal', 'for', 'clause', 'in', 'knowledge_base', 'for', 'literal', 'in', 'clause', 'premise', 'inferred', 'unknown_premises', 'c', 'len', 'c', 'premise', 'for', 'c', 'in', 'knowledge_base', 'while', 'unprocessed_truths', 'item', 'unprocessed_truths', 'popleft', 'if', 'item', 'query', 'return', 'True', 'if', 'item', 'not', 'in', 'inferred', 'inferred', 'append', 'item', 'kb_clauses_with_item', 'list', 'filter', 'lambda', 'c', 'item', 'in', 'c', 'premise']","['def', 'forward_chain', 'knowledge_bas', 'queri', 'unprocessed_truth', 'dequ', 'liter', 'for', 'claus', 'in', 'knowledge_bas', 'for', 'liter', 'in', 'claus', 'premis', 'infer', 'unknown_premis', 'c', 'len', 'c', 'premis', 'for', 'c', 'in', 'knowledge_bas', 'while', 'unprocessed_truth', 'item', 'unprocessed_truth', 'popleft', 'if', 'item', 'queri', 'return', 'true', 'if', 'item', 'not', 'in', 'infer', 'infer', 'append', 'item', 'kb_clauses_with_item', 'list', 'filter', 'lambda', 'c', 'item', 'in', 'c', 'premis']","['def', 'forward_chain', 'knowledge_bas', 'queri', 'unprocessed_truth', 'dequ', 'liter', 'claus', 'knowledge_bas', 'liter', 'claus', 'premis', 'infer', 'unknown_premis', 'c', 'len', 'c', 'premis', 'c', 'knowledge_bas', 'unprocessed_truth', 'item', 'unprocessed_truth', 'popleft', 'item', 'queri', 'return', 'true', 'item', 'infer', 'infer', 'append', 'item', 'kb_clauses_with_item', 'list', 'filter', 'lambda', 'c', 'item', 'c', 'premis']",def forward_chain knowledge_bas queri unprocessed_truth dequ liter claus knowledge_bas liter claus premis infer unknown_premis c len c premis c knowledge_bas unprocessed_truth item unprocessed_truth popleft item queri return true item infer infer append item kb_clauses_with_item list filter lambda c item c premis,aicoding,CS,CS152
109481,"Professor, this is not finished and I would really like to discuss this at some point in class or office hours...

def fc_entails(agenda, q):
    
    count = {}
    inferred = {}
    
    while len(agenda) > :
        
        p = agenda.pop()
        if p == q:
            return True
        if inferred[p] == false:
            inferred[p] = True",#aicoding,3,4171,"['Professor', 'this', 'is', 'not', 'finished', 'and', 'I', 'would', 'really', 'like', 'to', 'discuss', 'this', 'at', 'some', 'point', 'in', 'class', 'or', 'office', 'hours', 'def', 'fc_entails', 'agenda', 'q', 'count', 'inferred', 'while', 'len', 'agenda', 'p', 'agenda', 'pop', 'if', 'p', 'q', 'return', 'True', 'if', 'inferred', 'p', 'false', 'inferred', 'p', 'True']","['professor', 'this', 'is', 'not', 'finish', 'and', 'i', 'would', 'realli', 'like', 'to', 'discuss', 'this', 'at', 'some', 'point', 'in', 'class', 'or', 'offic', 'hour', 'def', 'fc_entail', 'agenda', 'q', 'count', 'infer', 'while', 'len', 'agenda', 'p', 'agenda', 'pop', 'if', 'p', 'q', 'return', 'true', 'if', 'infer', 'p', 'fals', 'infer', 'p', 'true']","['professor', 'finish', 'realli', 'like', 'discuss', 'point', 'class', 'offic', 'hour', 'def', 'fc_entail', 'agenda', 'q', 'count', 'infer', 'len', 'agenda', 'p', 'agenda', 'pop', 'p', 'q', 'return', 'true', 'infer', 'p', 'fals', 'infer', 'p', 'true']",professor finish realli like discuss point class offic hour def fc_entail agenda q count infer len agenda p agenda pop p q return true infer p fals infer p true,aicoding,CS,CS152
207273,"state = 

goal = 

# Frontier
from collections import deque
frontier = deque([state])

# Step counter
steps = 

while frontier:
    steps += 
    if frontier[-] == goal:
        break
    
    steps += 
    frontier.append(*state)
    if frontier[-] == goal:
        break
    
    frontier.append(*state + )
    
    state = frontier[frontier.index(state)+]

print(frontier)
frontier_size = len(frontier)-goal
    

print(""Breadth-first search terminated after %d steps\n"" % steps)
print(""Size of frontier at termination is %d"" % frontier_size)",#aicoding,3,9799,"['state', 'goal', 'Frontier', 'from', 'collections', 'import', 'deque', 'frontier', 'deque', 'state', 'Step', 'counter', 'steps', 'while', 'frontier', 'steps', 'if', 'frontier', 'goal', 'break', 'steps', 'frontier', 'append', 'state', 'if', 'frontier', 'goal', 'break', 'frontier', 'append', 'state', 'state', 'frontier', 'frontier', 'index', 'state', 'print', 'frontier', 'frontier_size', 'len', 'frontier', 'goal', 'print', 'Breadth', 'first', 'search', 'terminated', 'after', 'd', 'steps', 'n', 'steps', 'print', 'Size', 'of', 'frontier', 'at', 'termination', 'is', 'd', 'frontier_size']","['state', 'goal', 'frontier', 'from', 'collect', 'import', 'dequ', 'frontier', 'dequ', 'state', 'step', 'counter', 'step', 'while', 'frontier', 'step', 'if', 'frontier', 'goal', 'break', 'step', 'frontier', 'append', 'state', 'if', 'frontier', 'goal', 'break', 'frontier', 'append', 'state', 'state', 'frontier', 'frontier', 'index', 'state', 'print', 'frontier', 'frontier_s', 'len', 'frontier', 'goal', 'print', 'breadth', 'first', 'search', 'termin', 'after', 'd', 'step', 'n', 'step', 'print', 'size', 'of', 'frontier', 'at', 'termin', 'is', 'd', 'frontier_s']","['state', 'goal', 'frontier', 'collect', 'import', 'dequ', 'frontier', 'dequ', 'state', 'step', 'counter', 'step', 'frontier', 'step', 'frontier', 'goal', 'break', 'step', 'frontier', 'append', 'state', 'frontier', 'goal', 'break', 'frontier', 'append', 'state', 'state', 'frontier', 'frontier', 'index', 'state', 'print', 'frontier', 'frontier_s', 'len', 'frontier', 'goal', 'print', 'breadth', 'first', 'search', 'termin', 'step', 'n', 'step', 'print', 'size', 'frontier', 'termin', 'frontier_s']",state goal frontier collect import dequ frontier dequ state step counter step frontier step frontier goal break step frontier append state frontier goal break frontier append state state frontier frontier index state print frontier frontier_s len frontier goal print breadth first search termin step n step print size frontier termin frontier_s,aicoding,CS,CS152
207273,"# [INSERT CODE HERE] Initial state
state = None

# [INSERT CODE HERE] Define the goal here
goal = None

# Frontier
from collections import deque
frontier = deque([state])
explored = []
# Step counter
steps = 

# Breadth-first search algorithm (continue while there are nodes in the frontier)
stop = False
while frontier:
    top = frontier.pop()
    explored.append(top)
    for child in top.children:
        if child is not in explored:
            if child == goal:
                stop = True
            frontier.append(child)",#aicoding,2,9799,"['INSERT', 'CODE', 'HERE', 'Initial', 'state', 'state', 'None', 'INSERT', 'CODE', 'HERE', 'Define', 'the', 'goal', 'here', 'goal', 'None', 'Frontier', 'from', 'collections', 'import', 'deque', 'frontier', 'deque', 'state', 'explored', 'Step', 'counter', 'steps', 'Breadth', 'first', 'search', 'algorithm', 'continue', 'while', 'there', 'are', 'nodes', 'in', 'the', 'frontier', 'stop', 'False', 'while', 'frontier', 'top', 'frontier', 'pop', 'explored', 'append', 'top', 'for', 'child', 'in', 'top', 'children', 'if', 'child', 'is', 'not', 'in', 'explored', 'if', 'child', 'goal', 'stop', 'True', 'frontier', 'append', 'child']","['insert', 'code', 'here', 'initi', 'state', 'state', 'none', 'insert', 'code', 'here', 'defin', 'the', 'goal', 'here', 'goal', 'none', 'frontier', 'from', 'collect', 'import', 'dequ', 'frontier', 'dequ', 'state', 'explor', 'step', 'counter', 'step', 'breadth', 'first', 'search', 'algorithm', 'continu', 'while', 'there', 'are', 'node', 'in', 'the', 'frontier', 'stop', 'fals', 'while', 'frontier', 'top', 'frontier', 'pop', 'explor', 'append', 'top', 'for', 'child', 'in', 'top', 'children', 'if', 'child', 'is', 'not', 'in', 'explor', 'if', 'child', 'goal', 'stop', 'true', 'frontier', 'append', 'child']","['insert', 'code', 'initi', 'state', 'state', 'none', 'insert', 'code', 'defin', 'goal', 'goal', 'none', 'frontier', 'collect', 'import', 'dequ', 'frontier', 'dequ', 'state', 'explor', 'step', 'counter', 'step', 'breadth', 'first', 'search', 'algorithm', 'continu', 'node', 'frontier', 'stop', 'fals', 'frontier', 'top', 'frontier', 'pop', 'explor', 'append', 'top', 'child', 'top', 'children', 'child', 'explor', 'child', 'goal', 'stop', 'true', 'frontier', 'append', 'child']",insert code initi state state none insert code defin goal goal none frontier collect import dequ frontier dequ state explor step counter step breadth first search algorithm continu node frontier stop fals frontier top frontier pop explor append top child top children child explor child goal stop true frontier append child,aicoding,CS,CS152
207277,"graph = {'A': ['C', 'D'],
         'B': ['A', 'D'],
         'C': ['F', 'E', 'D'],
         'D': ['B', 'A'],
         'E': ['B', 'F'],
         'F': ['C', 'E']}

state = 'A'
goal = 'F'

from collections import deque
frontier = deque([state])
visited = []

steps = 

while frontier:
    current = frontier.popleft()
    adjancents = graph[current] 
    visited.append(current)
    for node in adjancents:
    	if not (node in visited):
    		frontier.append(node)
    steps += 
    if current == goal:
        break
frontier_size = len(frontier)
print(""Breadth-first search terminated after %d steps",#aicoding,3,9801,"['graph', ""'A'"", ""'C'"", ""'D'"", ""'B'"", ""'A'"", ""'D'"", ""'C'"", ""'F'"", ""'E'"", ""'D'"", ""'D'"", ""'B'"", ""'A'"", ""'E'"", ""'B'"", ""'F'"", ""'F'"", ""'C'"", ""'E'"", 'state', ""'A'"", 'goal', ""'F'"", 'from', 'collections', 'import', 'deque', 'frontier', 'deque', 'state', 'visited', 'steps', 'while', 'frontier', 'current', 'frontier', 'popleft', 'adjancents', 'graph', 'current', 'visited', 'append', 'current', 'for', 'node', 'in', 'adjancents', 'if', 'not', 'node', 'in', 'visited', 'frontier', 'append', 'node', 'steps', 'if', 'current', 'goal', 'break', 'frontier_size', 'len', 'frontier', 'print', 'Breadth', 'first', 'search', 'terminated', 'after', 'd', 'steps']","['graph', 'a', 'c', 'd', 'b', 'a', 'd', 'c', 'f', 'e', 'd', 'd', 'b', 'a', 'e', 'b', 'f', 'f', 'c', 'e', 'state', 'a', 'goal', 'f', 'from', 'collect', 'import', 'dequ', 'frontier', 'dequ', 'state', 'visit', 'step', 'while', 'frontier', 'current', 'frontier', 'popleft', 'adjanc', 'graph', 'current', 'visit', 'append', 'current', 'for', 'node', 'in', 'adjanc', 'if', 'not', 'node', 'in', 'visit', 'frontier', 'append', 'node', 'step', 'if', 'current', 'goal', 'break', 'frontier_s', 'len', 'frontier', 'print', 'breadth', 'first', 'search', 'termin', 'after', 'd', 'step']","['graph', 'c', 'b', 'c', 'f', 'e', 'b', 'e', 'b', 'f', 'f', 'c', 'e', 'state', 'goal', 'f', 'collect', 'import', 'dequ', 'frontier', 'dequ', 'state', 'visit', 'step', 'frontier', 'current', 'frontier', 'popleft', 'adjanc', 'graph', 'current', 'visit', 'append', 'current', 'node', 'adjanc', 'node', 'visit', 'frontier', 'append', 'node', 'step', 'current', 'goal', 'break', 'frontier_s', 'len', 'frontier', 'print', 'breadth', 'first', 'search', 'termin', 'step']",graph c b c f e b e b f f c e state goal f collect import dequ frontier dequ state visit step frontier current frontier popleft adjanc graph current visit append current node adjanc node visit frontier append node step current goal break frontier_s len frontier print breadth first search termin step,aicoding,CS,CS152
121531,"def make_markov_table(language_data):
    table=np.zeros((,))
    letters = list(set(language_data[]))
    for s in range(len(language_data)):
        for idx in range(len(language_data[s]-)):
            
            for i in raneg(len(letters)):
                if langA[s][idx] == letters[i]:
                    
                    for j in range(len(letters)):
                        if language_data[s][idx+]==letters[j]
                            table[i][j] += 
    #normalize
    table = table/table.sum(axis=)[:,None]
    return table
Didn't get to finish the code, this is what i",#maximumlikelihood,3,5484,"['def', 'make_markov_table', 'language_data', 'table', 'np', 'zeros', 'letters', 'list', 'set', 'language_data', 'for', 's', 'in', 'range', 'len', 'language_data', 'for', 'idx', 'in', 'range', 'len', 'language_data', 's', 'for', 'i', 'in', 'raneg', 'len', 'letters', 'if', 'langA', 's', 'idx', 'letters', 'i', 'for', 'j', 'in', 'range', 'len', 'letters', 'if', 'language_data', 's', 'idx', 'letters', 'j', 'table', 'i', 'j', 'normalize', 'table', 'table', 'table', 'sum', 'axis', 'None', 'return', 'table', ""Didn't"", 'get', 'to', 'finish', 'the', 'code', 'this', 'is', 'what', 'i']","['def', 'make_markov_t', 'language_data', 'tabl', 'np', 'zero', 'letter', 'list', 'set', 'language_data', 'for', 's', 'in', 'rang', 'len', 'language_data', 'for', 'idx', 'in', 'rang', 'len', 'language_data', 's', 'for', 'i', 'in', 'raneg', 'len', 'letter', 'if', 'langa', 's', 'idx', 'letter', 'i', 'for', 'j', 'in', 'rang', 'len', 'letter', 'if', 'language_data', 's', 'idx', 'letter', 'j', 'tabl', 'i', 'j', 'normal', 'tabl', 'tabl', 'tabl', 'sum', 'axi', 'none', 'return', 'tabl', ""didn't"", 'get', 'to', 'finish', 'the', 'code', 'this', 'is', 'what', 'i']","['def', 'make_markov_t', 'language_data', 'tabl', 'np', 'zero', 'letter', 'list', 'set', 'language_data', 'rang', 'len', 'language_data', 'idx', 'rang', 'len', 'language_data', 'raneg', 'len', 'letter', 'langa', 'idx', 'letter', 'j', 'rang', 'len', 'letter', 'language_data', 'idx', 'letter', 'j', 'tabl', 'j', 'normal', 'tabl', 'tabl', 'tabl', 'sum', 'axi', 'none', 'return', 'tabl', 'get', 'finish', 'code']",def make_markov_t language_data tabl np zero letter list set language_data rang len language_data idx rang len language_data raneg len letter langa idx letter j rang len letter language_data idx letter j tabl j normal tabl tabl tabl sum axi none return tabl get finish code,maximumlikelihood,CS,CS156
121537,"Complete code for generating st order probability transition matrix:

def make_probability_table(language_data):
    table = np.zeros((, ))
    letters = list(set(language_data[]))
    for s in range(len(language_data)):
        for idx in range(len(language_data[s])-):
            for i in range(len(letters)):
                if langA[s][idx] == letters[i]:
                    for j in range(len(letters)):
                        if language_data[s][idx+] == letters[j]:
                            table[i][j] +=   
    # Normalize the matrix
    table=table/table.sum(axis=)[:,None]",#maximumlikelihood,3,5487,"['Complete', 'code', 'for', 'generating', 'st', 'order', 'probability', 'transition', 'matrix', 'def', 'make_probability_table', 'language_data', 'table', 'np', 'zeros', 'letters', 'list', 'set', 'language_data', 'for', 's', 'in', 'range', 'len', 'language_data', 'for', 'idx', 'in', 'range', 'len', 'language_data', 's', 'for', 'i', 'in', 'range', 'len', 'letters', 'if', 'langA', 's', 'idx', 'letters', 'i', 'for', 'j', 'in', 'range', 'len', 'letters', 'if', 'language_data', 's', 'idx', 'letters', 'j', 'table', 'i', 'j', 'Normalize', 'the', 'matrix', 'table', 'table', 'table', 'sum', 'axis', 'None']","['complet', 'code', 'for', 'generat', 'st', 'order', 'probabl', 'transit', 'matrix', 'def', 'make_probability_t', 'language_data', 'tabl', 'np', 'zero', 'letter', 'list', 'set', 'language_data', 'for', 's', 'in', 'rang', 'len', 'language_data', 'for', 'idx', 'in', 'rang', 'len', 'language_data', 's', 'for', 'i', 'in', 'rang', 'len', 'letter', 'if', 'langa', 's', 'idx', 'letter', 'i', 'for', 'j', 'in', 'rang', 'len', 'letter', 'if', 'language_data', 's', 'idx', 'letter', 'j', 'tabl', 'i', 'j', 'normal', 'the', 'matrix', 'tabl', 'tabl', 'tabl', 'sum', 'axi', 'none']","['complet', 'code', 'generat', 'st', 'order', 'probabl', 'transit', 'matrix', 'def', 'make_probability_t', 'language_data', 'tabl', 'np', 'zero', 'letter', 'list', 'set', 'language_data', 'rang', 'len', 'language_data', 'idx', 'rang', 'len', 'language_data', 'rang', 'len', 'letter', 'langa', 'idx', 'letter', 'j', 'rang', 'len', 'letter', 'language_data', 'idx', 'letter', 'j', 'tabl', 'j', 'normal', 'matrix', 'tabl', 'tabl', 'tabl', 'sum', 'axi', 'none']",complet code generat st order probabl transit matrix def make_probability_t language_data tabl np zero letter list set language_data rang len language_data idx rang len language_data rang len letter langa idx letter j rang len letter language_data idx letter j tabl j normal matrix tabl tabl tabl sum axi none,maximumlikelihood,CS,CS156
121537,"Only got this far w/Skye's help.

def make_markov_table(lang_data):
    table = np.zeros((,))
    letters = list(set(lang_data[]))
    for s in range(len(lang_data)):
        for idx in range(len(lang_data[s])-):
            for i in range(len(letters)):
                if langA[s][idx] == letters[i]:
                    for j in range(len(letters)):
                        if lang_data[s][idx+] == letters[j]:
                            table[i][j] += 
    table = table / table.sum(axis=)[:,None]",#maximumlikelihood,3,5487,"['Only', 'got', 'this', 'far', 'w', ""Skye's"", 'help', 'def', 'make_markov_table', 'lang_data', 'table', 'np', 'zeros', 'letters', 'list', 'set', 'lang_data', 'for', 's', 'in', 'range', 'len', 'lang_data', 'for', 'idx', 'in', 'range', 'len', 'lang_data', 's', 'for', 'i', 'in', 'range', 'len', 'letters', 'if', 'langA', 's', 'idx', 'letters', 'i', 'for', 'j', 'in', 'range', 'len', 'letters', 'if', 'lang_data', 's', 'idx', 'letters', 'j', 'table', 'i', 'j', 'table', 'table', 'table', 'sum', 'axis', 'None']","['onli', 'got', 'this', 'far', 'w', 'skye', 'help', 'def', 'make_markov_t', 'lang_data', 'tabl', 'np', 'zero', 'letter', 'list', 'set', 'lang_data', 'for', 's', 'in', 'rang', 'len', 'lang_data', 'for', 'idx', 'in', 'rang', 'len', 'lang_data', 's', 'for', 'i', 'in', 'rang', 'len', 'letter', 'if', 'langa', 's', 'idx', 'letter', 'i', 'for', 'j', 'in', 'rang', 'len', 'letter', 'if', 'lang_data', 's', 'idx', 'letter', 'j', 'tabl', 'i', 'j', 'tabl', 'tabl', 'tabl', 'sum', 'axi', 'none']","['onli', 'got', 'far', 'w', 'skye', 'help', 'def', 'make_markov_t', 'lang_data', 'tabl', 'np', 'zero', 'letter', 'list', 'set', 'lang_data', 'rang', 'len', 'lang_data', 'idx', 'rang', 'len', 'lang_data', 'rang', 'len', 'letter', 'langa', 'idx', 'letter', 'j', 'rang', 'len', 'letter', 'lang_data', 'idx', 'letter', 'j', 'tabl', 'j', 'tabl', 'tabl', 'tabl', 'sum', 'axi', 'none']",onli got far w skye help def make_markov_t lang_data tabl np zero letter list set lang_data rang len lang_data idx rang len lang_data rang len letter langa idx letter j rang len letter lang_data idx letter j tabl j tabl tabl tabl sum axi none,maximumlikelihood,CS,CS156
121537,"def markov_model(language_data, chars):
    transition_matrix = np.zeros((,))
    print ""The letters in the data set:"", chars
    for s in range(len(language_data)):
        for idx in range(len(language_data[s]) - ):
            for i in range(len(chars)):
                if language_data[s][idx] == chars[i]:
                    for j in range(len(chars)):
                        if language_data[s][idx+] == chars[j]:
                            transition_matrix[i,j]+=
    transition_matrix = transition_matrix / transition_matrix.sum(axis=)[:, None] #normalize
    return table",#maximumlikelihood,4,5487,"['def', 'markov_model', 'language_data', 'chars', 'transition_matrix', 'np', 'zeros', 'print', 'The', 'letters', 'in', 'the', 'data', 'set', 'chars', 'for', 's', 'in', 'range', 'len', 'language_data', 'for', 'idx', 'in', 'range', 'len', 'language_data', 's', 'for', 'i', 'in', 'range', 'len', 'chars', 'if', 'language_data', 's', 'idx', 'chars', 'i', 'for', 'j', 'in', 'range', 'len', 'chars', 'if', 'language_data', 's', 'idx', 'chars', 'j', 'transition_matrix', 'i', 'j', 'transition_matrix', 'transition_matrix', 'transition_matrix', 'sum', 'axis', 'None', 'normalize', 'return', 'table']","['def', 'markov_model', 'language_data', 'char', 'transition_matrix', 'np', 'zero', 'print', 'the', 'letter', 'in', 'the', 'data', 'set', 'char', 'for', 's', 'in', 'rang', 'len', 'language_data', 'for', 'idx', 'in', 'rang', 'len', 'language_data', 's', 'for', 'i', 'in', 'rang', 'len', 'char', 'if', 'language_data', 's', 'idx', 'char', 'i', 'for', 'j', 'in', 'rang', 'len', 'char', 'if', 'language_data', 's', 'idx', 'char', 'j', 'transition_matrix', 'i', 'j', 'transition_matrix', 'transition_matrix', 'transition_matrix', 'sum', 'axi', 'none', 'normal', 'return', 'tabl']","['def', 'markov_model', 'language_data', 'char', 'transition_matrix', 'np', 'zero', 'print', 'letter', 'data', 'set', 'char', 'rang', 'len', 'language_data', 'idx', 'rang', 'len', 'language_data', 'rang', 'len', 'char', 'language_data', 'idx', 'char', 'j', 'rang', 'len', 'char', 'language_data', 'idx', 'char', 'j', 'transition_matrix', 'j', 'transition_matrix', 'transition_matrix', 'transition_matrix', 'sum', 'axi', 'none', 'normal', 'return', 'tabl']",def markov_model language_data char transition_matrix np zero print letter data set char rang len language_data idx rang len language_data rang len char language_data idx char j rang len char language_data idx char j transition_matrix j transition_matrix transition_matrix transition_matrix sum axi none normal return tabl,maximumlikelihood,CS,CS156
121537,"#code adapted from Skye 

def make_markov_table(language_data):

    table = np.zeros((, ))

    letters = list(set(language_data[]))

    for s in range(len(language_data)):
        for idx in range(len(language_data[s])-):

            for i in range(len(letters)):
                if language_data[s][idx] == letters[i]:

                    for j in range(len(letters)):
                        if language_data[s][idx+] == letters[j]:
                            table[i][j] += 

    table = table / table.sum(axis = )[:, None]

    return table",#maximumlikelihood,3,5487,"['code', 'adapted', 'from', 'Skye', 'def', 'make_markov_table', 'language_data', 'table', 'np', 'zeros', 'letters', 'list', 'set', 'language_data', 'for', 's', 'in', 'range', 'len', 'language_data', 'for', 'idx', 'in', 'range', 'len', 'language_data', 's', 'for', 'i', 'in', 'range', 'len', 'letters', 'if', 'language_data', 's', 'idx', 'letters', 'i', 'for', 'j', 'in', 'range', 'len', 'letters', 'if', 'language_data', 's', 'idx', 'letters', 'j', 'table', 'i', 'j', 'table', 'table', 'table', 'sum', 'axis', 'None', 'return', 'table']","['code', 'adapt', 'from', 'skye', 'def', 'make_markov_t', 'language_data', 'tabl', 'np', 'zero', 'letter', 'list', 'set', 'language_data', 'for', 's', 'in', 'rang', 'len', 'language_data', 'for', 'idx', 'in', 'rang', 'len', 'language_data', 's', 'for', 'i', 'in', 'rang', 'len', 'letter', 'if', 'language_data', 's', 'idx', 'letter', 'i', 'for', 'j', 'in', 'rang', 'len', 'letter', 'if', 'language_data', 's', 'idx', 'letter', 'j', 'tabl', 'i', 'j', 'tabl', 'tabl', 'tabl', 'sum', 'axi', 'none', 'return', 'tabl']","['code', 'adapt', 'skye', 'def', 'make_markov_t', 'language_data', 'tabl', 'np', 'zero', 'letter', 'list', 'set', 'language_data', 'rang', 'len', 'language_data', 'idx', 'rang', 'len', 'language_data', 'rang', 'len', 'letter', 'language_data', 'idx', 'letter', 'j', 'rang', 'len', 'letter', 'language_data', 'idx', 'letter', 'j', 'tabl', 'j', 'tabl', 'tabl', 'tabl', 'sum', 'axi', 'none', 'return', 'tabl']",code adapt skye def make_markov_t language_data tabl np zero letter list set language_data rang len language_data idx rang len language_data rang len letter language_data idx letter j rang len letter language_data idx letter j tabl j tabl tabl tabl sum axi none return tabl,maximumlikelihood,CS,CS156
121537,"prob_matrix = np.zeros((,))
    letters = list(set(data_input[]))
    
    for s in range(len(data_input)):
        for ind in range(len(data_input[s])-):
            for i in range(len(letters)):
                if data_input_A[s][ind] == letters[i]:
                    for j in range(len(letters)):
                        if data_input[s][ind+] == letters[j]:
                            prob_matrix[i][j] +=
    #normalize matrix
    
    prob_matrix = prob_matrix / prob_matrix.sum(axis=)[:,None]
    Markov_Model = Table(prob_matrix,names = letters)
    return Markov_Model",#maximumlikelihood,3,5487,"['prob_matrix', 'np', 'zeros', 'letters', 'list', 'set', 'data_input', 'for', 's', 'in', 'range', 'len', 'data_input', 'for', 'ind', 'in', 'range', 'len', 'data_input', 's', 'for', 'i', 'in', 'range', 'len', 'letters', 'if', 'data_input_A', 's', 'ind', 'letters', 'i', 'for', 'j', 'in', 'range', 'len', 'letters', 'if', 'data_input', 's', 'ind', 'letters', 'j', 'prob_matrix', 'i', 'j', 'normalize', 'matrix', 'prob_matrix', 'prob_matrix', 'prob_matrix', 'sum', 'axis', 'None', 'Markov_Model', 'Table', 'prob_matrix', 'names', 'letters', 'return', 'Markov_Model']","['prob_matrix', 'np', 'zero', 'letter', 'list', 'set', 'data_input', 'for', 's', 'in', 'rang', 'len', 'data_input', 'for', 'ind', 'in', 'rang', 'len', 'data_input', 's', 'for', 'i', 'in', 'rang', 'len', 'letter', 'if', 'data_input_a', 's', 'ind', 'letter', 'i', 'for', 'j', 'in', 'rang', 'len', 'letter', 'if', 'data_input', 's', 'ind', 'letter', 'j', 'prob_matrix', 'i', 'j', 'normal', 'matrix', 'prob_matrix', 'prob_matrix', 'prob_matrix', 'sum', 'axi', 'none', 'markov_model', 'tabl', 'prob_matrix', 'name', 'letter', 'return', 'markov_model']","['prob_matrix', 'np', 'zero', 'letter', 'list', 'set', 'data_input', 'rang', 'len', 'data_input', 'ind', 'rang', 'len', 'data_input', 'rang', 'len', 'letter', 'data_input_a', 'ind', 'letter', 'j', 'rang', 'len', 'letter', 'data_input', 'ind', 'letter', 'j', 'prob_matrix', 'j', 'normal', 'matrix', 'prob_matrix', 'prob_matrix', 'prob_matrix', 'sum', 'axi', 'none', 'markov_model', 'tabl', 'prob_matrix', 'name', 'letter', 'return', 'markov_model']",prob_matrix np zero letter list set data_input rang len data_input ind rang len data_input rang len letter data_input_a ind letter j rang len letter data_input ind letter j prob_matrix j normal matrix prob_matrix prob_matrix prob_matrix sum axi none markov_model tabl prob_matrix name letter return markov_model,maximumlikelihood,CS,CS156
121537,"I didn't get to training, was going ro research a library. What i have follows.

def transition_table(language):
    letters = list(set(language[]))
    table = np.zeros((len(letters), len(letters)))
    for i in range(len(language)):
        for j in range(len(language[i])-):
            for k in range(len(letters)):
                for l in range(len(letters)):
                    if language[i][j+] == letters[j]:
                        table[k][l] += 
    table = table/table.sum(axis=)[:,None]
    return table",#maximumlikelihood,3,5487,"['I', ""didn't"", 'get', 'to', 'training', 'was', 'going', 'ro', 'research', 'a', 'library', 'What', 'i', 'have', 'follows', 'def', 'transition_table', 'language', 'letters', 'list', 'set', 'language', 'table', 'np', 'zeros', 'len', 'letters', 'len', 'letters', 'for', 'i', 'in', 'range', 'len', 'language', 'for', 'j', 'in', 'range', 'len', 'language', 'i', 'for', 'k', 'in', 'range', 'len', 'letters', 'for', 'l', 'in', 'range', 'len', 'letters', 'if', 'language', 'i', 'j', 'letters', 'j', 'table', 'k', 'l', 'table', 'table', 'table', 'sum', 'axis', 'None', 'return', 'table']","['i', ""didn't"", 'get', 'to', 'train', 'was', 'go', 'ro', 'research', 'a', 'librari', 'what', 'i', 'have', 'follow', 'def', 'transition_t', 'languag', 'letter', 'list', 'set', 'languag', 'tabl', 'np', 'zero', 'len', 'letter', 'len', 'letter', 'for', 'i', 'in', 'rang', 'len', 'languag', 'for', 'j', 'in', 'rang', 'len', 'languag', 'i', 'for', 'k', 'in', 'rang', 'len', 'letter', 'for', 'l', 'in', 'rang', 'len', 'letter', 'if', 'languag', 'i', 'j', 'letter', 'j', 'tabl', 'k', 'l', 'tabl', 'tabl', 'tabl', 'sum', 'axi', 'none', 'return', 'tabl']","['get', 'train', 'go', 'ro', 'research', 'librari', 'follow', 'def', 'transition_t', 'languag', 'letter', 'list', 'set', 'languag', 'tabl', 'np', 'zero', 'len', 'letter', 'len', 'letter', 'rang', 'len', 'languag', 'j', 'rang', 'len', 'languag', 'k', 'rang', 'len', 'letter', 'l', 'rang', 'len', 'letter', 'languag', 'j', 'letter', 'j', 'tabl', 'k', 'l', 'tabl', 'tabl', 'tabl', 'sum', 'axi', 'none', 'return', 'tabl']",get train go ro research librari follow def transition_t languag letter list set languag tabl np zero len letter len letter rang len languag j rang len languag k rang len letter l rang len letter languag j letter j tabl k l tabl tabl tabl sum axi none return tabl,maximumlikelihood,CS,CS156
117162,"def expectation(answers, biases, p_clusters):
    # In this function we create our expectations.

    # This is probably not the correct answer!
    sum_likelihood = 
    cluster_likelihood = []
    
    for person in answers[:]:
        for cluster in bias_new:
            for answer in xrange(len(person)):
                if person[answer] == :
                    sum_likelihood += (-cluster[answer])
                else:
                    sum_likelihood += (cluster[answer])
            cluster_likelihood.append(float(sum_likelihood)/)
        print cluster_likelihood",#expectationmaximization,3,5049,"['def', 'expectation', 'answers', 'biases', 'p_clusters', 'In', 'this', 'function', 'we', 'create', 'our', 'expectations', 'This', 'is', 'probably', 'not', 'the', 'correct', 'answer', 'sum_likelihood', 'cluster_likelihood', 'for', 'person', 'in', 'answers', 'for', 'cluster', 'in', 'bias_new', 'for', 'answer', 'in', 'xrange', 'len', 'person', 'if', 'person', 'answer', 'sum_likelihood', 'cluster', 'answer', 'else', 'sum_likelihood', 'cluster', 'answer', 'cluster_likelihood', 'append', 'float', 'sum_likelihood', 'print', 'cluster_likelihood']","['def', 'expect', 'answer', 'bias', 'p_cluster', 'in', 'this', 'function', 'we', 'creat', 'our', 'expect', 'this', 'is', 'probabl', 'not', 'the', 'correct', 'answer', 'sum_likelihood', 'cluster_likelihood', 'for', 'person', 'in', 'answer', 'for', 'cluster', 'in', 'bias_new', 'for', 'answer', 'in', 'xrang', 'len', 'person', 'if', 'person', 'answer', 'sum_likelihood', 'cluster', 'answer', 'els', 'sum_likelihood', 'cluster', 'answer', 'cluster_likelihood', 'append', 'float', 'sum_likelihood', 'print', 'cluster_likelihood']","['def', 'expect', 'answer', 'bias', 'p_cluster', 'function', 'creat', 'expect', 'probabl', 'correct', 'answer', 'sum_likelihood', 'cluster_likelihood', 'person', 'answer', 'cluster', 'bias_new', 'answer', 'xrang', 'len', 'person', 'person', 'answer', 'sum_likelihood', 'cluster', 'answer', 'els', 'sum_likelihood', 'cluster', 'answer', 'cluster_likelihood', 'append', 'float', 'sum_likelihood', 'print', 'cluster_likelihood']",def expect answer bias p_cluster function creat expect probabl correct answer sum_likelihood cluster_likelihood person answer cluster bias_new answer xrang len person person answer sum_likelihood cluster answer els sum_likelihood cluster answer cluster_likelihood append float sum_likelihood print cluster_likelihood,expectationmaximization,CS,CS156
117166,"I didn't get my code working yet because of a bug, but my general approach was to perform maximum likelihood estimation on the samples by choosing the maximum probability that a person was in a cluster. A better approach would have been to compute expected values under this posterior.
def maximization(answers, people):
    biases = np.zeros((n_questions, n_clusters))
    for cluster in range(len()):
        samples = people[np.argmax(people) == cluster]
        for question in range(len()):
             biases[question, cluster] = np.sum(samples, axis=) / len(samples)
    return biases",#expectationmaximization,3,5052,"['I', ""didn't"", 'get', 'my', 'code', 'working', 'yet', 'because', 'of', 'a', 'bug', 'but', 'my', 'general', 'approach', 'was', 'to', 'perform', 'maximum', 'likelihood', 'estimation', 'on', 'the', 'samples', 'by', 'choosing', 'the', 'maximum', 'probability', 'that', 'a', 'person', 'was', 'in', 'a', 'cluster', 'A', 'better', 'approach', 'would', 'have', 'been', 'to', 'compute', 'expected', 'values', 'under', 'this', 'posterior', 'def', 'maximization', 'answers', 'people', 'biases', 'np', 'zeros', 'n_questions', 'n_clusters', 'for', 'cluster', 'in', 'range', 'len', 'samples', 'people', 'np', 'argmax', 'people', 'cluster', 'for', 'question', 'in', 'range', 'len', 'biases', 'question', 'cluster', 'np', 'sum', 'samples', 'axis', 'len', 'samples', 'return', 'biases']","['i', ""didn't"", 'get', 'my', 'code', 'work', 'yet', 'becaus', 'of', 'a', 'bug', 'but', 'my', 'general', 'approach', 'was', 'to', 'perform', 'maximum', 'likelihood', 'estim', 'on', 'the', 'sampl', 'by', 'choos', 'the', 'maximum', 'probabl', 'that', 'a', 'person', 'was', 'in', 'a', 'cluster', 'a', 'better', 'approach', 'would', 'have', 'been', 'to', 'comput', 'expect', 'valu', 'under', 'this', 'posterior', 'def', 'maxim', 'answer', 'peopl', 'bias', 'np', 'zero', 'n_question', 'n_cluster', 'for', 'cluster', 'in', 'rang', 'len', 'sampl', 'peopl', 'np', 'argmax', 'peopl', 'cluster', 'for', 'question', 'in', 'rang', 'len', 'bias', 'question', 'cluster', 'np', 'sum', 'sampl', 'axi', 'len', 'sampl', 'return', 'bias']","['get', 'code', 'work', 'yet', 'becaus', 'bug', 'general', 'approach', 'perform', 'maximum', 'likelihood', 'estim', 'sampl', 'choos', 'maximum', 'probabl', 'person', 'cluster', 'better', 'approach', 'comput', 'expect', 'valu', 'posterior', 'def', 'maxim', 'answer', 'peopl', 'bias', 'np', 'zero', 'n_question', 'n_cluster', 'cluster', 'rang', 'len', 'sampl', 'peopl', 'np', 'argmax', 'peopl', 'cluster', 'question', 'rang', 'len', 'bias', 'question', 'cluster', 'np', 'sum', 'sampl', 'axi', 'len', 'sampl', 'return', 'bias']",get code work yet becaus bug general approach perform maximum likelihood estim sampl choos maximum probabl person cluster better approach comput expect valu posterior def maxim answer peopl bias np zero n_question n_cluster cluster rang len sampl peopl np argmax peopl cluster question rang len bias question cluster np sum sampl axi len sampl return bias,expectationmaximization,CS,CS156
117166,"I couldn't infer the parameters...

def maximization(answers, people):
    biases = np.zeros((n_questions, n_clusters)) + .
    return biases
for step in range():
    people = expectation(answers, biases, p_clusters)
    biases = maximization(answers, people)

But if you want to know how to get histograms for different months in task ...

for i in range(len(data[""Date""])):
    data[""Month""][i] = data[""Date""][i][:]
months = set(data[""Month""])
monthly_data = {}
for i in months:
    monthly_data[i] = list(data.loc[data[""Month""] == i][""Amount""])
plt.hist(monthly_data['Apr'])",#expectationmaximization,1,5052,"['I', ""couldn't"", 'infer', 'the', 'parameters', 'def', 'maximization', 'answers', 'people', 'biases', 'np', 'zeros', 'n_questions', 'n_clusters', 'return', 'biases', 'for', 'step', 'in', 'range', 'people', 'expectation', 'answers', 'biases', 'p_clusters', 'biases', 'maximization', 'answers', 'people', 'But', 'if', 'you', 'want', 'to', 'know', 'how', 'to', 'get', 'histograms', 'for', 'different', 'months', 'in', 'task', 'for', 'i', 'in', 'range', 'len', 'data', 'Date', 'data', 'Month', 'i', 'data', 'Date', 'i', 'months', 'set', 'data', 'Month', 'monthly_data', 'for', 'i', 'in', 'months', 'monthly_data', 'i', 'list', 'data', 'loc', 'data', 'Month', 'i', 'Amount', 'plt', 'hist', 'monthly_data', ""'Apr'""]","['i', ""couldn't"", 'infer', 'the', 'paramet', 'def', 'maxim', 'answer', 'peopl', 'bias', 'np', 'zero', 'n_question', 'n_cluster', 'return', 'bias', 'for', 'step', 'in', 'rang', 'peopl', 'expect', 'answer', 'bias', 'p_cluster', 'bias', 'maxim', 'answer', 'peopl', 'but', 'if', 'you', 'want', 'to', 'know', 'how', 'to', 'get', 'histogram', 'for', 'differ', 'month', 'in', 'task', 'for', 'i', 'in', 'rang', 'len', 'data', 'date', 'data', 'month', 'i', 'data', 'date', 'i', 'month', 'set', 'data', 'month', 'monthly_data', 'for', 'i', 'in', 'month', 'monthly_data', 'i', 'list', 'data', 'loc', 'data', 'month', 'i', 'amount', 'plt', 'hist', 'monthly_data', 'apr']","['infer', 'paramet', 'def', 'maxim', 'answer', 'peopl', 'bias', 'np', 'zero', 'n_question', 'n_cluster', 'return', 'bias', 'step', 'rang', 'peopl', 'expect', 'answer', 'bias', 'p_cluster', 'bias', 'maxim', 'answer', 'peopl', 'want', 'know', 'get', 'histogram', 'differ', 'month', 'task', 'rang', 'len', 'data', 'date', 'data', 'month', 'data', 'date', 'month', 'set', 'data', 'month', 'monthly_data', 'month', 'monthly_data', 'list', 'data', 'loc', 'data', 'month', 'amount', 'plt', 'hist', 'monthly_data', 'apr']",infer paramet def maxim answer peopl bias np zero n_question n_cluster return bias step rang peopl expect answer bias p_cluster bias maxim answer peopl want know get histogram differ month task rang len data date data month data date month set data month monthly_data month monthly_data list data loc data month amount plt hist monthly_data apr,expectationmaximization,CS,CS156
121543,"for i in range(len(speech) - ):
    if (speakers[i] == ):
        for k in phonemes:
            for l in phonemes:
                if (speech[i] == k and speech[i + ] == l ):
                    transitions_s[phonemes.index(k)][phonemes.index(l)] += 
    if (speakers[i] == ):
        for k in phonemes:
            for l in phonemes:
                if (speech[i] == k and speech[i + ] == l ):
                    transitions_s[phonemes.index(k)][phonemes.index(l)] += 
... AND analogous bit for  if (speakers[i] == ): but no space left.
Also normalized each of these transitions_sx",#expectationmaximization,3,5490,"['for', 'i', 'in', 'range', 'len', 'speech', 'if', 'speakers', 'i', 'for', 'k', 'in', 'phonemes', 'for', 'l', 'in', 'phonemes', 'if', 'speech', 'i', 'k', 'and', 'speech', 'i', 'l', 'transitions_s', 'phonemes', 'index', 'k', 'phonemes', 'index', 'l', 'if', 'speakers', 'i', 'for', 'k', 'in', 'phonemes', 'for', 'l', 'in', 'phonemes', 'if', 'speech', 'i', 'k', 'and', 'speech', 'i', 'l', 'transitions_s', 'phonemes', 'index', 'k', 'phonemes', 'index', 'l', 'AND', 'analogous', 'bit', 'for', 'if', 'speakers', 'i', 'but', 'no', 'space', 'left', 'Also', 'normalized', 'each', 'of', 'these', 'transitions_sx']","['for', 'i', 'in', 'rang', 'len', 'speech', 'if', 'speaker', 'i', 'for', 'k', 'in', 'phonem', 'for', 'l', 'in', 'phonem', 'if', 'speech', 'i', 'k', 'and', 'speech', 'i', 'l', 'transitions_', 'phonem', 'index', 'k', 'phonem', 'index', 'l', 'if', 'speaker', 'i', 'for', 'k', 'in', 'phonem', 'for', 'l', 'in', 'phonem', 'if', 'speech', 'i', 'k', 'and', 'speech', 'i', 'l', 'transitions_', 'phonem', 'index', 'k', 'phonem', 'index', 'l', 'and', 'analog', 'bit', 'for', 'if', 'speaker', 'i', 'but', 'no', 'space', 'left', 'also', 'normal', 'each', 'of', 'these', 'transitions_sx']","['rang', 'len', 'speech', 'speaker', 'k', 'phonem', 'l', 'phonem', 'speech', 'k', 'speech', 'l', 'transitions_', 'phonem', 'index', 'k', 'phonem', 'index', 'l', 'speaker', 'k', 'phonem', 'l', 'phonem', 'speech', 'k', 'speech', 'l', 'transitions_', 'phonem', 'index', 'k', 'phonem', 'index', 'l', 'analog', 'bit', 'speaker', 'space', 'left', 'normal', 'transitions_sx']",rang len speech speaker k phonem l phonem speech k speech l transitions_ phonem index k phonem index l speaker k phonem l phonem speech k speech l transitions_ phonem index k phonem index l analog bit speaker space left normal transitions_sx,expectationmaximization,CS,CS156
109487,"def forwardChain(KB,q):
  agenda = agendify(KB)

  inferred = initialInferred(KB)

  count = countify(KB)

  while len(agenda) > :
    
    p = agenda.pop()

    if p == q:
      return True
    if inferred[p] == False:
      inferred[p] = True
      
      for c in KB:

        if c.premises.count(p) > :
          
            #decrements the count 
          count[str(KB.index(c))] = count[str(KB.index(c))] - 
          
          if count[str(KB.index(c))] == :
            agenda.append(c.conclusion)
            
    
  return False",#ailogic,3,4174,"['def', 'forwardChain', 'KB', 'q', 'agenda', 'agendify', 'KB', 'inferred', 'initialInferred', 'KB', 'count', 'countify', 'KB', 'while', 'len', 'agenda', 'p', 'agenda', 'pop', 'if', 'p', 'q', 'return', 'True', 'if', 'inferred', 'p', 'False', 'inferred', 'p', 'True', 'for', 'c', 'in', 'KB', 'if', 'c', 'premises', 'count', 'p', 'decrements', 'the', 'count', 'count', 'str', 'KB', 'index', 'c', 'count', 'str', 'KB', 'index', 'c', 'if', 'count', 'str', 'KB', 'index', 'c', 'agenda', 'append', 'c', 'conclusion', 'return', 'False']","['def', 'forwardchain', 'kb', 'q', 'agenda', 'agendifi', 'kb', 'infer', 'initialinf', 'kb', 'count', 'countifi', 'kb', 'while', 'len', 'agenda', 'p', 'agenda', 'pop', 'if', 'p', 'q', 'return', 'true', 'if', 'infer', 'p', 'fals', 'infer', 'p', 'true', 'for', 'c', 'in', 'kb', 'if', 'c', 'premis', 'count', 'p', 'decrement', 'the', 'count', 'count', 'str', 'kb', 'index', 'c', 'count', 'str', 'kb', 'index', 'c', 'if', 'count', 'str', 'kb', 'index', 'c', 'agenda', 'append', 'c', 'conclus', 'return', 'fals']","['def', 'forwardchain', 'kb', 'q', 'agenda', 'agendifi', 'kb', 'infer', 'initialinf', 'kb', 'count', 'countifi', 'kb', 'len', 'agenda', 'p', 'agenda', 'pop', 'p', 'q', 'return', 'true', 'infer', 'p', 'fals', 'infer', 'p', 'true', 'c', 'kb', 'c', 'premis', 'count', 'p', 'decrement', 'count', 'count', 'str', 'kb', 'index', 'c', 'count', 'str', 'kb', 'index', 'c', 'count', 'str', 'kb', 'index', 'c', 'agenda', 'append', 'c', 'conclus', 'return', 'fals']",def forwardchain kb q agenda agendifi kb infer initialinf kb count countifi kb len agenda p agenda pop p q return true infer p fals infer p true c kb c premis count p decrement count count str kb index c count str kb index c count str kb index c agenda append c conclus return fals,ailogic,CS,CS152
109487,"def forwardChaining(KB, agenda, q):
    c=[]
    inferred={}
    agendaCopy=agenda[:]
    for i in KB:
        c.append(i.size())
    while agendaCopy:
        lit=agendaCopy.pop()
        if lit==q:
            return True
        if lit not in inferred:
            inferred[lit]=True
            for i in range(len(KB)):
                if lit in KB[i].premise:
                    c[i]-=
                    if c[i]==:
                        agendaCopy.append(KB[i].conclusion)
    return False",#ailogic,3,4174,"['def', 'forwardChaining', 'KB', 'agenda', 'q', 'c', 'inferred', 'agendaCopy', 'agenda', 'for', 'i', 'in', 'KB', 'c', 'append', 'i', 'size', 'while', 'agendaCopy', 'lit', 'agendaCopy', 'pop', 'if', 'lit', 'q', 'return', 'True', 'if', 'lit', 'not', 'in', 'inferred', 'inferred', 'lit', 'True', 'for', 'i', 'in', 'range', 'len', 'KB', 'if', 'lit', 'in', 'KB', 'i', 'premise', 'c', 'i', 'if', 'c', 'i', 'agendaCopy', 'append', 'KB', 'i', 'conclusion', 'return', 'False']","['def', 'forwardchain', 'kb', 'agenda', 'q', 'c', 'infer', 'agendacopi', 'agenda', 'for', 'i', 'in', 'kb', 'c', 'append', 'i', 'size', 'while', 'agendacopi', 'lit', 'agendacopi', 'pop', 'if', 'lit', 'q', 'return', 'true', 'if', 'lit', 'not', 'in', 'infer', 'infer', 'lit', 'true', 'for', 'i', 'in', 'rang', 'len', 'kb', 'if', 'lit', 'in', 'kb', 'i', 'premis', 'c', 'i', 'if', 'c', 'i', 'agendacopi', 'append', 'kb', 'i', 'conclus', 'return', 'fals']","['def', 'forwardchain', 'kb', 'agenda', 'q', 'c', 'infer', 'agendacopi', 'agenda', 'kb', 'c', 'append', 'size', 'agendacopi', 'lit', 'agendacopi', 'pop', 'lit', 'q', 'return', 'true', 'lit', 'infer', 'infer', 'lit', 'true', 'rang', 'len', 'kb', 'lit', 'kb', 'premis', 'c', 'c', 'agendacopi', 'append', 'kb', 'conclus', 'return', 'fals']",def forwardchain kb agenda q c infer agendacopi agenda kb c append size agendacopi lit agendacopi pop lit q return true lit infer infer lit true rang len kb lit kb premis c c agendacopi append kb conclus return fals,ailogic,CS,CS152
109487,"import collections

def forward_chain(KB, q):
    #inputs:
    #KB, a knowledge base in the form of a list, where each element
    #is a definite clause given as a list, in which the last element
    #is the clause's head
    #q, a literal whose entailment under KB is to be ascertained
    
    count = {tuple(def_clause): len(def_clause) -  for def_clause in KB}
    
    inferences = collections.defaultdict(lambda: False)
    queue = [lit for lit in KB if len(lit) == ]
    if q in queue: return True
    while queue:
        p = tuple(queue.pop())
        
        if not inferences[p]:",#ailogic,3,4174,"['import', 'collections', 'def', 'forward_chain', 'KB', 'q', 'inputs', 'KB', 'a', 'knowledge', 'base', 'in', 'the', 'form', 'of', 'a', 'list', 'where', 'each', 'element', 'is', 'a', 'definite', 'clause', 'given', 'as', 'a', 'list', 'in', 'which', 'the', 'last', 'element', 'is', 'the', ""clause's"", 'head', 'q', 'a', 'literal', 'whose', 'entailment', 'under', 'KB', 'is', 'to', 'be', 'ascertained', 'count', 'tuple', 'def_clause', 'len', 'def_clause', 'for', 'def_clause', 'in', 'KB', 'inferences', 'collections', 'defaultdict', 'lambda', 'False', 'queue', 'lit', 'for', 'lit', 'in', 'KB', 'if', 'len', 'lit', 'if', 'q', 'in', 'queue', 'return', 'True', 'while', 'queue', 'p', 'tuple', 'queue', 'pop', 'if', 'not', 'inferences', 'p']","['import', 'collect', 'def', 'forward_chain', 'kb', 'q', 'input', 'kb', 'a', 'knowledg', 'base', 'in', 'the', 'form', 'of', 'a', 'list', 'where', 'each', 'element', 'is', 'a', 'definit', 'claus', 'given', 'as', 'a', 'list', 'in', 'which', 'the', 'last', 'element', 'is', 'the', 'claus', 'head', 'q', 'a', 'liter', 'whose', 'entail', 'under', 'kb', 'is', 'to', 'be', 'ascertain', 'count', 'tupl', 'def_claus', 'len', 'def_claus', 'for', 'def_claus', 'in', 'kb', 'infer', 'collect', 'defaultdict', 'lambda', 'fals', 'queue', 'lit', 'for', 'lit', 'in', 'kb', 'if', 'len', 'lit', 'if', 'q', 'in', 'queue', 'return', 'true', 'while', 'queue', 'p', 'tupl', 'queue', 'pop', 'if', 'not', 'infer', 'p']","['import', 'collect', 'def', 'forward_chain', 'kb', 'q', 'input', 'kb', 'knowledg', 'base', 'form', 'list', 'element', 'definit', 'claus', 'given', 'list', 'last', 'element', 'claus', 'head', 'q', 'liter', 'whose', 'entail', 'kb', 'ascertain', 'count', 'tupl', 'def_claus', 'len', 'def_claus', 'def_claus', 'kb', 'infer', 'collect', 'defaultdict', 'lambda', 'fals', 'queue', 'lit', 'lit', 'kb', 'len', 'lit', 'q', 'queue', 'return', 'true', 'queue', 'p', 'tupl', 'queue', 'pop', 'infer', 'p']",import collect def forward_chain kb q input kb knowledg base form list element definit claus given list last element claus head q liter whose entail kb ascertain count tupl def_claus len def_claus def_claus kb infer collect defaultdict lambda fals queue lit lit kb len lit q queue return true queue p tupl queue pop infer p,ailogic,CS,CS152
109487,"def pl_fc_entails(KB, q):

    count = dict([(c, len(conjuncts(c.args[]))) for c in KB.clauses
                                                 if c.op == '>>'])
    inferred = DefaultDict(False)
    agenda = [s for s in KB.clauses if is_prop_symbol(s.op)]
    if q in agenda: return True
    while agenda:
        p = agenda.pop()
        if not inferred[p]:
            inferred[p] = True
            for c in KB.clauses_with_premise(p):
                count[",#ailogic,3,4174,"['def', 'pl_fc_entails', 'KB', 'q', 'count', 'dict', 'c', 'len', 'conjuncts', 'c', 'args', 'for', 'c', 'in', 'KB', 'clauses', 'if', 'c', 'op', ""'"", ""'"", 'inferred', 'DefaultDict', 'False', 'agenda', 's', 'for', 's', 'in', 'KB', 'clauses', 'if', 'is_prop_symbol', 's', 'op', 'if', 'q', 'in', 'agenda', 'return', 'True', 'while', 'agenda', 'p', 'agenda', 'pop', 'if', 'not', 'inferred', 'p', 'inferred', 'p', 'True', 'for', 'c', 'in', 'KB', 'clauses_with_premise', 'p', 'count']","['def', 'pl_fc_entail', 'kb', 'q', 'count', 'dict', 'c', 'len', 'conjunct', 'c', 'arg', 'for', 'c', 'in', 'kb', 'claus', 'if', 'c', 'op', ""'"", ""'"", 'infer', 'defaultdict', 'fals', 'agenda', 's', 'for', 's', 'in', 'kb', 'claus', 'if', 'is_prop_symbol', 's', 'op', 'if', 'q', 'in', 'agenda', 'return', 'true', 'while', 'agenda', 'p', 'agenda', 'pop', 'if', 'not', 'infer', 'p', 'infer', 'p', 'true', 'for', 'c', 'in', 'kb', 'clauses_with_premis', 'p', 'count']","['def', 'pl_fc_entail', 'kb', 'q', 'count', 'dict', 'c', 'len', 'conjunct', 'c', 'arg', 'c', 'kb', 'claus', 'c', 'op', ""'"", ""'"", 'infer', 'defaultdict', 'fals', 'agenda', 'kb', 'claus', 'is_prop_symbol', 'op', 'q', 'agenda', 'return', 'true', 'agenda', 'p', 'agenda', 'pop', 'infer', 'p', 'infer', 'p', 'true', 'c', 'kb', 'clauses_with_premis', 'p', 'count']",def pl_fc_entail kb q count dict c len conjunct c arg c kb claus c op ' ' infer defaultdict fals agenda kb claus is_prop_symbol op q agenda return true agenda p agenda pop infer p infer p true c kb clauses_with_premis p count,ailogic,CS,CS152
111369,"We didn't think about adding a parallel clause (e.g. leaky_t && pressurized_t ==> shower_flow) to KB. Originally we wrote something like ""leaky==> on"", which actually is logically incorrect because leaky doesn't mean the faucet is on, it's just that leaky shares the same consequences as if faucet is on",#ailogic,3,4465,"['We', ""didn't"", 'think', 'about', 'adding', 'a', 'parallel', 'clause', 'e', 'g', 'leaky_t', 'pressurized_t', 'shower_flow', 'to', 'KB', 'Originally', 'we', 'wrote', 'something', 'like', 'leaky', 'on', 'which', 'actually', 'is', 'logically', 'incorrect', 'because', 'leaky', ""doesn't"", 'mean', 'the', 'faucet', 'is', 'on', ""it's"", 'just', 'that', 'leaky', 'shares', 'the', 'same', 'consequences', 'as', 'if', 'faucet', 'is', 'on']","['we', ""didn't"", 'think', 'about', 'ad', 'a', 'parallel', 'claus', 'e', 'g', 'leaky_t', 'pressurized_t', 'shower_flow', 'to', 'kb', 'origin', 'we', 'wrote', 'someth', 'like', 'leaki', 'on', 'which', 'actual', 'is', 'logic', 'incorrect', 'becaus', 'leaki', ""doesn't"", 'mean', 'the', 'faucet', 'is', 'on', 'it', 'just', 'that', 'leaki', 'share', 'the', 'same', 'consequ', 'as', 'if', 'faucet', 'is', 'on']","['think', 'ad', 'parallel', 'claus', 'e', 'g', 'leaky_t', 'pressurized_t', 'shower_flow', 'kb', 'origin', 'wrote', 'someth', 'like', 'leaki', 'actual', 'logic', 'incorrect', 'becaus', 'leaki', 'mean', 'faucet', 'leaki', 'share', 'consequ', 'faucet']",think ad parallel claus e g leaky_t pressurized_t shower_flow kb origin wrote someth like leaki actual logic incorrect becaus leaki mean faucet leaki share consequ faucet,ailogic,CS,CS152
111371,"Because our loop would only halt if _x_it reaches the goal set, which, in the code, contains only clauses that have a False in its conclusion (goal_clauses = {c for c in KB if c.conclusion == false}). If we don't constrain these opposing meaning literals to create a _x_False, our ATMS implementation wouldn't be able to work because our goal set is _x_empty. In other words, _x_since ATMS is a type of proving by contradiction, it wouldn't work if there is no contradiction.",#ailogic,3,4466,"['Because', 'our', 'loop', 'would', 'only', 'halt', 'if', '_x_it', 'reaches', 'the', 'goal', 'set', 'which', 'in', 'the', 'code', 'contains', 'only', 'clauses', 'that', 'have', 'a', 'False', 'in', 'its', 'conclusion', 'goal_clauses', 'c', 'for', 'c', 'in', 'KB', 'if', 'c', 'conclusion', 'false', 'If', 'we', ""don't"", 'constrain', 'these', 'opposing', 'meaning', 'literals', 'to', 'create', 'a', '_x_False', 'our', 'ATMS', 'implementation', ""wouldn't"", 'be', 'able', 'to', 'work', 'because', 'our', 'goal', 'set', 'is', '_x_empty', 'In', 'other', 'words', '_x_since', 'ATMS', 'is', 'a', 'type', 'of', 'proving', 'by', 'contradiction', 'it', ""wouldn't"", 'work', 'if', 'there', 'is', 'no', 'contradiction']","['becaus', 'our', 'loop', 'would', 'onli', 'halt', 'if', '_x_it', 'reach', 'the', 'goal', 'set', 'which', 'in', 'the', 'code', 'contain', 'onli', 'claus', 'that', 'have', 'a', 'fals', 'in', 'it', 'conclus', 'goal_claus', 'c', 'for', 'c', 'in', 'kb', 'if', 'c', 'conclus', 'fals', 'if', 'we', ""don't"", 'constrain', 'these', 'oppos', 'mean', 'liter', 'to', 'creat', 'a', '_x_fals', 'our', 'atm', 'implement', ""wouldn't"", 'be', 'abl', 'to', 'work', 'becaus', 'our', 'goal', 'set', 'is', '_x_empti', 'in', 'other', 'word', '_x_sinc', 'atm', 'is', 'a', 'type', 'of', 'prove', 'by', 'contradict', 'it', ""wouldn't"", 'work', 'if', 'there', 'is', 'no', 'contradict']","['becaus', 'loop', 'onli', 'halt', '_x_it', 'reach', 'goal', 'set', 'code', 'contain', 'onli', 'claus', 'fals', 'conclus', 'goal_claus', 'c', 'c', 'kb', 'c', 'conclus', 'fals', 'constrain', 'oppos', 'mean', 'liter', 'creat', '_x_fals', 'atm', 'implement', 'abl', 'work', 'becaus', 'goal', 'set', '_x_empti', 'word', '_x_sinc', 'atm', 'type', 'prove', 'contradict', 'work', 'contradict']",becaus loop onli halt _x_it reach goal set code contain onli claus fals conclus goal_claus c c kb c conclus fals constrain oppos mean liter creat _x_fals atm implement abl work becaus goal set _x_empti word _x_sinc atm type prove contradict work contradict,ailogic,CS,CS152
112415,"Firstly, some correct Syntax uses, for example not using Obj & Obj, like: func(A & B,C), because objects don't have truth values on their own. And interpreting more complex sentences and where the role of sqaure brackes (such as in b and c in the Pakistan example). That helped formulate sentences and use syntax corerctly; such as knowing that we shouldn't use Doctor & Surgen but for all Surgens ==> they are also Doctors (though in this case it's really a partial set thus we need ==> not &)",#ailogic,3,4598,"['Firstly', 'some', 'correct', 'Syntax', 'uses', 'for', 'example', 'not', 'using', 'Obj', 'Obj', 'like', 'func', 'A', 'B', 'C', 'because', 'objects', ""don't"", 'have', 'truth', 'values', 'on', 'their', 'own', 'And', 'interpreting', 'more', 'complex', 'sentences', 'and', 'where', 'the', 'role', 'of', 'sqaure', 'brackes', 'such', 'as', 'in', 'b', 'and', 'c', 'in', 'the', 'Pakistan', 'example', 'That', 'helped', 'formulate', 'sentences', 'and', 'use', 'syntax', 'corerctly', 'such', 'as', 'knowing', 'that', 'we', ""shouldn't"", 'use', 'Doctor', 'Surgen', 'but', 'for', 'all', 'Surgens', 'they', 'are', 'also', 'Doctors', 'though', 'in', 'this', 'case', ""it's"", 'really', 'a', 'partial', 'set', 'thus', 'we', 'need', 'not']","['first', 'some', 'correct', 'syntax', 'use', 'for', 'exampl', 'not', 'use', 'obj', 'obj', 'like', 'func', 'a', 'b', 'c', 'becaus', 'object', ""don't"", 'have', 'truth', 'valu', 'on', 'their', 'own', 'and', 'interpret', 'more', 'complex', 'sentenc', 'and', 'where', 'the', 'role', 'of', 'sqaur', 'brack', 'such', 'as', 'in', 'b', 'and', 'c', 'in', 'the', 'pakistan', 'exampl', 'that', 'help', 'formul', 'sentenc', 'and', 'use', 'syntax', 'corerct', 'such', 'as', 'know', 'that', 'we', ""shouldn't"", 'use', 'doctor', 'surgen', 'but', 'for', 'all', 'surgen', 'they', 'are', 'also', 'doctor', 'though', 'in', 'this', 'case', 'it', 'realli', 'a', 'partial', 'set', 'thus', 'we', 'need', 'not']","['first', 'correct', 'syntax', 'exampl', 'obj', 'obj', 'like', 'func', 'b', 'c', 'becaus', 'object', 'truth', 'valu', 'interpret', 'complex', 'sentenc', 'role', 'sqaur', 'brack', 'b', 'c', 'pakistan', 'exampl', 'help', 'formul', 'sentenc', 'syntax', 'corerct', 'know', 'doctor', 'surgen', 'surgen', 'doctor', 'though', 'case', 'realli', 'partial', 'set', 'thus', 'need']",first correct syntax exampl obj obj like func b c becaus object truth valu interpret complex sentenc role sqaur brack b c pakistan exampl help formul sentenc syntax corerct know doctor surgen surgen doctor though case realli partial set thus need,ailogic,CS,CS152
160074,"(A v B v -C) ^ -(A v D) ^ ( -B v A); Logical equivalence applied: (B=>A) ==  ( -B v A)
(A v B v -C) ^ -A ^ -D ^ ( -B v A); Logical equivalence applied: De Morgan's Law: -(A v D) == (-A ^ -D)",#ailogic,4,7981,"['A', 'v', 'B', 'v', 'C', 'A', 'v', 'D', 'B', 'v', 'A', 'Logical', 'equivalence', 'applied', 'B', 'A', 'B', 'v', 'A', 'A', 'v', 'B', 'v', 'C', 'A', 'D', 'B', 'v', 'A', 'Logical', 'equivalence', 'applied', 'De', ""Morgan's"", 'Law', 'A', 'v', 'D', 'A', 'D']","['a', 'v', 'b', 'v', 'c', 'a', 'v', 'd', 'b', 'v', 'a', 'logic', 'equival', 'appli', 'b', 'a', 'b', 'v', 'a', 'a', 'v', 'b', 'v', 'c', 'a', 'd', 'b', 'v', 'a', 'logic', 'equival', 'appli', 'de', 'morgan', 'law', 'a', 'v', 'd', 'a', 'd']","['v', 'b', 'v', 'c', 'v', 'b', 'v', 'logic', 'equival', 'appli', 'b', 'b', 'v', 'v', 'b', 'v', 'c', 'b', 'v', 'logic', 'equival', 'appli', 'de', 'morgan', 'law', 'v']",v b v c v b v logic equival appli b b v v b v c b v logic equival appli de morgan law v,ailogic,CS,CS152
241811,"A) 
All s Breezy(s) => Exists r Adjacent(r,s)  ^ Pit(r )

All s ¬Breezy (s) => ¬Exists r Adjacent(r,s) ^ Pit(r )

If we combine A => B and -A => -B, we get A <==> B
-A => -B
A v -B
= -B v A
= B=> A
Then we have A=>B and B=>A

B)
All s Pit(s) => All r Adjacent(r,s) => Breezy(r )

Its incomplete b/c we could have another source of Breezy.
We need to say its only breezy from a pit.
_xb_All s Breezy(s) => => Exists r Adjacent(r,s)  ^ Pit(r )",#ailogic,4,11168,"['A', 'All', 's', 'Breezy', 's', 'Exists', 'r', 'Adjacent', 'r', 's', 'Pit', 'r', 'All', 's', 'Breezy', 's', 'Exists', 'r', 'Adjacent', 'r', 's', 'Pit', 'r', 'If', 'we', 'combine', 'A', 'B', 'and', 'A', 'B', 'we', 'get', 'A', 'B', 'A', 'B', 'A', 'v', 'B', 'B', 'v', 'A', 'B', 'A', 'Then', 'we', 'have', 'A', 'B', 'and', 'B', 'A', 'B', 'All', 's', 'Pit', 's', 'All', 'r', 'Adjacent', 'r', 's', 'Breezy', 'r', 'Its', 'incomplete', 'b', 'c', 'we', 'could', 'have', 'another', 'source', 'of', 'Breezy', 'We', 'need', 'to', 'say', 'its', 'only', 'breezy', 'from', 'a', 'pit', '_xb_All', 's', 'Breezy', 's', 'Exists', 'r', 'Adjacent', 'r', 's', 'Pit', 'r']","['a', 'all', 's', 'breezi', 's', 'exist', 'r', 'adjac', 'r', 's', 'pit', 'r', 'all', 's', 'breezi', 's', 'exist', 'r', 'adjac', 'r', 's', 'pit', 'r', 'if', 'we', 'combin', 'a', 'b', 'and', 'a', 'b', 'we', 'get', 'a', 'b', 'a', 'b', 'a', 'v', 'b', 'b', 'v', 'a', 'b', 'a', 'then', 'we', 'have', 'a', 'b', 'and', 'b', 'a', 'b', 'all', 's', 'pit', 's', 'all', 'r', 'adjac', 'r', 's', 'breezi', 'r', 'it', 'incomplet', 'b', 'c', 'we', 'could', 'have', 'anoth', 'sourc', 'of', 'breezi', 'we', 'need', 'to', 'say', 'it', 'onli', 'breezi', 'from', 'a', 'pit', '_xb_all', 's', 'breezi', 's', 'exist', 'r', 'adjac', 'r', 's', 'pit', 'r']","['breezi', 'exist', 'r', 'adjac', 'r', 'pit', 'r', 'breezi', 'exist', 'r', 'adjac', 'r', 'pit', 'r', 'combin', 'b', 'b', 'get', 'b', 'b', 'v', 'b', 'b', 'v', 'b', 'b', 'b', 'b', 'pit', 'r', 'adjac', 'r', 'breezi', 'r', 'incomplet', 'b', 'c', 'anoth', 'sourc', 'breezi', 'need', 'say', 'onli', 'breezi', 'pit', '_xb_all', 'breezi', 'exist', 'r', 'adjac', 'r', 'pit', 'r']",breezi exist r adjac r pit r breezi exist r adjac r pit r combin b b get b b v b b v b b b b pit r adjac r breezi r incomplet b c anoth sourc breezi need say onli breezi pit _xb_all breezi exist r adjac r pit r,ailogic,CS,CS152
241815,"Objects: Barber, man, person
Predicates to use barber(x) which tells if that is a barber, person(x) which tells if x is a person, man(x) which tells that x is a man and resident(y) which tells if y is a resident of the town, and noshave(x) which tells if someone shaves or not, and client(x,y) which tells if barber x attends to y

[For all people  in town]p man(p) ^ noshave(p) ^ resident(p) ==> [There exists one] q Person(q) ^ Barber(q) ^  client(q,p)",#ailogic,3,11171,"['Objects', 'Barber', 'man', 'person', 'Predicates', 'to', 'use', 'barber', 'x', 'which', 'tells', 'if', 'that', 'is', 'a', 'barber', 'person', 'x', 'which', 'tells', 'if', 'x', 'is', 'a', 'person', 'man', 'x', 'which', 'tells', 'that', 'x', 'is', 'a', 'man', 'and', 'resident', 'y', 'which', 'tells', 'if', 'y', 'is', 'a', 'resident', 'of', 'the', 'town', 'and', 'noshave', 'x', 'which', 'tells', 'if', 'someone', 'shaves', 'or', 'not', 'and', 'client', 'x', 'y', 'which', 'tells', 'if', 'barber', 'x', 'attends', 'to', 'y', 'For', 'all', 'people', 'in', 'town', 'p', 'man', 'p', 'noshave', 'p', 'resident', 'p', 'There', 'exists', 'one', 'q', 'Person', 'q', 'Barber', 'q', 'client', 'q', 'p']","['object', 'barber', 'man', 'person', 'predic', 'to', 'use', 'barber', 'x', 'which', 'tell', 'if', 'that', 'is', 'a', 'barber', 'person', 'x', 'which', 'tell', 'if', 'x', 'is', 'a', 'person', 'man', 'x', 'which', 'tell', 'that', 'x', 'is', 'a', 'man', 'and', 'resid', 'y', 'which', 'tell', 'if', 'y', 'is', 'a', 'resid', 'of', 'the', 'town', 'and', 'noshav', 'x', 'which', 'tell', 'if', 'someon', 'shave', 'or', 'not', 'and', 'client', 'x', 'y', 'which', 'tell', 'if', 'barber', 'x', 'attend', 'to', 'y', 'for', 'all', 'peopl', 'in', 'town', 'p', 'man', 'p', 'noshav', 'p', 'resid', 'p', 'there', 'exist', 'one', 'q', 'person', 'q', 'barber', 'q', 'client', 'q', 'p']","['object', 'barber', 'man', 'person', 'predic', 'barber', 'x', 'tell', 'barber', 'person', 'x', 'tell', 'x', 'person', 'man', 'x', 'tell', 'x', 'man', 'resid', 'tell', 'resid', 'town', 'noshav', 'x', 'tell', 'someon', 'shave', 'client', 'x', 'tell', 'barber', 'x', 'attend', 'peopl', 'town', 'p', 'man', 'p', 'noshav', 'p', 'resid', 'p', 'exist', 'one', 'q', 'person', 'q', 'barber', 'q', 'client', 'q', 'p']",object barber man person predic barber x tell barber person x tell x person man x tell x man resid tell resid town noshav x tell someon shave client x tell barber x attend peopl town p man p noshav p resid p exist one q person q barber q client q p,ailogic,CS,CS152
296446,"It can, because it can be rewritten as following: 

R -> (E <-> C) 
== -R v [(E ->C) ^ (C -> E)] (implication elimination)
== - R v [(-E v C) ^ (-C v E)] (implication elimination)
== (-R v -E v C) ^ (-R v -C v E) (distributivity) 

which is a conjunction of two horn clauses, (-R v -E v C)  and (-R v -C v E)",#ailogic,4,13914,"['It', 'can', 'because', 'it', 'can', 'be', 'rewritten', 'as', 'following', 'R', 'E', 'C', 'R', 'v', 'E', 'C', 'C', 'E', 'implication', 'elimination', 'R', 'v', 'E', 'v', 'C', 'C', 'v', 'E', 'implication', 'elimination', 'R', 'v', 'E', 'v', 'C', 'R', 'v', 'C', 'v', 'E', 'distributivity', 'which', 'is', 'a', 'conjunction', 'of', 'two', 'horn', 'clauses', 'R', 'v', 'E', 'v', 'C', 'and', 'R', 'v', 'C', 'v', 'E']","['it', 'can', 'becaus', 'it', 'can', 'be', 'rewritten', 'as', 'follow', 'r', 'e', 'c', 'r', 'v', 'e', 'c', 'c', 'e', 'implic', 'elimin', 'r', 'v', 'e', 'v', 'c', 'c', 'v', 'e', 'implic', 'elimin', 'r', 'v', 'e', 'v', 'c', 'r', 'v', 'c', 'v', 'e', 'distribut', 'which', 'is', 'a', 'conjunct', 'of', 'two', 'horn', 'claus', 'r', 'v', 'e', 'v', 'c', 'and', 'r', 'v', 'c', 'v', 'e']","['becaus', 'rewritten', 'follow', 'r', 'e', 'c', 'r', 'v', 'e', 'c', 'c', 'e', 'implic', 'elimin', 'r', 'v', 'e', 'v', 'c', 'c', 'v', 'e', 'implic', 'elimin', 'r', 'v', 'e', 'v', 'c', 'r', 'v', 'c', 'v', 'e', 'distribut', 'conjunct', 'two', 'horn', 'claus', 'r', 'v', 'e', 'v', 'c', 'r', 'v', 'c', 'v', 'e']",becaus rewritten follow r e c r v e c c e implic elimin r v e v c c v e implic elimin r v e v c r v c v e distribut conjunct two horn claus r v e v c r v c v e,ailogic,CS,CS152
319267,"For a problem to have a dynamic programming solution, it must have overlapping subproblems and a optimal substructure. For a greedy algorithm to work and provide the best outcome, it must be able to be divided into subproblems and attempting to solve each subproblem should allow us to solve the entire problem in the best possible way. The similarities is that they have subproblems that can be solved individually. The difference is that they do not necessarily overlap and do not necessarily have an optimal substructure (though in some cases, it is == simply solving/maximizing each subproblem).",#greedy,3,15150,"['For', 'a', 'problem', 'to', 'have', 'a', 'dynamic', 'programming', 'solution', 'it', 'must', 'have', 'overlapping', 'subproblems', 'and', 'a', 'optimal', 'substructure', 'For', 'a', 'greedy', 'algorithm', 'to', 'work', 'and', 'provide', 'the', 'best', 'outcome', 'it', 'must', 'be', 'able', 'to', 'be', 'divided', 'into', 'subproblems', 'and', 'attempting', 'to', 'solve', 'each', 'subproblem', 'should', 'allow', 'us', 'to', 'solve', 'the', 'entire', 'problem', 'in', 'the', 'best', 'possible', 'way', 'The', 'similarities', 'is', 'that', 'they', 'have', 'subproblems', 'that', 'can', 'be', 'solved', 'individually', 'The', 'difference', 'is', 'that', 'they', 'do', 'not', 'necessarily', 'overlap', 'and', 'do', 'not', 'necessarily', 'have', 'an', 'optimal', 'substructure', 'though', 'in', 'some', 'cases', 'it', 'is', 'simply', 'solving', 'maximizing', 'each', 'subproblem']","['for', 'a', 'problem', 'to', 'have', 'a', 'dynam', 'program', 'solut', 'it', 'must', 'have', 'overlap', 'subproblem', 'and', 'a', 'optim', 'substructur', 'for', 'a', 'greedi', 'algorithm', 'to', 'work', 'and', 'provid', 'the', 'best', 'outcom', 'it', 'must', 'be', 'abl', 'to', 'be', 'divid', 'into', 'subproblem', 'and', 'attempt', 'to', 'solv', 'each', 'subproblem', 'should', 'allow', 'us', 'to', 'solv', 'the', 'entir', 'problem', 'in', 'the', 'best', 'possibl', 'way', 'the', 'similar', 'is', 'that', 'they', 'have', 'subproblem', 'that', 'can', 'be', 'solv', 'individu', 'the', 'differ', 'is', 'that', 'they', 'do', 'not', 'necessarili', 'overlap', 'and', 'do', 'not', 'necessarili', 'have', 'an', 'optim', 'substructur', 'though', 'in', 'some', 'case', 'it', 'is', 'simpli', 'solv', 'maxim', 'each', 'subproblem']","['problem', 'dynam', 'program', 'solut', 'must', 'overlap', 'subproblem', 'optim', 'substructur', 'greedi', 'algorithm', 'work', 'provid', 'best', 'outcom', 'must', 'abl', 'divid', 'subproblem', 'attempt', 'solv', 'subproblem', 'allow', 'us', 'solv', 'entir', 'problem', 'best', 'possibl', 'way', 'similar', 'subproblem', 'solv', 'individu', 'differ', 'necessarili', 'overlap', 'necessarili', 'optim', 'substructur', 'though', 'case', 'simpli', 'solv', 'maxim', 'subproblem']",problem dynam program solut must overlap subproblem optim substructur greedi algorithm work provid best outcom must abl divid subproblem attempt solv subproblem allow us solv entir problem best possibl way similar subproblem solv individu differ necessarili overlap necessarili optim substructur though case simpli solv maxim subproblem,greedyalgorithms,CS,CS110
126403,"while (new_memory!=current_memory).all():
	if flag==True:
		for i in range(len(new_memory)):
			current_memory[i]=new_memory[i]
	if flag==False:
		new_memory = np.array([. for i in range(I)])
		for i in range(I):
			if i!=corrupt:
				new_memory[i]+=memory[mem][i]
			else:
				if memory[mem][i]==.:
					new_memory[i]+=-.
				else:
					new_memory[i]+=.
	for i in range(I):
		new_memory[i]=.
		for j in range(I):
			new_memory[i] += new_memory[j]*weight_matrix[i][j]
		if new_memory[i]>=:
			new_memory[i] = .
		else:
			new_memory[i] = -.
				flag=True
			if (new_memory==memory[mem]",#neuralnetworks,4,5933,"['while', 'new_memory', 'current_memory', 'all', 'if', 'flag', 'True', 'for', 'i', 'in', 'range', 'len', 'new_memory', 'current_memory', 'i', 'new_memory', 'i', 'if', 'flag', 'False', 'new_memory', 'np', 'array', 'for', 'i', 'in', 'range', 'I', 'for', 'i', 'in', 'range', 'I', 'if', 'i', 'corrupt', 'new_memory', 'i', 'memory', 'mem', 'i', 'else', 'if', 'memory', 'mem', 'i', 'new_memory', 'i', 'else', 'new_memory', 'i', 'for', 'i', 'in', 'range', 'I', 'new_memory', 'i', 'for', 'j', 'in', 'range', 'I', 'new_memory', 'i', 'new_memory', 'j', 'weight_matrix', 'i', 'j', 'if', 'new_memory', 'i', 'new_memory', 'i', 'else', 'new_memory', 'i', 'flag', 'True', 'if', 'new_memory', 'memory', 'mem']","['while', 'new_memori', 'current_memori', 'all', 'if', 'flag', 'true', 'for', 'i', 'in', 'rang', 'len', 'new_memori', 'current_memori', 'i', 'new_memori', 'i', 'if', 'flag', 'fals', 'new_memori', 'np', 'array', 'for', 'i', 'in', 'rang', 'i', 'for', 'i', 'in', 'rang', 'i', 'if', 'i', 'corrupt', 'new_memori', 'i', 'memori', 'mem', 'i', 'els', 'if', 'memori', 'mem', 'i', 'new_memori', 'i', 'els', 'new_memori', 'i', 'for', 'i', 'in', 'rang', 'i', 'new_memori', 'i', 'for', 'j', 'in', 'rang', 'i', 'new_memori', 'i', 'new_memori', 'j', 'weight_matrix', 'i', 'j', 'if', 'new_memori', 'i', 'new_memori', 'i', 'els', 'new_memori', 'i', 'flag', 'true', 'if', 'new_memori', 'memori', 'mem']","['new_memori', 'current_memori', 'flag', 'true', 'rang', 'len', 'new_memori', 'current_memori', 'new_memori', 'flag', 'fals', 'new_memori', 'np', 'array', 'rang', 'rang', 'corrupt', 'new_memori', 'memori', 'mem', 'els', 'memori', 'mem', 'new_memori', 'els', 'new_memori', 'rang', 'new_memori', 'j', 'rang', 'new_memori', 'new_memori', 'j', 'weight_matrix', 'j', 'new_memori', 'new_memori', 'els', 'new_memori', 'flag', 'true', 'new_memori', 'memori', 'mem']",new_memori current_memori flag true rang len new_memori current_memori new_memori flag fals new_memori np array rang rang corrupt new_memori memori mem els memori mem new_memori els new_memori rang new_memori j rang new_memori new_memori j weight_matrix j new_memori new_memori els new_memori flag true new_memori memori mem,neuralnetworks,CS,CS156
126403,"n = 
ns = 
m = 

def theta(a):
    if a >= :
        return .
    else:
        return -.

def update(d): #x.shape = ()
    for i in range(n):
        if d[i] == : d[i] == -
    
    a = np.zeros(n)
    x = np.zeros(n)
    
    for i in range(n):
        for j in range(n):
            a[i] += w[i][j] * d[j]
        x[i] = theta(a[i])
    
    return x

#Since I got extra space

def learn(x):
    for i in range(n):
        if x[i] == : x[i] = -
    
    for i in range(n):
        for j in range(n):
            w[i][j] += x[i] * x[j]",#neuralnetworks,4,5933,"['n', 'ns', 'm', 'def', 'theta', 'a', 'if', 'a', 'return', 'else', 'return', 'def', 'update', 'd', 'x', 'shape', 'for', 'i', 'in', 'range', 'n', 'if', 'd', 'i', 'd', 'i', 'a', 'np', 'zeros', 'n', 'x', 'np', 'zeros', 'n', 'for', 'i', 'in', 'range', 'n', 'for', 'j', 'in', 'range', 'n', 'a', 'i', 'w', 'i', 'j', 'd', 'j', 'x', 'i', 'theta', 'a', 'i', 'return', 'x', 'Since', 'I', 'got', 'extra', 'space', 'def', 'learn', 'x', 'for', 'i', 'in', 'range', 'n', 'if', 'x', 'i', 'x', 'i', 'for', 'i', 'in', 'range', 'n', 'for', 'j', 'in', 'range', 'n', 'w', 'i', 'j', 'x', 'i', 'x', 'j']","['n', 'ns', 'm', 'def', 'theta', 'a', 'if', 'a', 'return', 'els', 'return', 'def', 'updat', 'd', 'x', 'shape', 'for', 'i', 'in', 'rang', 'n', 'if', 'd', 'i', 'd', 'i', 'a', 'np', 'zero', 'n', 'x', 'np', 'zero', 'n', 'for', 'i', 'in', 'rang', 'n', 'for', 'j', 'in', 'rang', 'n', 'a', 'i', 'w', 'i', 'j', 'd', 'j', 'x', 'i', 'theta', 'a', 'i', 'return', 'x', 'sinc', 'i', 'got', 'extra', 'space', 'def', 'learn', 'x', 'for', 'i', 'in', 'rang', 'n', 'if', 'x', 'i', 'x', 'i', 'for', 'i', 'in', 'rang', 'n', 'for', 'j', 'in', 'rang', 'n', 'w', 'i', 'j', 'x', 'i', 'x', 'j']","['n', 'ns', 'def', 'theta', 'return', 'els', 'return', 'def', 'updat', 'x', 'shape', 'rang', 'n', 'np', 'zero', 'n', 'x', 'np', 'zero', 'n', 'rang', 'n', 'j', 'rang', 'n', 'w', 'j', 'j', 'x', 'theta', 'return', 'x', 'sinc', 'got', 'extra', 'space', 'def', 'learn', 'x', 'rang', 'n', 'x', 'x', 'rang', 'n', 'j', 'rang', 'n', 'w', 'j', 'x', 'x', 'j']",n ns def theta return els return def updat x shape rang n np zero n x np zero n rang n j rang n w j j x theta return x sinc got extra space def learn x rang n x x rang n j rang n w j x x j,neuralnetworks,CS,CS156
126403,"def asynchronous_recall(weights, memory, 
                       activation_func=binary_activation, 
                       t_max=T_MAX,
                       debug=False):
    x_prev = memory
    for t in range(t_max):
        x = x_prev.copy()
        order = np.asarray(range(weights.shape[]))
        np.random.shuffle(order)
        
        for i in order:
            a_i = weights[i,:].dot(x)
            x[i] = activation_func(a_i)
            
        if np.all(x_prev == x):
            return x
        
        x_prev = x

    raise ValueError('Failed to converge')",#neuralnetworks,4,5933,"['def', 'asynchronous_recall', 'weights', 'memory', 'activation_func', 'binary_activation', 't_max', 'T_MAX', 'debug', 'False', 'x_prev', 'memory', 'for', 't', 'in', 'range', 't_max', 'x', 'x_prev', 'copy', 'order', 'np', 'asarray', 'range', 'weights', 'shape', 'np', 'random', 'shuffle', 'order', 'for', 'i', 'in', 'order', 'a_i', 'weights', 'i', 'dot', 'x', 'x', 'i', 'activation_func', 'a_i', 'if', 'np', 'all', 'x_prev', 'x', 'return', 'x', 'x_prev', 'x', 'raise', 'ValueError', ""'Failed"", 'to', ""converge'""]","['def', 'asynchronous_recal', 'weight', 'memori', 'activation_func', 'binary_activ', 't_max', 't_max', 'debug', 'fals', 'x_prev', 'memori', 'for', 't', 'in', 'rang', 't_max', 'x', 'x_prev', 'copi', 'order', 'np', 'asarray', 'rang', 'weight', 'shape', 'np', 'random', 'shuffl', 'order', 'for', 'i', 'in', 'order', 'a_i', 'weight', 'i', 'dot', 'x', 'x', 'i', 'activation_func', 'a_i', 'if', 'np', 'all', 'x_prev', 'x', 'return', 'x', 'x_prev', 'x', 'rais', 'valueerror', 'fail', 'to', 'converg']","['def', 'asynchronous_recal', 'weight', 'memori', 'activation_func', 'binary_activ', 't_max', 't_max', 'debug', 'fals', 'x_prev', 'memori', 'rang', 't_max', 'x', 'x_prev', 'copi', 'order', 'np', 'asarray', 'rang', 'weight', 'shape', 'np', 'random', 'shuffl', 'order', 'order', 'a_i', 'weight', 'dot', 'x', 'x', 'activation_func', 'a_i', 'np', 'x_prev', 'x', 'return', 'x', 'x_prev', 'x', 'rais', 'valueerror', 'fail', 'converg']",def asynchronous_recal weight memori activation_func binary_activ t_max t_max debug fals x_prev memori rang t_max x x_prev copi order np asarray rang weight shape np random shuffl order order a_i weight dot x x activation_func a_i np x_prev x return x x_prev x rais valueerror fail converg,neuralnetworks,CS,CS156
140967,"The number of possible situations would be bottlenecked by the totalistic definition. In a two-state CA system with a radius of , the neighborhood contains  cells. Summing the cells destroys sequential information, and we are left with  possible situations (sum == , , , ..., ) for each neighborhood, instead of ^.

This is a linear reduction of the original rule space by .*^ times because the other numbers are unchanged.",#caanalysis,4,6984,"['The', 'number', 'of', 'possible', 'situations', 'would', 'be', 'bottlenecked', 'by', 'the', 'totalistic', 'definition', 'In', 'a', 'two', 'state', 'CA', 'system', 'with', 'a', 'radius', 'of', 'the', 'neighborhood', 'contains', 'cells', 'Summing', 'the', 'cells', 'destroys', 'sequential', 'information', 'and', 'we', 'are', 'left', 'with', 'possible', 'situations', 'sum', 'for', 'each', 'neighborhood', 'instead', 'of', 'This', 'is', 'a', 'linear', 'reduction', 'of', 'the', 'original', 'rule', 'space', 'by', 'times', 'because', 'the', 'other', 'numbers', 'are', 'unchanged']","['the', 'number', 'of', 'possibl', 'situat', 'would', 'be', 'bottleneck', 'by', 'the', 'totalist', 'definit', 'in', 'a', 'two', 'state', 'ca', 'system', 'with', 'a', 'radius', 'of', 'the', 'neighborhood', 'contain', 'cell', 'sum', 'the', 'cell', 'destroy', 'sequenti', 'inform', 'and', 'we', 'are', 'left', 'with', 'possibl', 'situat', 'sum', 'for', 'each', 'neighborhood', 'instead', 'of', 'this', 'is', 'a', 'linear', 'reduct', 'of', 'the', 'origin', 'rule', 'space', 'by', 'time', 'becaus', 'the', 'other', 'number', 'are', 'unchang']","['number', 'possibl', 'situat', 'bottleneck', 'totalist', 'definit', 'two', 'state', 'ca', 'system', 'radius', 'neighborhood', 'contain', 'cell', 'sum', 'cell', 'destroy', 'sequenti', 'inform', 'left', 'possibl', 'situat', 'sum', 'neighborhood', 'instead', 'linear', 'reduct', 'origin', 'rule', 'space', 'time', 'becaus', 'number', 'unchang']",number possibl situat bottleneck totalist definit two state ca system radius neighborhood contain cell sum cell destroy sequenti inform left possibl situat sum neighborhood instead linear reduct origin rule space time becaus number unchang,caanalysis,CS,CS166
143021,"import time

class ClockIterator:

    def __init__(self):
       pass

    def __iter__(self):

        self.hour = 
        self.min = 
        self.sec = 

        return self

    def next(self):
        time.sleep()
        
        self.sec +=  

        if self.sec %  == :
            self.min += 

            if self.min %  ==  :
                self.hour += 

        return (""{}:{}:{}"").format(self.hour %  , self.min %  , self.sec % )



for t in ClockIterator() :
    print t",#separationofconcerns,4,7101,"['import', 'time', 'class', 'ClockIterator', 'def', '__init__', 'self', 'pass', 'def', '__iter__', 'self', 'self', 'hour', 'self', 'min', 'self', 'sec', 'return', 'self', 'def', 'next', 'self', 'time', 'sleep', 'self', 'sec', 'if', 'self', 'sec', 'self', 'min', 'if', 'self', 'min', 'self', 'hour', 'return', 'format', 'self', 'hour', 'self', 'min', 'self', 'sec', 'for', 't', 'in', 'ClockIterator', 'print', 't']","['import', 'time', 'class', 'clockiter', 'def', '__init__', 'self', 'pass', 'def', '__iter__', 'self', 'self', 'hour', 'self', 'min', 'self', 'sec', 'return', 'self', 'def', 'next', 'self', 'time', 'sleep', 'self', 'sec', 'if', 'self', 'sec', 'self', 'min', 'if', 'self', 'min', 'self', 'hour', 'return', 'format', 'self', 'hour', 'self', 'min', 'self', 'sec', 'for', 't', 'in', 'clockiter', 'print', 't']","['import', 'time', 'class', 'clockiter', 'def', '__init__', 'self', 'pass', 'def', '__iter__', 'self', 'self', 'hour', 'self', 'min', 'self', 'sec', 'return', 'self', 'def', 'next', 'self', 'time', 'sleep', 'self', 'sec', 'self', 'sec', 'self', 'min', 'self', 'min', 'self', 'hour', 'return', 'format', 'self', 'hour', 'self', 'min', 'self', 'sec', 'clockiter', 'print']",import time class clockiter def __init__ self pass def __iter__ self self hour self min self sec return self def next self time sleep self sec self sec self min self min self hour return format self hour self min self sec clockiter print,separationofconcerns,CS,CS162
143021,"class ClockIterator:
    def __init__(self):
        self.hours = 
        self.minutes = 
    
    def __iter__(self):
        return self
    
    def next(self):
        self.minutes += 
        if self.minutes == :
            self.minutes = 
            self.hours += 
        if self.hours == :
            self.minutes = 
            self.hours = 
        return str(self.hours)+"":""+str(self.minutes)
clock = ClockIterator()
for time in clock:
    print (time)",#separationofconcerns,4,7101,"['class', 'ClockIterator', 'def', '__init__', 'self', 'self', 'hours', 'self', 'minutes', 'def', '__iter__', 'self', 'return', 'self', 'def', 'next', 'self', 'self', 'minutes', 'if', 'self', 'minutes', 'self', 'minutes', 'self', 'hours', 'if', 'self', 'hours', 'self', 'minutes', 'self', 'hours', 'return', 'str', 'self', 'hours', 'str', 'self', 'minutes', 'clock', 'ClockIterator', 'for', 'time', 'in', 'clock', 'print', 'time']","['class', 'clockiter', 'def', '__init__', 'self', 'self', 'hour', 'self', 'minut', 'def', '__iter__', 'self', 'return', 'self', 'def', 'next', 'self', 'self', 'minut', 'if', 'self', 'minut', 'self', 'minut', 'self', 'hour', 'if', 'self', 'hour', 'self', 'minut', 'self', 'hour', 'return', 'str', 'self', 'hour', 'str', 'self', 'minut', 'clock', 'clockiter', 'for', 'time', 'in', 'clock', 'print', 'time']","['class', 'clockiter', 'def', '__init__', 'self', 'self', 'hour', 'self', 'minut', 'def', '__iter__', 'self', 'return', 'self', 'def', 'next', 'self', 'self', 'minut', 'self', 'minut', 'self', 'minut', 'self', 'hour', 'self', 'hour', 'self', 'minut', 'self', 'hour', 'return', 'str', 'self', 'hour', 'str', 'self', 'minut', 'clock', 'clockiter', 'time', 'clock', 'print', 'time']",class clockiter def __init__ self self hour self minut def __iter__ self return self def next self self minut self minut self minut self hour self hour self minut self hour return str self hour str self minut clock clockiter time clock print time,separationofconcerns,CS,CS162
143021,"class ClockIterator:

    def __iter__(self):
        self.hour = 
        self.minute = 
        return self

    def __next__(self):
        hour = '' + str(self.hour)
        minute = '' + str(self.minute)
        twenty_four = hour[-:] + ':' + minute[-:]
        if self.minute == :
            if self.hour == :
                self.minute = self.hour = 
            else:
                self.minute = 
                self.hour += 
        else:
            self.minute += 
        return twenty_four


clock = ClockIterator()
for time in clock:
    print(time)",#separationofconcerns,4,7101,"['class', 'ClockIterator', 'def', '__iter__', 'self', 'self', 'hour', 'self', 'minute', 'return', 'self', 'def', '__next__', 'self', 'hour', ""''"", 'str', 'self', 'hour', 'minute', ""''"", 'str', 'self', 'minute', 'twenty_four', 'hour', ""'"", ""'"", 'minute', 'if', 'self', 'minute', 'if', 'self', 'hour', 'self', 'minute', 'self', 'hour', 'else', 'self', 'minute', 'self', 'hour', 'else', 'self', 'minute', 'return', 'twenty_four', 'clock', 'ClockIterator', 'for', 'time', 'in', 'clock', 'print', 'time']","['class', 'clockiter', 'def', '__iter__', 'self', 'self', 'hour', 'self', 'minut', 'return', 'self', 'def', '__next__', 'self', 'hour', ""''"", 'str', 'self', 'hour', 'minut', ""''"", 'str', 'self', 'minut', 'twenty_four', 'hour', ""'"", ""'"", 'minut', 'if', 'self', 'minut', 'if', 'self', 'hour', 'self', 'minut', 'self', 'hour', 'els', 'self', 'minut', 'self', 'hour', 'els', 'self', 'minut', 'return', 'twenty_four', 'clock', 'clockiter', 'for', 'time', 'in', 'clock', 'print', 'time']","['class', 'clockiter', 'def', '__iter__', 'self', 'self', 'hour', 'self', 'minut', 'return', 'self', 'def', '__next__', 'self', 'hour', ""''"", 'str', 'self', 'hour', 'minut', ""''"", 'str', 'self', 'minut', 'twenty_four', 'hour', ""'"", ""'"", 'minut', 'self', 'minut', 'self', 'hour', 'self', 'minut', 'self', 'hour', 'els', 'self', 'minut', 'self', 'hour', 'els', 'self', 'minut', 'return', 'twenty_four', 'clock', 'clockiter', 'time', 'clock', 'print', 'time']",class clockiter def __iter__ self self hour self minut return self def __next__ self hour '' str self hour minut '' str self minut twenty_four hour ' ' minut self minut self hour self minut self hour els self minut self hour els self minut return twenty_four clock clockiter time clock print time,separationofconcerns,CS,CS162
143021,"class ClockIterator():
    def __init__(self):
        self.hrs = 
        self.min = 
    def __iter__(self):
        return self

    def next(self):
        if self.min == :
            if self.hrs == :
                self.hrs = 
            self.hrs += 
            self.min = 
        else:
            self.min += 

        return str(self.hrs) + "":"" + str(self.min)

clock = ClockIterator()
for time in clock:
    print(time)",#separationofconcerns,4,7101,"['class', 'ClockIterator', 'def', '__init__', 'self', 'self', 'hrs', 'self', 'min', 'def', '__iter__', 'self', 'return', 'self', 'def', 'next', 'self', 'if', 'self', 'min', 'if', 'self', 'hrs', 'self', 'hrs', 'self', 'hrs', 'self', 'min', 'else', 'self', 'min', 'return', 'str', 'self', 'hrs', 'str', 'self', 'min', 'clock', 'ClockIterator', 'for', 'time', 'in', 'clock', 'print', 'time']","['class', 'clockiter', 'def', '__init__', 'self', 'self', 'hrs', 'self', 'min', 'def', '__iter__', 'self', 'return', 'self', 'def', 'next', 'self', 'if', 'self', 'min', 'if', 'self', 'hrs', 'self', 'hrs', 'self', 'hrs', 'self', 'min', 'els', 'self', 'min', 'return', 'str', 'self', 'hrs', 'str', 'self', 'min', 'clock', 'clockiter', 'for', 'time', 'in', 'clock', 'print', 'time']","['class', 'clockiter', 'def', '__init__', 'self', 'self', 'hrs', 'self', 'min', 'def', '__iter__', 'self', 'return', 'self', 'def', 'next', 'self', 'self', 'min', 'self', 'hrs', 'self', 'hrs', 'self', 'hrs', 'self', 'min', 'els', 'self', 'min', 'return', 'str', 'self', 'hrs', 'str', 'self', 'min', 'clock', 'clockiter', 'time', 'clock', 'print', 'time']",class clockiter def __init__ self self hrs self min def __iter__ self return self def next self self min self hrs self hrs self hrs self min els self min return str self hrs str self min clock clockiter time clock print time,separationofconcerns,CS,CS162
143021,"class ClockIterator():
	def __init__(self, curr_time = [, ]):
		self.curr_time =curr_time

	def __iter__(self):
		self.min = 
		self.hour = 
		self.max = 
		self.iters = 
		return self

	def next(self):
		self.iters += 
		if self.iters >= self.max: 
			raise StopIteration
		self.min += 
		if self.min == :
			self.hour += 
			self.min = 
			if self.hour == :
				self.hour = 

		return '%d'%self.hour + ':'+'%d'%self.min",#separationofconcerns,4,7101,"['class', 'ClockIterator', 'def', '__init__', 'self', 'curr_time', 'self', 'curr_time', 'curr_time', 'def', '__iter__', 'self', 'self', 'min', 'self', 'hour', 'self', 'max', 'self', 'iters', 'return', 'self', 'def', 'next', 'self', 'self', 'iters', 'if', 'self', 'iters', 'self', 'max', 'raise', 'StopIteration', 'self', 'min', 'if', 'self', 'min', 'self', 'hour', 'self', 'min', 'if', 'self', 'hour', 'self', 'hour', 'return', ""'"", ""d'"", 'self', 'hour', ""'"", ""'"", ""'"", ""d'"", 'self', 'min']","['class', 'clockiter', 'def', '__init__', 'self', 'curr_tim', 'self', 'curr_tim', 'curr_tim', 'def', '__iter__', 'self', 'self', 'min', 'self', 'hour', 'self', 'max', 'self', 'iter', 'return', 'self', 'def', 'next', 'self', 'self', 'iter', 'if', 'self', 'iter', 'self', 'max', 'rais', 'stopiter', 'self', 'min', 'if', 'self', 'min', 'self', 'hour', 'self', 'min', 'if', 'self', 'hour', 'self', 'hour', 'return', ""'"", ""d'"", 'self', 'hour', ""'"", ""'"", ""'"", ""d'"", 'self', 'min']","['class', 'clockiter', 'def', '__init__', 'self', 'curr_tim', 'self', 'curr_tim', 'curr_tim', 'def', '__iter__', 'self', 'self', 'min', 'self', 'hour', 'self', 'max', 'self', 'iter', 'return', 'self', 'def', 'next', 'self', 'self', 'iter', 'self', 'iter', 'self', 'max', 'rais', 'stopiter', 'self', 'min', 'self', 'min', 'self', 'hour', 'self', 'min', 'self', 'hour', 'self', 'hour', 'return', ""'"", ""d'"", 'self', 'hour', ""'"", ""'"", ""'"", ""d'"", 'self', 'min']",class clockiter def __init__ self curr_tim self curr_tim curr_tim def __iter__ self self min self hour self max self iter return self def next self self iter self iter self max rais stopiter self min self min self hour self min self hour self hour return ' d' self hour ' ' ' d' self min,separationofconcerns,CS,CS162
143025,"import datetime

class ClockIterator():
    def __init__(self):
        self.values = []
    

    def __iter__(self):

        return self


    def __next__(self):
        if len(self.values) < :
            self.values.append(datetime.timedelta(,))
        else:
            self.values = [self.values[-] + datetime.timedelta(,)]
            return self.values[-]

    def __str__(self):
        return ""Testing""

clock = ClockIterator()
counter = 
for time in clock:
    print(time)
    counter += 
    if counter == :
        break",#separationofconcerns,3,7102,"['import', 'datetime', 'class', 'ClockIterator', 'def', '__init__', 'self', 'self', 'values', 'def', '__iter__', 'self', 'return', 'self', 'def', '__next__', 'self', 'if', 'len', 'self', 'values', 'self', 'values', 'append', 'datetime', 'timedelta', 'else', 'self', 'values', 'self', 'values', 'datetime', 'timedelta', 'return', 'self', 'values', 'def', '__str__', 'self', 'return', 'Testing', 'clock', 'ClockIterator', 'counter', 'for', 'time', 'in', 'clock', 'print', 'time', 'counter', 'if', 'counter', 'break']","['import', 'datetim', 'class', 'clockiter', 'def', '__init__', 'self', 'self', 'valu', 'def', '__iter__', 'self', 'return', 'self', 'def', '__next__', 'self', 'if', 'len', 'self', 'valu', 'self', 'valu', 'append', 'datetim', 'timedelta', 'els', 'self', 'valu', 'self', 'valu', 'datetim', 'timedelta', 'return', 'self', 'valu', 'def', '__str__', 'self', 'return', 'test', 'clock', 'clockiter', 'counter', 'for', 'time', 'in', 'clock', 'print', 'time', 'counter', 'if', 'counter', 'break']","['import', 'datetim', 'class', 'clockiter', 'def', '__init__', 'self', 'self', 'valu', 'def', '__iter__', 'self', 'return', 'self', 'def', '__next__', 'self', 'len', 'self', 'valu', 'self', 'valu', 'append', 'datetim', 'timedelta', 'els', 'self', 'valu', 'self', 'valu', 'datetim', 'timedelta', 'return', 'self', 'valu', 'def', '__str__', 'self', 'return', 'test', 'clock', 'clockiter', 'counter', 'time', 'clock', 'print', 'time', 'counter', 'counter', 'break']",import datetim class clockiter def __init__ self self valu def __iter__ self return self def __next__ self len self valu self valu append datetim timedelta els self valu self valu datetim timedelta return self valu def __str__ self return test clock clockiter counter time clock print time counter counter break,separationofconcerns,CS,CS162
143025,"class ClockIterator:
    
    def __init__(self):
        pass
        
    def __iter__(self):
        self.hours = 
        self.minutes = 
        return self

    def __next__(self):
        hours_str = f'{self.hours}' if self.hours <  else f'{self.hours}'
        minutes_str = f'{self.minutes}' if self.minutes <  else f'{self.minutes}'
        time_str = f'{hours_str}:{minutes_str}'
        if self.minutes == : 
            self.minutes = 
            self.hours += 
        else: self.minutes += 
        if self.hours == : self.hours = 
        return time_str",#separationofconcerns,4,7102,"['class', 'ClockIterator', 'def', '__init__', 'self', 'pass', 'def', '__iter__', 'self', 'self', 'hours', 'self', 'minutes', 'return', 'self', 'def', '__next__', 'self', 'hours_str', ""f'"", 'self', 'hours', ""'"", 'if', 'self', 'hours', 'else', ""f'"", 'self', 'hours', ""'"", 'minutes_str', ""f'"", 'self', 'minutes', ""'"", 'if', 'self', 'minutes', 'else', ""f'"", 'self', 'minutes', ""'"", 'time_str', ""f'"", 'hours_str', 'minutes_str', ""'"", 'if', 'self', 'minutes', 'self', 'minutes', 'self', 'hours', 'else', 'self', 'minutes', 'if', 'self', 'hours', 'self', 'hours', 'return', 'time_str']","['class', 'clockiter', 'def', '__init__', 'self', 'pass', 'def', '__iter__', 'self', 'self', 'hour', 'self', 'minut', 'return', 'self', 'def', '__next__', 'self', 'hours_str', ""f'"", 'self', 'hour', ""'"", 'if', 'self', 'hour', 'els', ""f'"", 'self', 'hour', ""'"", 'minutes_str', ""f'"", 'self', 'minut', ""'"", 'if', 'self', 'minut', 'els', ""f'"", 'self', 'minut', ""'"", 'time_str', ""f'"", 'hours_str', 'minutes_str', ""'"", 'if', 'self', 'minut', 'self', 'minut', 'self', 'hour', 'els', 'self', 'minut', 'if', 'self', 'hour', 'self', 'hour', 'return', 'time_str']","['class', 'clockiter', 'def', '__init__', 'self', 'pass', 'def', '__iter__', 'self', 'self', 'hour', 'self', 'minut', 'return', 'self', 'def', '__next__', 'self', 'hours_str', ""f'"", 'self', 'hour', ""'"", 'self', 'hour', 'els', ""f'"", 'self', 'hour', ""'"", 'minutes_str', ""f'"", 'self', 'minut', ""'"", 'self', 'minut', 'els', ""f'"", 'self', 'minut', ""'"", 'time_str', ""f'"", 'hours_str', 'minutes_str', ""'"", 'self', 'minut', 'self', 'minut', 'self', 'hour', 'els', 'self', 'minut', 'self', 'hour', 'self', 'hour', 'return', 'time_str']",class clockiter def __init__ self pass def __iter__ self self hour self minut return self def __next__ self hours_str f' self hour ' self hour els f' self hour ' minutes_str f' self minut ' self minut els f' self minut ' time_str f' hours_str minutes_str ' self minut self minut self hour els self minut self hour self hour return time_str,separationofconcerns,CS,CS162
143025,"class ClockIterator(object):
    '''iterator that yields time'''

    def __iter__(self):
        self.hour = 
        self.min = 
        return self

    def __next__(self):
        self.min += 
        if self.min == :
        	self.min = 
        	self.hour += 
        	if self.hour == :
        		self.hour = 
        		raise StopIteration

        return ""{:d}:{:d}"".format(self.hour, self.min)

clock = ClockIterator()
for time in clock:
    print(time)",#separationofconcerns,4,7102,"['class', 'ClockIterator', 'object', ""'''iterator"", 'that', 'yields', ""time'''"", 'def', '__iter__', 'self', 'self', 'hour', 'self', 'min', 'return', 'self', 'def', '__next__', 'self', 'self', 'min', 'if', 'self', 'min', 'self', 'min', 'self', 'hour', 'if', 'self', 'hour', 'self', 'hour', 'raise', 'StopIteration', 'return', 'd', 'd', 'format', 'self', 'hour', 'self', 'min', 'clock', 'ClockIterator', 'for', 'time', 'in', 'clock', 'print', 'time']","['class', 'clockiter', 'object', ""''iter"", 'that', 'yield', ""time''"", 'def', '__iter__', 'self', 'self', 'hour', 'self', 'min', 'return', 'self', 'def', '__next__', 'self', 'self', 'min', 'if', 'self', 'min', 'self', 'min', 'self', 'hour', 'if', 'self', 'hour', 'self', 'hour', 'rais', 'stopiter', 'return', 'd', 'd', 'format', 'self', 'hour', 'self', 'min', 'clock', 'clockiter', 'for', 'time', 'in', 'clock', 'print', 'time']","['class', 'clockiter', 'object', ""''iter"", 'yield', ""time''"", 'def', '__iter__', 'self', 'self', 'hour', 'self', 'min', 'return', 'self', 'def', '__next__', 'self', 'self', 'min', 'self', 'min', 'self', 'min', 'self', 'hour', 'self', 'hour', 'self', 'hour', 'rais', 'stopiter', 'return', 'format', 'self', 'hour', 'self', 'min', 'clock', 'clockiter', 'time', 'clock', 'print', 'time']",class clockiter object ''iter yield time'' def __iter__ self self hour self min return self def __next__ self self min self min self min self hour self hour self hour rais stopiter return format self hour self min clock clockiter time clock print time,separationofconcerns,CS,CS162
143025,"class ClockIterator:

    def __init__(self):
        self.chour = 
        self.cminute = 

    def __iter__(self):
        return self

    def __next__(self):
        if self.chour < :
            shour = """" + str(self.chour)
        else:
            shour = str(self.chour)

        if self.cminute < :
            sminute = """" + str(self.cminute)
        else:
            sminute = str(self.cminute)

        #update:
        self.cminute += 
        if self.cminute == :
            self.cminute = 
            self.chour += 
            self.chour %= 

        return shour +",#separationofconcerns,4,7102,"['class', 'ClockIterator', 'def', '__init__', 'self', 'self', 'chour', 'self', 'cminute', 'def', '__iter__', 'self', 'return', 'self', 'def', '__next__', 'self', 'if', 'self', 'chour', 'shour', 'str', 'self', 'chour', 'else', 'shour', 'str', 'self', 'chour', 'if', 'self', 'cminute', 'sminute', 'str', 'self', 'cminute', 'else', 'sminute', 'str', 'self', 'cminute', 'update', 'self', 'cminute', 'if', 'self', 'cminute', 'self', 'cminute', 'self', 'chour', 'self', 'chour', 'return', 'shour']","['class', 'clockiter', 'def', '__init__', 'self', 'self', 'chour', 'self', 'cminut', 'def', '__iter__', 'self', 'return', 'self', 'def', '__next__', 'self', 'if', 'self', 'chour', 'shour', 'str', 'self', 'chour', 'els', 'shour', 'str', 'self', 'chour', 'if', 'self', 'cminut', 'sminut', 'str', 'self', 'cminut', 'els', 'sminut', 'str', 'self', 'cminut', 'updat', 'self', 'cminut', 'if', 'self', 'cminut', 'self', 'cminut', 'self', 'chour', 'self', 'chour', 'return', 'shour']","['class', 'clockiter', 'def', '__init__', 'self', 'self', 'chour', 'self', 'cminut', 'def', '__iter__', 'self', 'return', 'self', 'def', '__next__', 'self', 'self', 'chour', 'shour', 'str', 'self', 'chour', 'els', 'shour', 'str', 'self', 'chour', 'self', 'cminut', 'sminut', 'str', 'self', 'cminut', 'els', 'sminut', 'str', 'self', 'cminut', 'updat', 'self', 'cminut', 'self', 'cminut', 'self', 'cminut', 'self', 'chour', 'self', 'chour', 'return', 'shour']",class clockiter def __init__ self self chour self cminut def __iter__ self return self def __next__ self self chour shour str self chour els shour str self chour self cminut sminut str self cminut els sminut str self cminut updat self cminut self cminut self cminut self chour self chour return shour,separationofconcerns,CS,CS162
143025,"from datetime import datetime as dt

class ClockIterator():
    
    def __init__(self):
        self.time = (dt.now().hour, dt.now().minute)
    
    def __iter__(self):
        self.hr = dt.now().hour
        self.mn = dt.now().minute
        return self
    
    def __next__(self):
        self.mn = self.mn + 
        if self.mn == :
            self.hr = self.hr + 
            self.mn = 
        if self.hr == :
            self.hr = 
        return (""%d:%d""%(self.hr,self.mn))

clock = ClockIterator()
for time in clock:
    print (time)",#separationofconcerns,4,7102,"['from', 'datetime', 'import', 'datetime', 'as', 'dt', 'class', 'ClockIterator', 'def', '__init__', 'self', 'self', 'time', 'dt', 'now', 'hour', 'dt', 'now', 'minute', 'def', '__iter__', 'self', 'self', 'hr', 'dt', 'now', 'hour', 'self', 'mn', 'dt', 'now', 'minute', 'return', 'self', 'def', '__next__', 'self', 'self', 'mn', 'self', 'mn', 'if', 'self', 'mn', 'self', 'hr', 'self', 'hr', 'self', 'mn', 'if', 'self', 'hr', 'self', 'hr', 'return', 'd', 'd', 'self', 'hr', 'self', 'mn', 'clock', 'ClockIterator', 'for', 'time', 'in', 'clock', 'print', 'time']","['from', 'datetim', 'import', 'datetim', 'as', 'dt', 'class', 'clockiter', 'def', '__init__', 'self', 'self', 'time', 'dt', 'now', 'hour', 'dt', 'now', 'minut', 'def', '__iter__', 'self', 'self', 'hr', 'dt', 'now', 'hour', 'self', 'mn', 'dt', 'now', 'minut', 'return', 'self', 'def', '__next__', 'self', 'self', 'mn', 'self', 'mn', 'if', 'self', 'mn', 'self', 'hr', 'self', 'hr', 'self', 'mn', 'if', 'self', 'hr', 'self', 'hr', 'return', 'd', 'd', 'self', 'hr', 'self', 'mn', 'clock', 'clockiter', 'for', 'time', 'in', 'clock', 'print', 'time']","['datetim', 'import', 'datetim', 'dt', 'class', 'clockiter', 'def', '__init__', 'self', 'self', 'time', 'dt', 'hour', 'dt', 'minut', 'def', '__iter__', 'self', 'self', 'hr', 'dt', 'hour', 'self', 'mn', 'dt', 'minut', 'return', 'self', 'def', '__next__', 'self', 'self', 'mn', 'self', 'mn', 'self', 'mn', 'self', 'hr', 'self', 'hr', 'self', 'mn', 'self', 'hr', 'self', 'hr', 'return', 'self', 'hr', 'self', 'mn', 'clock', 'clockiter', 'time', 'clock', 'print', 'time']",datetim import datetim dt class clockiter def __init__ self self time dt hour dt minut def __iter__ self self hr dt hour self mn dt minut return self def __next__ self self mn self mn self mn self hr self hr self mn self hr self hr return self hr self mn clock clockiter time clock print time,separationofconcerns,CS,CS162
143025,"import time

class ClockIterator(object):

    
    def __init__(self):
        self.start = time.time()        
        
    def __iter__(self):
        self.seconds = 
        self.minutes = 
        
        return self
        
        
    def __next__(self):
        while (self.seconds == int(time.time() - self.start) % ):
            pass
        now = time.time()
        self.seconds, self.minutes = int(now - self.start) % , int((now - self.start) / )
        return self.seconds, self.minutes

        
clock = ClockIterator()
for it in clock:
    print(it)",#separationofconcerns,4,7102,"['import', 'time', 'class', 'ClockIterator', 'object', 'def', '__init__', 'self', 'self', 'start', 'time', 'time', 'def', '__iter__', 'self', 'self', 'seconds', 'self', 'minutes', 'return', 'self', 'def', '__next__', 'self', 'while', 'self', 'seconds', 'int', 'time', 'time', 'self', 'start', 'pass', 'now', 'time', 'time', 'self', 'seconds', 'self', 'minutes', 'int', 'now', 'self', 'start', 'int', 'now', 'self', 'start', 'return', 'self', 'seconds', 'self', 'minutes', 'clock', 'ClockIterator', 'for', 'it', 'in', 'clock', 'print', 'it']","['import', 'time', 'class', 'clockiter', 'object', 'def', '__init__', 'self', 'self', 'start', 'time', 'time', 'def', '__iter__', 'self', 'self', 'second', 'self', 'minut', 'return', 'self', 'def', '__next__', 'self', 'while', 'self', 'second', 'int', 'time', 'time', 'self', 'start', 'pass', 'now', 'time', 'time', 'self', 'second', 'self', 'minut', 'int', 'now', 'self', 'start', 'int', 'now', 'self', 'start', 'return', 'self', 'second', 'self', 'minut', 'clock', 'clockiter', 'for', 'it', 'in', 'clock', 'print', 'it']","['import', 'time', 'class', 'clockiter', 'object', 'def', '__init__', 'self', 'self', 'start', 'time', 'time', 'def', '__iter__', 'self', 'self', 'second', 'self', 'minut', 'return', 'self', 'def', '__next__', 'self', 'self', 'second', 'int', 'time', 'time', 'self', 'start', 'pass', 'time', 'time', 'self', 'second', 'self', 'minut', 'int', 'self', 'start', 'int', 'self', 'start', 'return', 'self', 'second', 'self', 'minut', 'clock', 'clockiter', 'clock', 'print']",import time class clockiter object def __init__ self self start time time def __iter__ self self second self minut return self def __next__ self self second int time time self start pass time time self second self minut int self start int self start return self second self minut clock clockiter clock print,separationofconcerns,CS,CS162
266572,"this part was hard for me, i strugled to understand the norms of unit tests, but here was the format if clock.t== && output="":"": return True",#separationofconcerns,1,12359,"['this', 'part', 'was', 'hard', 'for', 'me', 'i', 'strugled', 'to', 'understand', 'the', 'norms', 'of', 'unit', 'tests', 'but', 'here', 'was', 'the', 'format', 'if', 'clock', 't', 'output', 'return', 'True']","['this', 'part', 'was', 'hard', 'for', 'me', 'i', 'strugl', 'to', 'understand', 'the', 'norm', 'of', 'unit', 'test', 'but', 'here', 'was', 'the', 'format', 'if', 'clock', 't', 'output', 'return', 'true']","['part', 'hard', 'strugl', 'understand', 'norm', 'unit', 'test', 'format', 'clock', 'output', 'return', 'true']",part hard strugl understand norm unit test format clock output return true,separationofconcerns,CS,CS162
226993,"def newton(f, g, H, x, iterations, error):
    x = x
    x_old = x
    c = .
    for i in xrange(iterations):
        pk = -np.linalg.solve(H(*x), g(*x))
        alpha = step_length(f, g, x, ., pk, c)
        x = x + alpha * pk
        if i %  == :
            # print ""  iter={}, grad={}, alpha={}, x={}, f(x)={}"".format(i, pk, alpha, x, f(x))
            print ""  iter={}, x={}, f(x)={}"".format(i, x, f(*x))
        temp = np.linalg.norm(x - x_old)
        if temp < error:
            break
        x_old = x
    return x, i + , temp",#advancedcalculus,4,10664,"['def', 'newton', 'f', 'g', 'H', 'x', 'iterations', 'error', 'x', 'x', 'x_old', 'x', 'c', 'for', 'i', 'in', 'xrange', 'iterations', 'pk', 'np', 'linalg', 'solve', 'H', 'x', 'g', 'x', 'alpha', 'step_length', 'f', 'g', 'x', 'pk', 'c', 'x', 'x', 'alpha', 'pk', 'if', 'i', 'print', 'iter', 'grad', 'alpha', 'x', 'f', 'x', 'format', 'i', 'pk', 'alpha', 'x', 'f', 'x', 'print', 'iter', 'x', 'f', 'x', 'format', 'i', 'x', 'f', 'x', 'temp', 'np', 'linalg', 'norm', 'x', 'x_old', 'if', 'temp', 'error', 'break', 'x_old', 'x', 'return', 'x', 'i', 'temp']","['def', 'newton', 'f', 'g', 'h', 'x', 'iter', 'error', 'x', 'x', 'x_old', 'x', 'c', 'for', 'i', 'in', 'xrang', 'iter', 'pk', 'np', 'linalg', 'solv', 'h', 'x', 'g', 'x', 'alpha', 'step_length', 'f', 'g', 'x', 'pk', 'c', 'x', 'x', 'alpha', 'pk', 'if', 'i', 'print', 'iter', 'grad', 'alpha', 'x', 'f', 'x', 'format', 'i', 'pk', 'alpha', 'x', 'f', 'x', 'print', 'iter', 'x', 'f', 'x', 'format', 'i', 'x', 'f', 'x', 'temp', 'np', 'linalg', 'norm', 'x', 'x_old', 'if', 'temp', 'error', 'break', 'x_old', 'x', 'return', 'x', 'i', 'temp']","['def', 'newton', 'f', 'g', 'h', 'x', 'iter', 'error', 'x', 'x', 'x_old', 'x', 'c', 'xrang', 'iter', 'pk', 'np', 'linalg', 'solv', 'h', 'x', 'g', 'x', 'alpha', 'step_length', 'f', 'g', 'x', 'pk', 'c', 'x', 'x', 'alpha', 'pk', 'print', 'iter', 'grad', 'alpha', 'x', 'f', 'x', 'format', 'pk', 'alpha', 'x', 'f', 'x', 'print', 'iter', 'x', 'f', 'x', 'format', 'x', 'f', 'x', 'temp', 'np', 'linalg', 'norm', 'x', 'x_old', 'temp', 'error', 'break', 'x_old', 'x', 'return', 'x', 'temp']",def newton f g h x iter error x x x_old x c xrang iter pk np linalg solv h x g x alpha step_length f g x pk c x x alpha pk print iter grad alpha x f x format pk alpha x f x print iter x f x format x f x temp np linalg norm x x_old temp error break x_old x return x temp,advancedcalculus,CS,CS164
153273,"Query 
SELECT CustomerID WHERE ZipCode == '' AND Gender == 'F' FROM  Customer;

Composite index
CREATE UNIQUE INDEX i ON customer ('ZipCode', 'Gender')

It is not a covering index as it does not index all the columns that I need for that query.",#sql,4,7632,"['Query', 'SELECT', 'CustomerID', 'WHERE', 'ZipCode', ""''"", 'AND', 'Gender', ""'F'"", 'FROM', 'Customer', 'Composite', 'index', 'CREATE', 'UNIQUE', 'INDEX', 'i', 'ON', 'customer', ""'ZipCode'"", ""'Gender'"", 'It', 'is', 'not', 'a', 'covering', 'index', 'as', 'it', 'does', 'not', 'index', 'all', 'the', 'columns', 'that', 'I', 'need', 'for', 'that', 'query']","['queri', 'select', 'customerid', 'where', 'zipcod', ""''"", 'and', 'gender', 'f', 'from', 'custom', 'composit', 'index', 'creat', 'uniqu', 'index', 'i', 'on', 'custom', 'zipcod', 'gender', 'it', 'is', 'not', 'a', 'cover', 'index', 'as', 'it', 'doe', 'not', 'index', 'all', 'the', 'column', 'that', 'i', 'need', 'for', 'that', 'queri']","['queri', 'select', 'customerid', 'zipcod', ""''"", 'gender', 'f', 'custom', 'composit', 'index', 'creat', 'uniqu', 'index', 'custom', 'zipcod', 'gender', 'cover', 'index', 'doe', 'index', 'column', 'need', 'queri']",queri select customerid zipcod '' gender f custom composit index creat uniqu index custom zipcod gender cover index doe index column need queri,sql,CS,CS162
153273,"Index: CREATE INDEX Idx ON Customer(zipcode, gender); Query: SELECT name FROM Customer where zipcode == """". In this query, it will need the name as output, the index is good for look up zipcode that is , however in order to get customer name, it has to go to the original table, covering index means you do not need to look up the original table",#sql,4,7632,"['Index', 'CREATE', 'INDEX', 'Idx', 'ON', 'Customer', 'zipcode', 'gender', 'Query', 'SELECT', 'name', 'FROM', 'Customer', 'where', 'zipcode', 'In', 'this', 'query', 'it', 'will', 'need', 'the', 'name', 'as', 'output', 'the', 'index', 'is', 'good', 'for', 'look', 'up', 'zipcode', 'that', 'is', 'however', 'in', 'order', 'to', 'get', 'customer', 'name', 'it', 'has', 'to', 'go', 'to', 'the', 'original', 'table', 'covering', 'index', 'means', 'you', 'do', 'not', 'need', 'to', 'look', 'up', 'the', 'original', 'table']","['index', 'creat', 'index', 'idx', 'on', 'custom', 'zipcod', 'gender', 'queri', 'select', 'name', 'from', 'custom', 'where', 'zipcod', 'in', 'this', 'queri', 'it', 'will', 'need', 'the', 'name', 'as', 'output', 'the', 'index', 'is', 'good', 'for', 'look', 'up', 'zipcod', 'that', 'is', 'howev', 'in', 'order', 'to', 'get', 'custom', 'name', 'it', 'has', 'to', 'go', 'to', 'the', 'origin', 'tabl', 'cover', 'index', 'mean', 'you', 'do', 'not', 'need', 'to', 'look', 'up', 'the', 'origin', 'tabl']","['index', 'creat', 'index', 'idx', 'custom', 'zipcod', 'gender', 'queri', 'select', 'name', 'custom', 'zipcod', 'queri', 'need', 'name', 'output', 'index', 'good', 'look', 'zipcod', 'howev', 'order', 'get', 'custom', 'name', 'go', 'origin', 'tabl', 'cover', 'index', 'mean', 'need', 'look', 'origin', 'tabl']",index creat index idx custom zipcod gender queri select name custom zipcod queri need name output index good look zipcod howev order get custom name go origin tabl cover index mean need look origin tabl,sql,CS,CS162
160093,"from flask import Flask, render_template, request
from flask_sqlalchemy import flask_sqlalchemy

app = Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////'

@app.route('/')
def index():
	return render_template('home.html')

if __name__ == '__main__':
	app.run(debug=True)",#webstandards,4,7983,"['from', 'flask', 'import', 'Flask', 'render_template', 'request', 'from', 'flask_sqlalchemy', 'import', 'flask_sqlalchemy', 'app', 'Flask', '__name__', 'app', 'config', ""'SQLALCHEMY_DATABASE_URI'"", ""'sqlite"", ""'"", 'app', 'route', ""'"", ""'"", 'def', 'index', 'return', 'render_template', ""'home"", ""html'"", 'if', '__name__', ""'__main__'"", 'app', 'run', 'debug', 'True']","['from', 'flask', 'import', 'flask', 'render_templ', 'request', 'from', 'flask_sqlalchemi', 'import', 'flask_sqlalchemi', 'app', 'flask', '__name__', 'app', 'config', 'sqlalchemy_database_uri', 'sqlite', ""'"", 'app', 'rout', ""'"", ""'"", 'def', 'index', 'return', 'render_templ', 'home', 'html', 'if', '__name__', '__main__', 'app', 'run', 'debug', 'true']","['flask', 'import', 'flask', 'render_templ', 'request', 'flask_sqlalchemi', 'import', 'flask_sqlalchemi', 'app', 'flask', '__name__', 'app', 'config', 'sqlalchemy_database_uri', 'sqlite', ""'"", 'app', 'rout', ""'"", ""'"", 'def', 'index', 'return', 'render_templ', 'home', 'html', '__name__', '__main__', 'app', 'run', 'debug', 'true']",flask import flask render_templ request flask_sqlalchemi import flask_sqlalchemi app flask __name__ app config sqlalchemy_database_uri sqlite ' app rout ' ' def index return render_templ home html __name__ __main__ app run debug true,webstandards,CS,CS162
160093,"db = SQLAlchemy(app)

class Kanban(db.Model):
	id=db.column(db.Integer, primary_key=True)
	text=db.column(db.String())
	date = db.column(db.DateTime)
	complete = db.Column(db.Boolean)

@app.route('/')
def index():
	return render_template('index.html')

@app.route('/add', methods=['POST'])
def add():
	return '<h>{}</h>'.format(request.form['task'])

if __name__==""__main__"":
	app.run(debug=True)",#webstandards,4,7983,"['db', 'SQLAlchemy', 'app', 'class', 'Kanban', 'db', 'Model', 'id', 'db', 'column', 'db', 'Integer', 'primary_key', 'True', 'text', 'db', 'column', 'db', 'String', 'date', 'db', 'column', 'db', 'DateTime', 'complete', 'db', 'Column', 'db', 'Boolean', 'app', 'route', ""'"", ""'"", 'def', 'index', 'return', 'render_template', ""'index"", ""html'"", 'app', 'route', ""'"", ""add'"", 'methods', ""'POST'"", 'def', 'add', 'return', ""'"", 'h', 'h', ""'"", 'format', 'request', 'form', ""'task'"", 'if', '__name__', '__main__', 'app', 'run', 'debug', 'True']","['db', 'sqlalchemi', 'app', 'class', 'kanban', 'db', 'model', 'id', 'db', 'column', 'db', 'integ', 'primary_key', 'true', 'text', 'db', 'column', 'db', 'string', 'date', 'db', 'column', 'db', 'datetim', 'complet', 'db', 'column', 'db', 'boolean', 'app', 'rout', ""'"", ""'"", 'def', 'index', 'return', 'render_templ', 'index', 'html', 'app', 'rout', ""'"", 'add', 'method', 'post', 'def', 'add', 'return', ""'"", 'h', 'h', ""'"", 'format', 'request', 'form', 'task', 'if', '__name__', '__main__', 'app', 'run', 'debug', 'true']","['db', 'sqlalchemi', 'app', 'class', 'kanban', 'db', 'model', 'id', 'db', 'column', 'db', 'integ', 'primary_key', 'true', 'text', 'db', 'column', 'db', 'string', 'date', 'db', 'column', 'db', 'datetim', 'complet', 'db', 'column', 'db', 'boolean', 'app', 'rout', ""'"", ""'"", 'def', 'index', 'return', 'render_templ', 'index', 'html', 'app', 'rout', ""'"", 'add', 'method', 'post', 'def', 'add', 'return', ""'"", 'h', 'h', ""'"", 'format', 'request', 'form', 'task', '__name__', '__main__', 'app', 'run', 'debug', 'true']",db sqlalchemi app class kanban db model id db column db integ primary_key true text db column db string date db column db datetim complet db column db boolean app rout ' ' def index return render_templ index html app rout ' add method post def add return ' h h ' format request form task __name__ __main__ app run debug true,webstandards,CS,CS162
160093,"@app.route('/')
def index():
    return render_template('index.html')
    
if __name__ == '__main__':
    app.run(debug = True)",#webstandards,4,7983,"['app', 'route', ""'"", ""'"", 'def', 'index', 'return', 'render_template', ""'index"", ""html'"", 'if', '__name__', ""'__main__'"", 'app', 'run', 'debug', 'True']","['app', 'rout', ""'"", ""'"", 'def', 'index', 'return', 'render_templ', 'index', 'html', 'if', '__name__', '__main__', 'app', 'run', 'debug', 'true']","['app', 'rout', ""'"", ""'"", 'def', 'index', 'return', 'render_templ', 'index', 'html', '__name__', '__main__', 'app', 'run', 'debug', 'true']",app rout ' ' def index return render_templ index html __name__ __main__ app run debug true,webstandards,CS,CS162
160093,"from flask import Flask, render_template, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////Users/gwpicard/Documents/PROJECTS/kanbankanban.db'

db = SQLAlchemy(app)

class Kanban(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String())
    desc = db.Column(db.String())
    Status = db.Column(db.Integer)

@app.route('/')
def index():
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)",#webstandards,4,7983,"['from', 'flask', 'import', 'Flask', 'render_template', 'request', 'redirect', 'url_for', 'from', 'flask_sqlalchemy', 'import', 'SQLAlchemy', 'app', 'Flask', '__name__', 'app', 'config', ""'SQLALCHEMY_DATABASE_URI'"", ""'sqlite"", 'Users', 'gwpicard', 'Documents', 'PROJECTS', 'kanbankanban', ""db'"", 'db', 'SQLAlchemy', 'app', 'class', 'Kanban', 'db', 'Model', 'id', 'db', 'Column', 'db', 'Integer', 'primary_key', 'True', 'title', 'db', 'Column', 'db', 'String', 'desc', 'db', 'Column', 'db', 'String', 'Status', 'db', 'Column', 'db', 'Integer', 'app', 'route', ""'"", ""'"", 'def', 'index', 'return', 'render_template', ""'index"", ""html'"", 'if', '__name__', ""'__main__'"", 'app', 'run', 'debug', 'True']","['from', 'flask', 'import', 'flask', 'render_templ', 'request', 'redirect', 'url_for', 'from', 'flask_sqlalchemi', 'import', 'sqlalchemi', 'app', 'flask', '__name__', 'app', 'config', 'sqlalchemy_database_uri', 'sqlite', 'user', 'gwpicard', 'document', 'project', 'kanbankanban', 'db', 'db', 'sqlalchemi', 'app', 'class', 'kanban', 'db', 'model', 'id', 'db', 'column', 'db', 'integ', 'primary_key', 'true', 'titl', 'db', 'column', 'db', 'string', 'desc', 'db', 'column', 'db', 'string', 'status', 'db', 'column', 'db', 'integ', 'app', 'rout', ""'"", ""'"", 'def', 'index', 'return', 'render_templ', 'index', 'html', 'if', '__name__', '__main__', 'app', 'run', 'debug', 'true']","['flask', 'import', 'flask', 'render_templ', 'request', 'redirect', 'url_for', 'flask_sqlalchemi', 'import', 'sqlalchemi', 'app', 'flask', '__name__', 'app', 'config', 'sqlalchemy_database_uri', 'sqlite', 'user', 'gwpicard', 'document', 'project', 'kanbankanban', 'db', 'db', 'sqlalchemi', 'app', 'class', 'kanban', 'db', 'model', 'id', 'db', 'column', 'db', 'integ', 'primary_key', 'true', 'titl', 'db', 'column', 'db', 'string', 'desc', 'db', 'column', 'db', 'string', 'status', 'db', 'column', 'db', 'integ', 'app', 'rout', ""'"", ""'"", 'def', 'index', 'return', 'render_templ', 'index', 'html', '__name__', '__main__', 'app', 'run', 'debug', 'true']",flask import flask render_templ request redirect url_for flask_sqlalchemi import sqlalchemi app flask __name__ app config sqlalchemy_database_uri sqlite user gwpicard document project kanbankanban db db sqlalchemi app class kanban db model id db column db integ primary_key true titl db column db string desc db column db string status db column db integ app rout ' ' def index return render_templ index html __name__ __main__ app run debug true,webstandards,CS,CS162
160101,"@app.route('/')
def index():
    incomplete = Todo.query.filter_by(complete=False).all()
    complete = Todo.query.filter_by(complete=True).all()
    doing = Todo.query.filter_by(doing=True).all()

    return render_template('index.html', incomplete=incomplete, complete=complete, doing=doing)

if __name__ == '__main__':
    app.run(debug=True)",#webstandards,4,7985,"['app', 'route', ""'"", ""'"", 'def', 'index', 'incomplete', 'Todo', 'query', 'filter_by', 'complete', 'False', 'all', 'complete', 'Todo', 'query', 'filter_by', 'complete', 'True', 'all', 'doing', 'Todo', 'query', 'filter_by', 'doing', 'True', 'all', 'return', 'render_template', ""'index"", ""html'"", 'incomplete', 'incomplete', 'complete', 'complete', 'doing', 'doing', 'if', '__name__', ""'__main__'"", 'app', 'run', 'debug', 'True']","['app', 'rout', ""'"", ""'"", 'def', 'index', 'incomplet', 'todo', 'queri', 'filter_bi', 'complet', 'fals', 'all', 'complet', 'todo', 'queri', 'filter_bi', 'complet', 'true', 'all', 'do', 'todo', 'queri', 'filter_bi', 'do', 'true', 'all', 'return', 'render_templ', 'index', 'html', 'incomplet', 'incomplet', 'complet', 'complet', 'do', 'do', 'if', '__name__', '__main__', 'app', 'run', 'debug', 'true']","['app', 'rout', ""'"", ""'"", 'def', 'index', 'incomplet', 'todo', 'queri', 'filter_bi', 'complet', 'fals', 'complet', 'todo', 'queri', 'filter_bi', 'complet', 'true', 'todo', 'queri', 'filter_bi', 'true', 'return', 'render_templ', 'index', 'html', 'incomplet', 'incomplet', 'complet', 'complet', '__name__', '__main__', 'app', 'run', 'debug', 'true']",app rout ' ' def index incomplet todo queri filter_bi complet fals complet todo queri filter_bi complet true todo queri filter_bi true return render_templ index html incomplet incomplet complet complet __name__ __main__ app run debug true,webstandards,CS,CS162
160101,"app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////mnt/c/cs/kanban.db'

db = SQLAlchemy(app)

class Todo(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    thingstodo = db.Column(db.String())

@app.route(""/kanbanboard"")
def kanbanboard():
    return render_template('Kanban.html')

@app.route(""/add"", methods=['POST'])
def add():
    return '<h>{}</h>'.format(request.form['kanban_board_title'])
    return '<h>{}</h>'.format(request.form['kanban_board_description'])

if __name__ == ""__main__"":
    app.run(debug=True)",#webstandards,4,7985,"['app', 'Flask', '__name__', 'app', 'config', ""'SQLALCHEMY_DATABASE_URI'"", ""'sqlite"", 'mnt', 'c', 'cs', 'kanban', ""db'"", 'db', 'SQLAlchemy', 'app', 'class', 'Todo', 'db', 'Model', 'id', 'db', 'Column', 'db', 'Integer', 'primary_key', 'True', 'thingstodo', 'db', 'Column', 'db', 'String', 'app', 'route', 'kanbanboard', 'def', 'kanbanboard', 'return', 'render_template', ""'Kanban"", ""html'"", 'app', 'route', 'add', 'methods', ""'POST'"", 'def', 'add', 'return', ""'"", 'h', 'h', ""'"", 'format', 'request', 'form', ""'kanban_board_title'"", 'return', ""'"", 'h', 'h', ""'"", 'format', 'request', 'form', ""'kanban_board_description'"", 'if', '__name__', '__main__', 'app', 'run', 'debug', 'True']","['app', 'flask', '__name__', 'app', 'config', 'sqlalchemy_database_uri', 'sqlite', 'mnt', 'c', 'cs', 'kanban', 'db', 'db', 'sqlalchemi', 'app', 'class', 'todo', 'db', 'model', 'id', 'db', 'column', 'db', 'integ', 'primary_key', 'true', 'thingstodo', 'db', 'column', 'db', 'string', 'app', 'rout', 'kanbanboard', 'def', 'kanbanboard', 'return', 'render_templ', 'kanban', 'html', 'app', 'rout', 'add', 'method', 'post', 'def', 'add', 'return', ""'"", 'h', 'h', ""'"", 'format', 'request', 'form', 'kanban_board_titl', 'return', ""'"", 'h', 'h', ""'"", 'format', 'request', 'form', 'kanban_board_descript', 'if', '__name__', '__main__', 'app', 'run', 'debug', 'true']","['app', 'flask', '__name__', 'app', 'config', 'sqlalchemy_database_uri', 'sqlite', 'mnt', 'c', 'cs', 'kanban', 'db', 'db', 'sqlalchemi', 'app', 'class', 'todo', 'db', 'model', 'id', 'db', 'column', 'db', 'integ', 'primary_key', 'true', 'thingstodo', 'db', 'column', 'db', 'string', 'app', 'rout', 'kanbanboard', 'def', 'kanbanboard', 'return', 'render_templ', 'kanban', 'html', 'app', 'rout', 'add', 'method', 'post', 'def', 'add', 'return', ""'"", 'h', 'h', ""'"", 'format', 'request', 'form', 'kanban_board_titl', 'return', ""'"", 'h', 'h', ""'"", 'format', 'request', 'form', 'kanban_board_descript', '__name__', '__main__', 'app', 'run', 'debug', 'true']",app flask __name__ app config sqlalchemy_database_uri sqlite mnt c cs kanban db db sqlalchemi app class todo db model id db column db integ primary_key true thingstodo db column db string app rout kanbanboard def kanbanboard return render_templ kanban html app rout add method post def add return ' h h ' format request form kanban_board_titl return ' h h ' format request form kanban_board_descript __name__ __main__ app run debug true,webstandards,CS,CS162
160101,"@app.route('/')
def list():
    tasks = Kanban.query.all()
    return render_template('list.html', tasks=tasks)

@app.route('/add', methods=['POST'])
def add():
    kb = Kanban(text=request.form['kanban'], status=request.form['status'])
    return '<h>{}</h>'.format(request.form[''])

if __name__ == '__main__':
    app.run(debug=True)",#webstandards,4,7985,"['app', 'route', ""'"", ""'"", 'def', 'list', 'tasks', 'Kanban', 'query', 'all', 'return', 'render_template', ""'list"", ""html'"", 'tasks', 'tasks', 'app', 'route', ""'"", ""add'"", 'methods', ""'POST'"", 'def', 'add', 'kb', 'Kanban', 'text', 'request', 'form', ""'kanban'"", 'status', 'request', 'form', ""'status'"", 'return', ""'"", 'h', 'h', ""'"", 'format', 'request', 'form', ""''"", 'if', '__name__', ""'__main__'"", 'app', 'run', 'debug', 'True']","['app', 'rout', ""'"", ""'"", 'def', 'list', 'task', 'kanban', 'queri', 'all', 'return', 'render_templ', 'list', 'html', 'task', 'task', 'app', 'rout', ""'"", 'add', 'method', 'post', 'def', 'add', 'kb', 'kanban', 'text', 'request', 'form', 'kanban', 'status', 'request', 'form', 'status', 'return', ""'"", 'h', 'h', ""'"", 'format', 'request', 'form', ""''"", 'if', '__name__', '__main__', 'app', 'run', 'debug', 'true']","['app', 'rout', ""'"", ""'"", 'def', 'list', 'task', 'kanban', 'queri', 'return', 'render_templ', 'list', 'html', 'task', 'task', 'app', 'rout', ""'"", 'add', 'method', 'post', 'def', 'add', 'kb', 'kanban', 'text', 'request', 'form', 'kanban', 'status', 'request', 'form', 'status', 'return', ""'"", 'h', 'h', ""'"", 'format', 'request', 'form', ""''"", '__name__', '__main__', 'app', 'run', 'debug', 'true']",app rout ' ' def list task kanban queri return render_templ list html task task app rout ' add method post def add kb kanban text request form kanban status request form status return ' h h ' format request form '' __name__ __main__ app run debug true,webstandards,CS,CS162
277981,"did not run it successfully. Just saw the response from slack did not get to paste in the error yet. I used Yunfan's pre-class and the commands are: python. -m venv .venv\ source .venv/bin/activate\ pip install -r requirements.txt\python tests/test.py. It cannot find the requests module, even though I specified it. SQLAlchemy==..
psycopg==..
requests==..",#testing,1,12904,"['did', 'not', 'run', 'it', 'successfully', 'Just', 'saw', 'the', 'response', 'from', 'slack', 'did', 'not', 'get', 'to', 'paste', 'in', 'the', 'error', 'yet', 'I', 'used', ""Yunfan's"", 'pre', 'class', 'and', 'the', 'commands', 'are', 'python', 'm', 'venv', 'venv', 'source', 'venv', 'bin', 'activate', 'pip', 'install', 'r', 'requirements', 'txt', 'python', 'tests', 'test', 'py', 'It', 'cannot', 'find', 'the', 'requests', 'module', 'even', 'though', 'I', 'specified', 'it', 'SQLAlchemy', 'psycopg', 'requests']","['did', 'not', 'run', 'it', 'success', 'just', 'saw', 'the', 'respons', 'from', 'slack', 'did', 'not', 'get', 'to', 'past', 'in', 'the', 'error', 'yet', 'i', 'use', 'yunfan', 'pre', 'class', 'and', 'the', 'command', 'are', 'python', 'm', 'venv', 'venv', 'sourc', 'venv', 'bin', 'activ', 'pip', 'instal', 'r', 'requir', 'txt', 'python', 'test', 'test', 'py', 'it', 'cannot', 'find', 'the', 'request', 'modul', 'even', 'though', 'i', 'specifi', 'it', 'sqlalchemi', 'psycopg', 'request']","['run', 'success', 'saw', 'respons', 'slack', 'get', 'past', 'error', 'yet', 'yunfan', 'pre', 'class', 'command', 'python', 'venv', 'venv', 'sourc', 'venv', 'bin', 'activ', 'pip', 'instal', 'r', 'requir', 'txt', 'python', 'test', 'test', 'py', 'cannot', 'find', 'request', 'modul', 'even', 'though', 'specifi', 'sqlalchemi', 'psycopg', 'request']",run success saw respons slack get past error yet yunfan pre class command python venv venv sourc venv bin activ pip instal r requir txt python test test py cannot find request modul even though specifi sqlalchemi psycopg request,testing,CS,CS162
277987,"We lock our libraries in our requirements.txt files (<library>==<version>) because we used the particular versions of different libraries when building our application and utilized features provided from those services of specific versions in order to run our application without an error. Say if we did not lock the libraries for an application that is built a while ago and used the latest versions, certain features might be modified in these libraries and might not be compatible with the usage of these libraries in our app. This might cause tests to fail even though our app actually works.",#testing,4,12907,"['We', 'lock', 'our', 'libraries', 'in', 'our', 'requirements', 'txt', 'files', 'library', 'version', 'because', 'we', 'used', 'the', 'particular', 'versions', 'of', 'different', 'libraries', 'when', 'building', 'our', 'application', 'and', 'utilized', 'features', 'provided', 'from', 'those', 'services', 'of', 'specific', 'versions', 'in', 'order', 'to', 'run', 'our', 'application', 'without', 'an', 'error', 'Say', 'if', 'we', 'did', 'not', 'lock', 'the', 'libraries', 'for', 'an', 'application', 'that', 'is', 'built', 'a', 'while', 'ago', 'and', 'used', 'the', 'latest', 'versions', 'certain', 'features', 'might', 'be', 'modified', 'in', 'these', 'libraries', 'and', 'might', 'not', 'be', 'compatible', 'with', 'the', 'usage', 'of', 'these', 'libraries', 'in', 'our', 'app', 'This', 'might', 'cause', 'tests', 'to', 'fail', 'even', 'though', 'our', 'app', 'actually', 'works']","['we', 'lock', 'our', 'librari', 'in', 'our', 'requir', 'txt', 'file', 'librari', 'version', 'becaus', 'we', 'use', 'the', 'particular', 'version', 'of', 'differ', 'librari', 'when', 'build', 'our', 'applic', 'and', 'util', 'featur', 'provid', 'from', 'those', 'servic', 'of', 'specif', 'version', 'in', 'order', 'to', 'run', 'our', 'applic', 'without', 'an', 'error', 'say', 'if', 'we', 'did', 'not', 'lock', 'the', 'librari', 'for', 'an', 'applic', 'that', 'is', 'built', 'a', 'while', 'ago', 'and', 'use', 'the', 'latest', 'version', 'certain', 'featur', 'might', 'be', 'modifi', 'in', 'these', 'librari', 'and', 'might', 'not', 'be', 'compat', 'with', 'the', 'usag', 'of', 'these', 'librari', 'in', 'our', 'app', 'this', 'might', 'caus', 'test', 'to', 'fail', 'even', 'though', 'our', 'app', 'actual', 'work']","['lock', 'librari', 'requir', 'txt', 'file', 'librari', 'version', 'becaus', 'particular', 'version', 'differ', 'librari', 'build', 'applic', 'util', 'featur', 'provid', 'servic', 'specif', 'version', 'order', 'run', 'applic', 'without', 'error', 'say', 'lock', 'librari', 'applic', 'built', 'ago', 'latest', 'version', 'certain', 'featur', 'modifi', 'librari', 'compat', 'usag', 'librari', 'app', 'caus', 'test', 'fail', 'even', 'though', 'app', 'actual', 'work']",lock librari requir txt file librari version becaus particular version differ librari build applic util featur provid servic specif version order run applic without error say lock librari applic built ago latest version certain featur modifi librari compat usag librari app caus test fail even though app actual work,testing,CS,CS162
179431,"()()()() ==> ()()
By following the transition from  to  in group , we then see that  goes to  in group  and  goes to  in group  and  goes to  in group . Therefore, . Then,  goes to  in group  and that is the only  so therefore ",#algebra,2,8770,"['By', 'following', 'the', 'transition', 'from', 'to', 'in', 'group', 'we', 'then', 'see', 'that', 'goes', 'to', 'in', 'group', 'and', 'goes', 'to', 'in', 'group', 'and', 'goes', 'to', 'in', 'group', 'Therefore', 'Then', 'goes', 'to', 'in', 'group', 'and', 'that', 'is', 'the', 'only', 'so', 'therefore']","['by', 'follow', 'the', 'transit', 'from', 'to', 'in', 'group', 'we', 'then', 'see', 'that', 'goe', 'to', 'in', 'group', 'and', 'goe', 'to', 'in', 'group', 'and', 'goe', 'to', 'in', 'group', 'therefor', 'then', 'goe', 'to', 'in', 'group', 'and', 'that', 'is', 'the', 'onli', 'so', 'therefor']","['follow', 'transit', 'group', 'see', 'goe', 'group', 'goe', 'group', 'goe', 'group', 'therefor', 'goe', 'group', 'onli', 'therefor']",follow transit group see goe group goe group goe group therefor goe group onli therefor,algebra,CS,CS144
178715,"_ has docker-compose.yml file, it enabled us use the docker swarm and set up multiple containers.

_ installs PostGresql whereas _ uses in-memory sqlite. A new container for Postgresql server is made

- requirement.txt has psycopg==.. file for Postgresql server support",#deployment,4,8729,"['_', 'has', 'docker', 'compose', 'yml', 'file', 'it', 'enabled', 'us', 'use', 'the', 'docker', 'swarm', 'and', 'set', 'up', 'multiple', 'containers', '_', 'installs', 'PostGresql', 'whereas', '_', 'uses', 'in', 'memory', 'sqlite', 'A', 'new', 'container', 'for', 'Postgresql', 'server', 'is', 'made', 'requirement', 'txt', 'has', 'psycopg', 'file', 'for', 'Postgresql', 'server', 'support']","['_', 'has', 'docker', 'compos', 'yml', 'file', 'it', 'enabl', 'us', 'use', 'the', 'docker', 'swarm', 'and', 'set', 'up', 'multipl', 'contain', '_', 'instal', 'postgresql', 'wherea', '_', 'use', 'in', 'memori', 'sqlite', 'a', 'new', 'contain', 'for', 'postgresql', 'server', 'is', 'made', 'requir', 'txt', 'has', 'psycopg', 'file', 'for', 'postgresql', 'server', 'support']","['_', 'docker', 'compos', 'yml', 'file', 'enabl', 'us', 'docker', 'swarm', 'set', 'multipl', 'contain', '_', 'instal', 'postgresql', 'wherea', '_', 'memori', 'sqlite', 'new', 'contain', 'postgresql', 'server', 'made', 'requir', 'txt', 'psycopg', 'file', 'postgresql', 'server', 'support']",_ docker compos yml file enabl us docker swarm set multipl contain _ instal postgresql wherea _ memori sqlite new contain postgresql server made requir txt psycopg file postgresql server support,deployment,CS,CS162
178715,Q: The differences come from the database. The new one docker file indicate install postgre. The app file link to the postgre database and it also has a docker-compose.yml file. They also require psycopg==..,#deployment,4,8729,"['Q', 'The', 'differences', 'come', 'from', 'the', 'database', 'The', 'new', 'one', 'docker', 'file', 'indicate', 'install', 'postgre', 'The', 'app', 'file', 'link', 'to', 'the', 'postgre', 'database', 'and', 'it', 'also', 'has', 'a', 'docker', 'compose', 'yml', 'file', 'They', 'also', 'require', 'psycopg']","['q', 'the', 'differ', 'come', 'from', 'the', 'databas', 'the', 'new', 'one', 'docker', 'file', 'indic', 'instal', 'postgr', 'the', 'app', 'file', 'link', 'to', 'the', 'postgr', 'databas', 'and', 'it', 'also', 'has', 'a', 'docker', 'compos', 'yml', 'file', 'they', 'also', 'requir', 'psycopg']","['q', 'differ', 'come', 'databas', 'new', 'one', 'docker', 'file', 'indic', 'instal', 'postgr', 'app', 'file', 'link', 'postgr', 'databas', 'docker', 'compos', 'yml', 'file', 'requir', 'psycopg']",q differ come databas new one docker file indic instal postgr app file link postgr databas docker compos yml file requir psycopg,deployment,CS,CS162
196856,"c(t)=(r*t*)/(+r*t) ==> it will be g/ml
r is the constant rate of dripping.
t is the time in minutes.
Concentration means the grams of KMnO divided by the volume of the solution. As the function approaches the infinity, the limit will approach to g/ml solution. It means that as we keep dripping from solution, the concentration in the flask will become the same as the original solution.",#limitscontinuity,3,9339,"['c', 't', 'r', 't', 'r', 't', 'it', 'will', 'be', 'g', 'ml', 'r', 'is', 'the', 'constant', 'rate', 'of', 'dripping', 't', 'is', 'the', 'time', 'in', 'minutes', 'Concentration', 'means', 'the', 'grams', 'of', 'KMnO', 'divided', 'by', 'the', 'volume', 'of', 'the', 'solution', 'As', 'the', 'function', 'approaches', 'the', 'infinity', 'the', 'limit', 'will', 'approach', 'to', 'g', 'ml', 'solution', 'It', 'means', 'that', 'as', 'we', 'keep', 'dripping', 'from', 'solution', 'the', 'concentration', 'in', 'the', 'flask', 'will', 'become', 'the', 'same', 'as', 'the', 'original', 'solution']","['c', 't', 'r', 't', 'r', 't', 'it', 'will', 'be', 'g', 'ml', 'r', 'is', 'the', 'constant', 'rate', 'of', 'drip', 't', 'is', 'the', 'time', 'in', 'minut', 'concentr', 'mean', 'the', 'gram', 'of', 'kmno', 'divid', 'by', 'the', 'volum', 'of', 'the', 'solut', 'as', 'the', 'function', 'approach', 'the', 'infin', 'the', 'limit', 'will', 'approach', 'to', 'g', 'ml', 'solut', 'it', 'mean', 'that', 'as', 'we', 'keep', 'drip', 'from', 'solut', 'the', 'concentr', 'in', 'the', 'flask', 'will', 'becom', 'the', 'same', 'as', 'the', 'origin', 'solut']","['c', 'r', 'r', 'g', 'ml', 'r', 'constant', 'rate', 'drip', 'time', 'minut', 'concentr', 'mean', 'gram', 'kmno', 'divid', 'volum', 'solut', 'function', 'approach', 'infin', 'limit', 'approach', 'g', 'ml', 'solut', 'mean', 'keep', 'drip', 'solut', 'concentr', 'flask', 'becom', 'origin', 'solut']",c r r g ml r constant rate drip time minut concentr mean gram kmno divid volum solut function approach infin limit approach g ml solut mean keep drip solut concentr flask becom origin solut,limitscontinuity,CS,CS111A
205576,"At x = , the limit would not exist because in order for the limit to exist, the limit from the left side must be equal the limit from the right side == the value of function at that . As we plug it from the left lim sin(/x) would be roughly around - as x approach . Same thing for as x approach  from the right. But the value of the function at g() =  so it is not the same. the third condition for continuous (the limit must be the same as the value at that point) is violated.",#limitscontinuity,2,9751,"['At', 'x', 'the', 'limit', 'would', 'not', 'exist', 'because', 'in', 'order', 'for', 'the', 'limit', 'to', 'exist', 'the', 'limit', 'from', 'the', 'left', 'side', 'must', 'be', 'equal', 'the', 'limit', 'from', 'the', 'right', 'side', 'the', 'value', 'of', 'function', 'at', 'that', 'As', 'we', 'plug', 'it', 'from', 'the', 'left', 'lim', 'sin', 'x', 'would', 'be', 'roughly', 'around', 'as', 'x', 'approach', 'Same', 'thing', 'for', 'as', 'x', 'approach', 'from', 'the', 'right', 'But', 'the', 'value', 'of', 'the', 'function', 'at', 'g', 'so', 'it', 'is', 'not', 'the', 'same', 'the', 'third', 'condition', 'for', 'continuous', 'the', 'limit', 'must', 'be', 'the', 'same', 'as', 'the', 'value', 'at', 'that', 'point', 'is', 'violated']","['at', 'x', 'the', 'limit', 'would', 'not', 'exist', 'becaus', 'in', 'order', 'for', 'the', 'limit', 'to', 'exist', 'the', 'limit', 'from', 'the', 'left', 'side', 'must', 'be', 'equal', 'the', 'limit', 'from', 'the', 'right', 'side', 'the', 'valu', 'of', 'function', 'at', 'that', 'as', 'we', 'plug', 'it', 'from', 'the', 'left', 'lim', 'sin', 'x', 'would', 'be', 'rough', 'around', 'as', 'x', 'approach', 'same', 'thing', 'for', 'as', 'x', 'approach', 'from', 'the', 'right', 'but', 'the', 'valu', 'of', 'the', 'function', 'at', 'g', 'so', 'it', 'is', 'not', 'the', 'same', 'the', 'third', 'condit', 'for', 'continu', 'the', 'limit', 'must', 'be', 'the', 'same', 'as', 'the', 'valu', 'at', 'that', 'point', 'is', 'violat']","['x', 'limit', 'exist', 'becaus', 'order', 'limit', 'exist', 'limit', 'left', 'side', 'must', 'equal', 'limit', 'right', 'side', 'valu', 'function', 'plug', 'left', 'lim', 'sin', 'x', 'rough', 'around', 'x', 'approach', 'thing', 'x', 'approach', 'right', 'valu', 'function', 'g', 'third', 'condit', 'continu', 'limit', 'must', 'valu', 'point', 'violat']",x limit exist becaus order limit exist limit left side must equal limit right side valu function plug left lim sin x rough around x approach thing x approach right valu function g third condit continu limit must valu point violat,limitscontinuity,CS,CS111A
205576,"Condition : g(x) is defined
True

Condition : limit exists
False. As lim(g(x), x|-> ) is taken, the value gets closer and closer to infinity. The limit does not exist. 

Condition : limit == function value
Doesn't matter because Condition  is False. All three conditions need to be met for the function to be continuous. 

Conclusion, function g(x) is not continuous.",#limitscontinuity,3,9751,"['Condition', 'g', 'x', 'is', 'defined', 'True', 'Condition', 'limit', 'exists', 'False', 'As', 'lim', 'g', 'x', 'x', 'is', 'taken', 'the', 'value', 'gets', 'closer', 'and', 'closer', 'to', 'infinity', 'The', 'limit', 'does', 'not', 'exist', 'Condition', 'limit', 'function', 'value', ""Doesn't"", 'matter', 'because', 'Condition', 'is', 'False', 'All', 'three', 'conditions', 'need', 'to', 'be', 'met', 'for', 'the', 'function', 'to', 'be', 'continuous', 'Conclusion', 'function', 'g', 'x', 'is', 'not', 'continuous']","['condit', 'g', 'x', 'is', 'defin', 'true', 'condit', 'limit', 'exist', 'fals', 'as', 'lim', 'g', 'x', 'x', 'is', 'taken', 'the', 'valu', 'get', 'closer', 'and', 'closer', 'to', 'infin', 'the', 'limit', 'doe', 'not', 'exist', 'condit', 'limit', 'function', 'valu', ""doesn't"", 'matter', 'becaus', 'condit', 'is', 'fals', 'all', 'three', 'condit', 'need', 'to', 'be', 'met', 'for', 'the', 'function', 'to', 'be', 'continu', 'conclus', 'function', 'g', 'x', 'is', 'not', 'continu']","['condit', 'g', 'x', 'defin', 'true', 'condit', 'limit', 'exist', 'fals', 'lim', 'g', 'x', 'x', 'taken', 'valu', 'get', 'closer', 'closer', 'infin', 'limit', 'doe', 'exist', 'condit', 'limit', 'function', 'valu', 'matter', 'becaus', 'condit', 'fals', 'three', 'condit', 'need', 'met', 'function', 'continu', 'conclus', 'function', 'g', 'x', 'continu']",condit g x defin true condit limit exist fals lim g x x taken valu get closer closer infin limit doe exist condit limit function valu matter becaus condit fals three condit need met function continu conclus function g x continu,limitscontinuity,CS,CS111A
196828,"Formula:
C(t) = (^t) / (  + (^t) )

Limit of C(t) as t approaches infinity:
Algebraically:
. simplify by largest common factor (^t)
Numerator: (^t) / (^t) == 
Denominator: ( /(^t) ) + 
. analyse:
Numerator:  
Denominator: tends to  +  #since constant/compound element will tend to 
Thus C(t) = / as t approaches infinity; thus the limit is 

English:
Thus, the vertical asymptope for C(t) =  as t approaches infinity. This mean",#mathtools,3,9335,"['Formula', 'C', 't', 't', 't', 'Limit', 'of', 'C', 't', 'as', 't', 'approaches', 'infinity', 'Algebraically', 'simplify', 'by', 'largest', 'common', 'factor', 't', 'Numerator', 't', 't', 'Denominator', 't', 'analyse', 'Numerator', 'Denominator', 'tends', 'to', 'since', 'constant', 'compound', 'element', 'will', 'tend', 'to', 'Thus', 'C', 't', 'as', 't', 'approaches', 'infinity', 'thus', 'the', 'limit', 'is', 'English', 'Thus', 'the', 'vertical', 'asymptope', 'for', 'C', 't', 'as', 't', 'approaches', 'infinity', 'This', 'mean']","['formula', 'c', 't', 't', 't', 'limit', 'of', 'c', 't', 'as', 't', 'approach', 'infin', 'algebra', 'simplifi', 'by', 'largest', 'common', 'factor', 't', 'numer', 't', 't', 'denomin', 't', 'analys', 'numer', 'denomin', 'tend', 'to', 'sinc', 'constant', 'compound', 'element', 'will', 'tend', 'to', 'thus', 'c', 't', 'as', 't', 'approach', 'infin', 'thus', 'the', 'limit', 'is', 'english', 'thus', 'the', 'vertic', 'asymptop', 'for', 'c', 't', 'as', 't', 'approach', 'infin', 'this', 'mean']","['formula', 'c', 'limit', 'c', 'approach', 'infin', 'algebra', 'simplifi', 'largest', 'common', 'factor', 'numer', 'denomin', 'analys', 'numer', 'denomin', 'tend', 'sinc', 'constant', 'compound', 'element', 'tend', 'thus', 'c', 'approach', 'infin', 'thus', 'limit', 'english', 'thus', 'vertic', 'asymptop', 'c', 'approach', 'infin', 'mean']",formula c limit c approach infin algebra simplifi largest common factor numer denomin analys numer denomin tend sinc constant compound element tend thus c approach infin thus limit english thus vertic asymptop c approach infin mean,mathtools,CS,CS111A
240101,"V(x, y, z) = x*y*z

# A and E were found by keeping variables in one side and constant in other side in the constraint equation!
A(x,y,z) = *x*y + *y*z + *x*z #
E(x, y, z) = *x + *y + *z


# Applying Langrange as grad_V = L*grad_A + L*grad_E
var('L, L')
eqn_ = V.diff()[] == L*A.diff()[] + L*E.diff()[]
eqn_ = V.diff()[] == L*A.diff()[] + L*E.diff()[]
eqn_ = V.diff()[] == L*A.diff()[] + L*E.diff()[]
eqn_A = A(x, y, z) ==  #Area Constraint eqn
eqn_E = E(x, y, z) ==  #Total Edge Length Constraint eqn
solve([eqn_, eqn_, eqn_, eqn_A, eqn_E], x, y, z, L, L)",#mathtools,4,11129,"['V', 'x', 'y', 'z', 'x', 'y', 'z', 'A', 'and', 'E', 'were', 'found', 'by', 'keeping', 'variables', 'in', 'one', 'side', 'and', 'constant', 'in', 'other', 'side', 'in', 'the', 'constraint', 'equation', 'A', 'x', 'y', 'z', 'x', 'y', 'y', 'z', 'x', 'z', 'E', 'x', 'y', 'z', 'x', 'y', 'z', 'Applying', 'Langrange', 'as', 'grad_V', 'L', 'grad_A', 'L', 'grad_E', 'var', ""'L"", ""L'"", 'eqn_', 'V', 'diff', 'L', 'A', 'diff', 'L', 'E', 'diff', 'eqn_', 'V', 'diff', 'L', 'A', 'diff', 'L', 'E', 'diff', 'eqn_', 'V', 'diff', 'L', 'A', 'diff', 'L', 'E', 'diff', 'eqn_A', 'A', 'x', 'y', 'z', 'Area', 'Constraint', 'eqn', 'eqn_E', 'E', 'x', 'y', 'z', 'Total', 'Edge', 'Length', 'Constraint', 'eqn', 'solve', 'eqn_', 'eqn_', 'eqn_', 'eqn_A', 'eqn_E', 'x', 'y', 'z', 'L', 'L']","['v', 'x', 'y', 'z', 'x', 'y', 'z', 'a', 'and', 'e', 'were', 'found', 'by', 'keep', 'variabl', 'in', 'one', 'side', 'and', 'constant', 'in', 'other', 'side', 'in', 'the', 'constraint', 'equat', 'a', 'x', 'y', 'z', 'x', 'y', 'y', 'z', 'x', 'z', 'e', 'x', 'y', 'z', 'x', 'y', 'z', 'appli', 'langrang', 'as', 'grad_v', 'l', 'grad_a', 'l', 'grad_', 'var', ""'l"", ""l'"", 'eqn_', 'v', 'diff', 'l', 'a', 'diff', 'l', 'e', 'diff', 'eqn_', 'v', 'diff', 'l', 'a', 'diff', 'l', 'e', 'diff', 'eqn_', 'v', 'diff', 'l', 'a', 'diff', 'l', 'e', 'diff', 'eqn_a', 'a', 'x', 'y', 'z', 'area', 'constraint', 'eqn', 'eqn_', 'e', 'x', 'y', 'z', 'total', 'edg', 'length', 'constraint', 'eqn', 'solv', 'eqn_', 'eqn_', 'eqn_', 'eqn_a', 'eqn_', 'x', 'y', 'z', 'l', 'l']","['v', 'x', 'z', 'x', 'z', 'e', 'found', 'keep', 'variabl', 'one', 'side', 'constant', 'side', 'constraint', 'equat', 'x', 'z', 'x', 'z', 'x', 'z', 'e', 'x', 'z', 'x', 'z', 'appli', 'langrang', 'grad_v', 'l', 'grad_a', 'l', 'grad_', 'var', ""'l"", ""l'"", 'eqn_', 'v', 'diff', 'l', 'diff', 'l', 'e', 'diff', 'eqn_', 'v', 'diff', 'l', 'diff', 'l', 'e', 'diff', 'eqn_', 'v', 'diff', 'l', 'diff', 'l', 'e', 'diff', 'eqn_a', 'x', 'z', 'area', 'constraint', 'eqn', 'eqn_', 'e', 'x', 'z', 'total', 'edg', 'length', 'constraint', 'eqn', 'solv', 'eqn_', 'eqn_', 'eqn_', 'eqn_a', 'eqn_', 'x', 'z', 'l', 'l']",v x z x z e found keep variabl one side constant side constraint equat x z x z x z e x z x z appli langrang grad_v l grad_a l grad_ var 'l l' eqn_ v diff l diff l e diff eqn_ v diff l diff l e diff eqn_ v diff l diff l e diff eqn_a x z area constraint eqn eqn_ e x z total edg length constraint eqn solv eqn_ eqn_ eqn_ eqn_a eqn_ x z l l,mathtools,CS,CS111A
227352,"we define the function f(x,y)=x+y, such as xy= ==> y=/x
The function becomes f(x)=x+(/x) (the function is continuous and differentiable on the domain of definition IR-{}). f'(x)=-(/x^). We solve for f'(x)=-(/x^)= ==>x=sqrt() or x=-sqrt(). We take x=sqrt() because x and y are positive numbers. f''(x)=
f(sqrt())=sqrt()+(/sqrt())=sqrt().",#Diffapplication,3,10677,"['we', 'define', 'the', 'function', 'f', 'x', 'y', 'x', 'y', 'such', 'as', 'xy', 'y', 'x', 'The', 'function', 'becomes', 'f', 'x', 'x', 'x', 'the', 'function', 'is', 'continuous', 'and', 'differentiable', 'on', 'the', 'domain', 'of', 'definition', 'IR', ""f'"", 'x', 'x', 'We', 'solve', 'for', ""f'"", 'x', 'x', 'x', 'sqrt', 'or', 'x', 'sqrt', 'We', 'take', 'x', 'sqrt', 'because', 'x', 'and', 'y', 'are', 'positive', 'numbers', ""f''"", 'x', 'f', 'sqrt', 'sqrt', 'sqrt', 'sqrt']","['we', 'defin', 'the', 'function', 'f', 'x', 'y', 'x', 'y', 'such', 'as', 'xy', 'y', 'x', 'the', 'function', 'becom', 'f', 'x', 'x', 'x', 'the', 'function', 'is', 'continu', 'and', 'differenti', 'on', 'the', 'domain', 'of', 'definit', 'ir', ""f'"", 'x', 'x', 'we', 'solv', 'for', ""f'"", 'x', 'x', 'x', 'sqrt', 'or', 'x', 'sqrt', 'we', 'take', 'x', 'sqrt', 'becaus', 'x', 'and', 'y', 'are', 'posit', 'number', ""f'"", 'x', 'f', 'sqrt', 'sqrt', 'sqrt', 'sqrt']","['defin', 'function', 'f', 'x', 'x', 'xy', 'x', 'function', 'becom', 'f', 'x', 'x', 'x', 'function', 'continu', 'differenti', 'domain', 'definit', 'ir', ""f'"", 'x', 'x', 'solv', ""f'"", 'x', 'x', 'x', 'sqrt', 'x', 'sqrt', 'take', 'x', 'sqrt', 'becaus', 'x', 'posit', 'number', ""f'"", 'x', 'f', 'sqrt', 'sqrt', 'sqrt', 'sqrt']",defin function f x x xy x function becom f x x x function continu differenti domain definit ir f' x x solv f' x x x sqrt x sqrt take x sqrt becaus x posit number f' x f sqrt sqrt sqrt sqrt,diffapplication,CS,CS111A
235951,"Let x,y,z be the width, length, height of the box respectively 
Let surface area be defined by f(x,y,z) = xy, yz, zx
The constraint eqn would be g(x,y,z) = xyz (Vol = xyz = , taking the side without the constant since desired level curve can be set to g(x,y,z)=) 

LagRange multipler:
G_f = L G_g
<y + z, x + z, x + y> = L <yz, xz, xy>

The  equations are

Equating x/y/z(respectively)-components of G_f and L*G_g
y + z = Lyz 
x + z = Lxz
x + y = Lxy 
Constraint eqn:
xyz = 

Through sage (solve function): [x == , y == , z == , L == ]",#Diffapplication,3,10975,"['Let', 'x', 'y', 'z', 'be', 'the', 'width', 'length', 'height', 'of', 'the', 'box', 'respectively', 'Let', 'surface', 'area', 'be', 'defined', 'by', 'f', 'x', 'y', 'z', 'xy', 'yz', 'zx', 'The', 'constraint', 'eqn', 'would', 'be', 'g', 'x', 'y', 'z', 'xyz', 'Vol', 'xyz', 'taking', 'the', 'side', 'without', 'the', 'constant', 'since', 'desired', 'level', 'curve', 'can', 'be', 'set', 'to', 'g', 'x', 'y', 'z', 'LagRange', 'multipler', 'G_f', 'L', 'G_g', 'y', 'z', 'x', 'z', 'x', 'y', 'L', 'yz', 'xz', 'xy', 'The', 'equations', 'are', 'Equating', 'x', 'y', 'z', 'respectively', 'components', 'of', 'G_f', 'and', 'L', 'G_g', 'y', 'z', 'Lyz', 'x', 'z', 'Lxz', 'x', 'y', 'Lxy', 'Constraint', 'eqn', 'xyz', 'Through', 'sage', 'solve', 'function', 'x', 'y', 'z', 'L']","['let', 'x', 'y', 'z', 'be', 'the', 'width', 'length', 'height', 'of', 'the', 'box', 'respect', 'let', 'surfac', 'area', 'be', 'defin', 'by', 'f', 'x', 'y', 'z', 'xy', 'yz', 'zx', 'the', 'constraint', 'eqn', 'would', 'be', 'g', 'x', 'y', 'z', 'xyz', 'vol', 'xyz', 'take', 'the', 'side', 'without', 'the', 'constant', 'sinc', 'desir', 'level', 'curv', 'can', 'be', 'set', 'to', 'g', 'x', 'y', 'z', 'lagrang', 'multipl', 'g_f', 'l', 'g_g', 'y', 'z', 'x', 'z', 'x', 'y', 'l', 'yz', 'xz', 'xy', 'the', 'equat', 'are', 'equat', 'x', 'y', 'z', 'respect', 'compon', 'of', 'g_f', 'and', 'l', 'g_g', 'y', 'z', 'lyz', 'x', 'z', 'lxz', 'x', 'y', 'lxi', 'constraint', 'eqn', 'xyz', 'through', 'sage', 'solv', 'function', 'x', 'y', 'z', 'l']","['let', 'x', 'z', 'width', 'length', 'height', 'box', 'respect', 'let', 'surfac', 'area', 'defin', 'f', 'x', 'z', 'xy', 'yz', 'zx', 'constraint', 'eqn', 'g', 'x', 'z', 'xyz', 'vol', 'xyz', 'take', 'side', 'without', 'constant', 'sinc', 'desir', 'level', 'curv', 'set', 'g', 'x', 'z', 'lagrang', 'multipl', 'g_f', 'l', 'g_g', 'z', 'x', 'z', 'x', 'l', 'yz', 'xz', 'xy', 'equat', 'equat', 'x', 'z', 'respect', 'compon', 'g_f', 'l', 'g_g', 'z', 'lyz', 'x', 'z', 'lxz', 'x', 'lxi', 'constraint', 'eqn', 'xyz', 'sage', 'solv', 'function', 'x', 'z', 'l']",let x z width length height box respect let surfac area defin f x z xy yz zx constraint eqn g x z xyz vol xyz take side without constant sinc desir level curv set g x z lagrang multipl g_f l g_g z x z x l yz xz xy equat equat x z respect compon g_f l g_g z lyz x z lxz x lxi constraint eqn xyz sage solv function x z l,diffapplication,CS,CS111A
235958,"V = xyz =  cm^
so, xyz =  (i)

S = *xz + *yz + xy
grad_S = <z+y, z+x, x+y>

g(x, y, z) = xyz
grad_g = <yz, xz, xy>
Now, using Lagrange Multiplier grad_S = grad_g
z+y = Lyz (ii)
z + x = Lxz (iii)
x + y = Lxy (iv)

I created the funciton g based on the constraint, xyz == , where g(x, y,z) = xyz.",#Diffapplication,4,10976,"['V', 'xyz', 'cm', 'so', 'xyz', 'i', 'S', 'xz', 'yz', 'xy', 'grad_S', 'z', 'y', 'z', 'x', 'x', 'y', 'g', 'x', 'y', 'z', 'xyz', 'grad_g', 'yz', 'xz', 'xy', 'Now', 'using', 'Lagrange', 'Multiplier', 'grad_S', 'grad_g', 'z', 'y', 'Lyz', 'ii', 'z', 'x', 'Lxz', 'iii', 'x', 'y', 'Lxy', 'iv', 'I', 'created', 'the', 'funciton', 'g', 'based', 'on', 'the', 'constraint', 'xyz', 'where', 'g', 'x', 'y', 'z', 'xyz']","['v', 'xyz', 'cm', 'so', 'xyz', 'i', 's', 'xz', 'yz', 'xy', 'grad_', 'z', 'y', 'z', 'x', 'x', 'y', 'g', 'x', 'y', 'z', 'xyz', 'grad_g', 'yz', 'xz', 'xy', 'now', 'use', 'lagrang', 'multipli', 'grad_', 'grad_g', 'z', 'y', 'lyz', 'ii', 'z', 'x', 'lxz', 'iii', 'x', 'y', 'lxi', 'iv', 'i', 'creat', 'the', 'funciton', 'g', 'base', 'on', 'the', 'constraint', 'xyz', 'where', 'g', 'x', 'y', 'z', 'xyz']","['v', 'xyz', 'cm', 'xyz', 'xz', 'yz', 'xy', 'grad_', 'z', 'z', 'x', 'x', 'g', 'x', 'z', 'xyz', 'grad_g', 'yz', 'xz', 'xy', 'lagrang', 'multipli', 'grad_', 'grad_g', 'z', 'lyz', 'ii', 'z', 'x', 'lxz', 'iii', 'x', 'lxi', 'iv', 'creat', 'funciton', 'g', 'base', 'constraint', 'xyz', 'g', 'x', 'z', 'xyz']",v xyz cm xyz xz yz xy grad_ z z x x g x z xyz grad_g yz xz xy lagrang multipli grad_ grad_g z lyz ii z x lxz iii x lxi iv creat funciton g base constraint xyz g x z xyz,diffapplication,CS,CS111A
240080,"We first identify our objective function and our constraint equations:
V = abc
SA =  = ab + bc+ac; =ab+bc+ac
E==a+b+c; =a+b+c
From there we find the gradients:
<bc, ac, ab>
<b+c, a+c, a+b>
<,,>
We can then find the five equations needed to solve using the Lagrange multiplier method:
=ab+bc+ac
=a+b+c
(our constraint equations)
bc = L(b+c)+L
ac = L(a+c)+L
ab = L(a+b)+L

With these equations, we need to solve for a, b, c, L, and L to find the maximum and minimum.",#Diffapplication,4,11126,"['We', 'first', 'identify', 'our', 'objective', 'function', 'and', 'our', 'constraint', 'equations', 'V', 'abc', 'SA', 'ab', 'bc', 'ac', 'ab', 'bc', 'ac', 'E', 'a', 'b', 'c', 'a', 'b', 'c', 'From', 'there', 'we', 'find', 'the', 'gradients', 'bc', 'ac', 'ab', 'b', 'c', 'a', 'c', 'a', 'b', 'We', 'can', 'then', 'find', 'the', 'five', 'equations', 'needed', 'to', 'solve', 'using', 'the', 'Lagrange', 'multiplier', 'method', 'ab', 'bc', 'ac', 'a', 'b', 'c', 'our', 'constraint', 'equations', 'bc', 'L', 'b', 'c', 'L', 'ac', 'L', 'a', 'c', 'L', 'ab', 'L', 'a', 'b', 'L', 'With', 'these', 'equations', 'we', 'need', 'to', 'solve', 'for', 'a', 'b', 'c', 'L', 'and', 'L', 'to', 'find', 'the', 'maximum', 'and', 'minimum']","['we', 'first', 'identifi', 'our', 'object', 'function', 'and', 'our', 'constraint', 'equat', 'v', 'abc', 'sa', 'ab', 'bc', 'ac', 'ab', 'bc', 'ac', 'e', 'a', 'b', 'c', 'a', 'b', 'c', 'from', 'there', 'we', 'find', 'the', 'gradient', 'bc', 'ac', 'ab', 'b', 'c', 'a', 'c', 'a', 'b', 'we', 'can', 'then', 'find', 'the', 'five', 'equat', 'need', 'to', 'solv', 'use', 'the', 'lagrang', 'multipli', 'method', 'ab', 'bc', 'ac', 'a', 'b', 'c', 'our', 'constraint', 'equat', 'bc', 'l', 'b', 'c', 'l', 'ac', 'l', 'a', 'c', 'l', 'ab', 'l', 'a', 'b', 'l', 'with', 'these', 'equat', 'we', 'need', 'to', 'solv', 'for', 'a', 'b', 'c', 'l', 'and', 'l', 'to', 'find', 'the', 'maximum', 'and', 'minimum']","['first', 'identifi', 'object', 'function', 'constraint', 'equat', 'v', 'abc', 'sa', 'ab', 'bc', 'ac', 'ab', 'bc', 'ac', 'e', 'b', 'c', 'b', 'c', 'find', 'gradient', 'bc', 'ac', 'ab', 'b', 'c', 'c', 'b', 'find', 'five', 'equat', 'need', 'solv', 'lagrang', 'multipli', 'method', 'ab', 'bc', 'ac', 'b', 'c', 'constraint', 'equat', 'bc', 'l', 'b', 'c', 'l', 'ac', 'l', 'c', 'l', 'ab', 'l', 'b', 'l', 'equat', 'need', 'solv', 'b', 'c', 'l', 'l', 'find', 'maximum', 'minimum']",first identifi object function constraint equat v abc sa ab bc ac ab bc ac e b c b c find gradient bc ac ab b c c b find five equat need solv lagrang multipli method ab bc ac b c constraint equat bc l b c l ac l c l ab l b l equat need solv b c l l find maximum minimum,diffapplication,CS,CS111A
240087,"Let x,y,z be the sides of the box, then (xy+yz+zx)==>g(x,y,z)=xy+yz+zx= and (x+y+z)==>g(x,y,z)= x+y+z=. We need to maximize f(x,y,z)=xyz => Fro Lagrange multipliers, to find the maximum and minimum volume, x,y,z must satisfy that there are sclars L,L such that: gradient f = L*gradient g + L*gradient g. Thus, combined with the constaints we have  equations: 
x+y+z = 
xy+yz+zx = 
yz = L*(y+z) + L
zx = L*(z+x) + L
xy = L*(x+y) + L

(On a side note, x^+y^+z^=(x+y+z)^-(xy+yz+zx)=-, which means there are no solutions)",#Diffapplication,4,11127,"['Let', 'x', 'y', 'z', 'be', 'the', 'sides', 'of', 'the', 'box', 'then', 'xy', 'yz', 'zx', 'g', 'x', 'y', 'z', 'xy', 'yz', 'zx', 'and', 'x', 'y', 'z', 'g', 'x', 'y', 'z', 'x', 'y', 'z', 'We', 'need', 'to', 'maximize', 'f', 'x', 'y', 'z', 'xyz', 'Fro', 'Lagrange', 'multipliers', 'to', 'find', 'the', 'maximum', 'and', 'minimum', 'volume', 'x', 'y', 'z', 'must', 'satisfy', 'that', 'there', 'are', 'sclars', 'L', 'L', 'such', 'that', 'gradient', 'f', 'L', 'gradient', 'g', 'L', 'gradient', 'g', 'Thus', 'combined', 'with', 'the', 'constaints', 'we', 'have', 'equations', 'x', 'y', 'z', 'xy', 'yz', 'zx', 'yz', 'L', 'y', 'z', 'L', 'zx', 'L', 'z', 'x', 'L', 'xy', 'L', 'x', 'y', 'L', 'On', 'a', 'side', 'note', 'x', 'y', 'z', 'x', 'y', 'z', 'xy', 'yz', 'zx', 'which', 'means', 'there', 'are', 'no', 'solutions']","['let', 'x', 'y', 'z', 'be', 'the', 'side', 'of', 'the', 'box', 'then', 'xy', 'yz', 'zx', 'g', 'x', 'y', 'z', 'xy', 'yz', 'zx', 'and', 'x', 'y', 'z', 'g', 'x', 'y', 'z', 'x', 'y', 'z', 'we', 'need', 'to', 'maxim', 'f', 'x', 'y', 'z', 'xyz', 'fro', 'lagrang', 'multipli', 'to', 'find', 'the', 'maximum', 'and', 'minimum', 'volum', 'x', 'y', 'z', 'must', 'satisfi', 'that', 'there', 'are', 'sclar', 'l', 'l', 'such', 'that', 'gradient', 'f', 'l', 'gradient', 'g', 'l', 'gradient', 'g', 'thus', 'combin', 'with', 'the', 'constaint', 'we', 'have', 'equat', 'x', 'y', 'z', 'xy', 'yz', 'zx', 'yz', 'l', 'y', 'z', 'l', 'zx', 'l', 'z', 'x', 'l', 'xy', 'l', 'x', 'y', 'l', 'on', 'a', 'side', 'note', 'x', 'y', 'z', 'x', 'y', 'z', 'xy', 'yz', 'zx', 'which', 'mean', 'there', 'are', 'no', 'solut']","['let', 'x', 'z', 'side', 'box', 'xy', 'yz', 'zx', 'g', 'x', 'z', 'xy', 'yz', 'zx', 'x', 'z', 'g', 'x', 'z', 'x', 'z', 'need', 'maxim', 'f', 'x', 'z', 'xyz', 'fro', 'lagrang', 'multipli', 'find', 'maximum', 'minimum', 'volum', 'x', 'z', 'must', 'satisfi', 'sclar', 'l', 'l', 'gradient', 'f', 'l', 'gradient', 'g', 'l', 'gradient', 'g', 'thus', 'combin', 'constaint', 'equat', 'x', 'z', 'xy', 'yz', 'zx', 'yz', 'l', 'z', 'l', 'zx', 'l', 'z', 'x', 'l', 'xy', 'l', 'x', 'l', 'side', 'note', 'x', 'z', 'x', 'z', 'xy', 'yz', 'zx', 'mean', 'solut']",let x z side box xy yz zx g x z xy yz zx x z g x z x z need maxim f x z xyz fro lagrang multipli find maximum minimum volum x z must satisfi sclar l l gradient f l gradient g l gradient g thus combin constaint equat x z xy yz zx yz l z l zx l z x l xy l x l side note x z x z xy yz zx mean solut,diffapplication,CS,CS111A
294277,"Let the numbers be depicted by variables a, b:
a+b= - the sum of the numbers
Their product is: p=a*b
Next, we need to find constraints so that we can define their product in terms of only one variable. We can do that by defining a in terms of b given their sum:
a=-b

Next, the product will be a function of b and we sub in for a:
p(b)=(-b)*b 

The first derivative is (with the help of product rule):
p'(b)=(-b)'*b + (-b)*b' = -b+-b = -b

Setting the first derivative to  we get
-b==> b=

a=-b=-=> a=
Given this, the product is
p=a*b
p=*=
Their product is .",#Diffapplication,3,13751,"['Let', 'the', 'numbers', 'be', 'depicted', 'by', 'variables', 'a', 'b', 'a', 'b', 'the', 'sum', 'of', 'the', 'numbers', 'Their', 'product', 'is', 'p', 'a', 'b', 'Next', 'we', 'need', 'to', 'find', 'constraints', 'so', 'that', 'we', 'can', 'define', 'their', 'product', 'in', 'terms', 'of', 'only', 'one', 'variable', 'We', 'can', 'do', 'that', 'by', 'defining', 'a', 'in', 'terms', 'of', 'b', 'given', 'their', 'sum', 'a', 'b', 'Next', 'the', 'product', 'will', 'be', 'a', 'function', 'of', 'b', 'and', 'we', 'sub', 'in', 'for', 'a', 'p', 'b', 'b', 'b', 'The', 'first', 'derivative', 'is', 'with', 'the', 'help', 'of', 'product', 'rule', ""p'"", 'b', 'b', ""'"", 'b', 'b', ""b'"", 'b', 'b', 'b', 'Setting', 'the', 'first', 'derivative', 'to', 'we', 'get', 'b', 'b', 'a', 'b', 'a', 'Given', 'this', 'the', 'product', 'is', 'p', 'a', 'b', 'p', 'Their', 'product', 'is']","['let', 'the', 'number', 'be', 'depict', 'by', 'variabl', 'a', 'b', 'a', 'b', 'the', 'sum', 'of', 'the', 'number', 'their', 'product', 'is', 'p', 'a', 'b', 'next', 'we', 'need', 'to', 'find', 'constraint', 'so', 'that', 'we', 'can', 'defin', 'their', 'product', 'in', 'term', 'of', 'onli', 'one', 'variabl', 'we', 'can', 'do', 'that', 'by', 'defin', 'a', 'in', 'term', 'of', 'b', 'given', 'their', 'sum', 'a', 'b', 'next', 'the', 'product', 'will', 'be', 'a', 'function', 'of', 'b', 'and', 'we', 'sub', 'in', 'for', 'a', 'p', 'b', 'b', 'b', 'the', 'first', 'deriv', 'is', 'with', 'the', 'help', 'of', 'product', 'rule', ""p'"", 'b', 'b', ""'"", 'b', 'b', ""b'"", 'b', 'b', 'b', 'set', 'the', 'first', 'deriv', 'to', 'we', 'get', 'b', 'b', 'a', 'b', 'a', 'given', 'this', 'the', 'product', 'is', 'p', 'a', 'b', 'p', 'their', 'product', 'is']","['let', 'number', 'depict', 'variabl', 'b', 'b', 'sum', 'number', 'product', 'p', 'b', 'next', 'need', 'find', 'constraint', 'defin', 'product', 'term', 'onli', 'one', 'variabl', 'defin', 'term', 'b', 'given', 'sum', 'b', 'next', 'product', 'function', 'b', 'sub', 'p', 'b', 'b', 'b', 'first', 'deriv', 'help', 'product', 'rule', ""p'"", 'b', 'b', ""'"", 'b', 'b', ""b'"", 'b', 'b', 'b', 'set', 'first', 'deriv', 'get', 'b', 'b', 'b', 'given', 'product', 'p', 'b', 'p', 'product']",let number depict variabl b b sum number product p b next need find constraint defin product term onli one variabl defin term b given sum b next product function b sub p b b b first deriv help product rule p' b b ' b b b' b b b set first deriv get b b b given product p b p product,diffapplication,CS,CS111A
297853," dimensions: w=width,h=heigth,l=length.
Volume: V==whl -> g =whl
Surface area: (wh+hl+wl). Suppose the lid has surface area of wl, the surface area of the box of interest is f=wh+hl+wl.
Lagrange Multiplier: Grad f=LGradg
Therefore,  equations from that equation is:
h+l=hl
w+l=wl
h+w=wh
The last function is theconstraint equation: whl=.
The  equations from Grad f = LGradg is calculate by taking partial derivative of each variable in f and g, and set the vector equal to each other.the left side is partial derivative of w,h,l from f,and right side is partial derivative of w,h,l from g",#Diffapplication,4,14021,"['dimensions', 'w', 'width', 'h', 'heigth', 'l', 'length', 'Volume', 'V', 'whl', 'g', 'whl', 'Surface', 'area', 'wh', 'hl', 'wl', 'Suppose', 'the', 'lid', 'has', 'surface', 'area', 'of', 'wl', 'the', 'surface', 'area', 'of', 'the', 'box', 'of', 'interest', 'is', 'f', 'wh', 'hl', 'wl', 'Lagrange', 'Multiplier', 'Grad', 'f', 'LGradg', 'Therefore', 'equations', 'from', 'that', 'equation', 'is', 'h', 'l', 'hl', 'w', 'l', 'wl', 'h', 'w', 'wh', 'The', 'last', 'function', 'is', 'theconstraint', 'equation', 'whl', 'The', 'equations', 'from', 'Grad', 'f', 'LGradg', 'is', 'calculate', 'by', 'taking', 'partial', 'derivative', 'of', 'each', 'variable', 'in', 'f', 'and', 'g', 'and', 'set', 'the', 'vector', 'equal', 'to', 'each', 'other', 'the', 'left', 'side', 'is', 'partial', 'derivative', 'of', 'w', 'h', 'l', 'from', 'f', 'and', 'right', 'side', 'is', 'partial', 'derivative', 'of', 'w', 'h', 'l', 'from', 'g']","['dimens', 'w', 'width', 'h', 'heigth', 'l', 'length', 'volum', 'v', 'whl', 'g', 'whl', 'surfac', 'area', 'wh', 'hl', 'wl', 'suppos', 'the', 'lid', 'has', 'surfac', 'area', 'of', 'wl', 'the', 'surfac', 'area', 'of', 'the', 'box', 'of', 'interest', 'is', 'f', 'wh', 'hl', 'wl', 'lagrang', 'multipli', 'grad', 'f', 'lgradg', 'therefor', 'equat', 'from', 'that', 'equat', 'is', 'h', 'l', 'hl', 'w', 'l', 'wl', 'h', 'w', 'wh', 'the', 'last', 'function', 'is', 'theconstraint', 'equat', 'whl', 'the', 'equat', 'from', 'grad', 'f', 'lgradg', 'is', 'calcul', 'by', 'take', 'partial', 'deriv', 'of', 'each', 'variabl', 'in', 'f', 'and', 'g', 'and', 'set', 'the', 'vector', 'equal', 'to', 'each', 'other', 'the', 'left', 'side', 'is', 'partial', 'deriv', 'of', 'w', 'h', 'l', 'from', 'f', 'and', 'right', 'side', 'is', 'partial', 'deriv', 'of', 'w', 'h', 'l', 'from', 'g']","['dimens', 'w', 'width', 'h', 'heigth', 'l', 'length', 'volum', 'v', 'whl', 'g', 'whl', 'surfac', 'area', 'wh', 'hl', 'wl', 'suppos', 'lid', 'surfac', 'area', 'wl', 'surfac', 'area', 'box', 'interest', 'f', 'wh', 'hl', 'wl', 'lagrang', 'multipli', 'grad', 'f', 'lgradg', 'therefor', 'equat', 'equat', 'h', 'l', 'hl', 'w', 'l', 'wl', 'h', 'w', 'wh', 'last', 'function', 'theconstraint', 'equat', 'whl', 'equat', 'grad', 'f', 'lgradg', 'calcul', 'take', 'partial', 'deriv', 'variabl', 'f', 'g', 'set', 'vector', 'equal', 'left', 'side', 'partial', 'deriv', 'w', 'h', 'l', 'f', 'right', 'side', 'partial', 'deriv', 'w', 'h', 'l', 'g']",dimens w width h heigth l length volum v whl g whl surfac area wh hl wl suppos lid surfac area wl surfac area box interest f wh hl wl lagrang multipli grad f lgradg therefor equat equat h l hl w l wl h w wh last function theconstraint equat whl equat grad f lgradg calcul take partial deriv variabl f g set vector equal left side partial deriv w h l f right side partial deriv w h l g,diffapplication,CS,CS111A
233660,"The Hessian second derivative test is f_xx * f_yy - f_xy^ for continous second derivatives because f_xy == f_yx. In this case the value is  *  - ^ =  which is positive. Also f_xx is a positive value. As D >  and f_xx > , the critical point is a local minima. It also means that the graph of f concaves up. This is also confirmed by both f_xx >  and f_yy >  which means that the graph of f concaves up.",#Difftheory,4,10908,"['The', 'Hessian', 'second', 'derivative', 'test', 'is', 'f_xx', 'f_yy', 'f_xy', 'for', 'continous', 'second', 'derivatives', 'because', 'f_xy', 'f_yx', 'In', 'this', 'case', 'the', 'value', 'is', 'which', 'is', 'positive', 'Also', 'f_xx', 'is', 'a', 'positive', 'value', 'As', 'D', 'and', 'f_xx', 'the', 'critical', 'point', 'is', 'a', 'local', 'minima', 'It', 'also', 'means', 'that', 'the', 'graph', 'of', 'f', 'concaves', 'up', 'This', 'is', 'also', 'confirmed', 'by', 'both', 'f_xx', 'and', 'f_yy', 'which', 'means', 'that', 'the', 'graph', 'of', 'f', 'concaves', 'up']","['the', 'hessian', 'second', 'deriv', 'test', 'is', 'f_xx', 'f_yy', 'f_xi', 'for', 'contin', 'second', 'deriv', 'becaus', 'f_xi', 'f_yx', 'in', 'this', 'case', 'the', 'valu', 'is', 'which', 'is', 'posit', 'also', 'f_xx', 'is', 'a', 'posit', 'valu', 'as', 'd', 'and', 'f_xx', 'the', 'critic', 'point', 'is', 'a', 'local', 'minima', 'it', 'also', 'mean', 'that', 'the', 'graph', 'of', 'f', 'concav', 'up', 'this', 'is', 'also', 'confirm', 'by', 'both', 'f_xx', 'and', 'f_yy', 'which', 'mean', 'that', 'the', 'graph', 'of', 'f', 'concav', 'up']","['hessian', 'second', 'deriv', 'test', 'f_xx', 'f_yy', 'f_xi', 'contin', 'second', 'deriv', 'becaus', 'f_xi', 'f_yx', 'case', 'valu', 'posit', 'f_xx', 'posit', 'valu', 'f_xx', 'critic', 'point', 'local', 'minima', 'mean', 'graph', 'f', 'concav', 'confirm', 'f_xx', 'f_yy', 'mean', 'graph', 'f', 'concav']",hessian second deriv test f_xx f_yy f_xi contin second deriv becaus f_xi f_yx case valu posit f_xx posit valu f_xx critic point local minima mean graph f concav confirm f_xx f_yy mean graph f concav,difftheory,CS,CS111A
250178,"Ok, so I take the integral of x^+ over the interval [,] and divide by the size of the interval ==> [(^)/ +()] - [+] = /. Now to divide by the width: /. We lost some money and we made some money this quarter. This value is how much we",#Inttheory,4,11528,"['Ok', 'so', 'I', 'take', 'the', 'integral', 'of', 'x', 'over', 'the', 'interval', 'and', 'divide', 'by', 'the', 'size', 'of', 'the', 'interval', 'Now', 'to', 'divide', 'by', 'the', 'width', 'We', 'lost', 'some', 'money', 'and', 'we', 'made', 'some', 'money', 'this', 'quarter', 'This', 'value', 'is', 'how', 'much', 'we']","['ok', 'so', 'i', 'take', 'the', 'integr', 'of', 'x', 'over', 'the', 'interv', 'and', 'divid', 'by', 'the', 'size', 'of', 'the', 'interv', 'now', 'to', 'divid', 'by', 'the', 'width', 'we', 'lost', 'some', 'money', 'and', 'we', 'made', 'some', 'money', 'this', 'quarter', 'this', 'valu', 'is', 'how', 'much', 'we']","['ok', 'take', 'integr', 'x', 'interv', 'divid', 'size', 'interv', 'divid', 'width', 'lost', 'money', 'made', 'money', 'quarter', 'valu', 'much']",ok take integr x interv divid size interv divid width lost money made money quarter valu much,inttheory,CS,CS111A
250185,"To find the average value in the interval, I will take the definite integral and divided with the whith
anti derivative of f(x) is ==> ((x^)/)+x+C
In the interval of |,| ==> (/)+-=.
./=. is the avrage",#Inttheory,3,11529,"['To', 'find', 'the', 'average', 'value', 'in', 'the', 'interval', 'I', 'will', 'take', 'the', 'definite', 'integral', 'and', 'divided', 'with', 'the', 'whith', 'anti', 'derivative', 'of', 'f', 'x', 'is', 'x', 'x', 'C', 'In', 'the', 'interval', 'of', 'is', 'the', 'avrage']","['to', 'find', 'the', 'averag', 'valu', 'in', 'the', 'interv', 'i', 'will', 'take', 'the', 'definit', 'integr', 'and', 'divid', 'with', 'the', 'whith', 'anti', 'deriv', 'of', 'f', 'x', 'is', 'x', 'x', 'c', 'in', 'the', 'interv', 'of', 'is', 'the', 'avrag']","['find', 'averag', 'valu', 'interv', 'take', 'definit', 'integr', 'divid', 'whith', 'anti', 'deriv', 'f', 'x', 'x', 'x', 'c', 'interv', 'avrag']",find averag valu interv take definit integr divid whith anti deriv f x x x c interv avrag,inttheory,CS,CS111A
251230,"integrate with x first ==> (x^)/ ==> ^ /  - ^ /  = /. 

integrate the above / through y ==>  (/)y ===> (/)() - (/)() = /.",#Inttheory,2,11588,"['integrate', 'with', 'x', 'first', 'x', 'integrate', 'the', 'above', 'through', 'y', 'y']","['integr', 'with', 'x', 'first', 'x', 'integr', 'the', 'abov', 'through', 'y', 'y']","['integr', 'x', 'first', 'x', 'integr', 'abov']",integr x first x integr abov,inttheory,CS,CS111A
251230,int(int(x^+y^)dy)dx  ==> int(x^ + )dx ==> += cubic units. If first constructed a double integral over z with respect to x and y. I then integrated with respect to y and evaluated from  to . I then integrated with respect to x in the sam,#Inttheory,3,11588,"['int', 'int', 'x', 'y', 'dy', 'dx', 'int', 'x', 'dx', 'cubic', 'units', 'If', 'first', 'constructed', 'a', 'double', 'integral', 'over', 'z', 'with', 'respect', 'to', 'x', 'and', 'y', 'I', 'then', 'integrated', 'with', 'respect', 'to', 'y', 'and', 'evaluated', 'from', 'to', 'I', 'then', 'integrated', 'with', 'respect', 'to', 'x', 'in', 'the', 'sam']","['int', 'int', 'x', 'y', 'dy', 'dx', 'int', 'x', 'dx', 'cubic', 'unit', 'if', 'first', 'construct', 'a', 'doubl', 'integr', 'over', 'z', 'with', 'respect', 'to', 'x', 'and', 'y', 'i', 'then', 'integr', 'with', 'respect', 'to', 'y', 'and', 'evalu', 'from', 'to', 'i', 'then', 'integr', 'with', 'respect', 'to', 'x', 'in', 'the', 'sam']","['int', 'int', 'x', 'dy', 'dx', 'int', 'x', 'dx', 'cubic', 'unit', 'first', 'construct', 'doubl', 'integr', 'z', 'respect', 'x', 'integr', 'respect', 'evalu', 'integr', 'respect', 'x', 'sam']",int int x dy dx int x dx cubic unit first construct doubl integr z respect x integr respect evalu integr respect x sam,inttheory,CS,CS111A
251233,"It is an example of double integral. It can be expressed as:
integral[-,](integral[-,](-x-y))
I will start solving the integrals one by one starting from the inside. Inside one targets x and outside one target y.(it depends how you write down the problem) 
integral[-,]((x-(x^)/-yx)[-,]) ==> integral[-,]((-()/-y)-(-+/-y)[-,])
This is fter the first integral
integral[-,]()==> y [-,]=-(-)=",#Inttheory,3,11589,"['It', 'is', 'an', 'example', 'of', 'double', 'integral', 'It', 'can', 'be', 'expressed', 'as', 'integral', 'integral', 'x', 'y', 'I', 'will', 'start', 'solving', 'the', 'integrals', 'one', 'by', 'one', 'starting', 'from', 'the', 'inside', 'Inside', 'one', 'targets', 'x', 'and', 'outside', 'one', 'target', 'y', 'it', 'depends', 'how', 'you', 'write', 'down', 'the', 'problem', 'integral', 'x', 'x', 'yx', 'integral', 'y', 'y', 'This', 'is', 'fter', 'the', 'first', 'integral', 'integral', 'y']","['it', 'is', 'an', 'exampl', 'of', 'doubl', 'integr', 'it', 'can', 'be', 'express', 'as', 'integr', 'integr', 'x', 'y', 'i', 'will', 'start', 'solv', 'the', 'integr', 'one', 'by', 'one', 'start', 'from', 'the', 'insid', 'insid', 'one', 'target', 'x', 'and', 'outsid', 'one', 'target', 'y', 'it', 'depend', 'how', 'you', 'write', 'down', 'the', 'problem', 'integr', 'x', 'x', 'yx', 'integr', 'y', 'y', 'this', 'is', 'fter', 'the', 'first', 'integr', 'integr', 'y']","['exampl', 'doubl', 'integr', 'express', 'integr', 'integr', 'x', 'start', 'solv', 'integr', 'one', 'one', 'start', 'insid', 'insid', 'one', 'target', 'x', 'outsid', 'one', 'target', 'depend', 'write', 'problem', 'integr', 'x', 'x', 'yx', 'integr', 'fter', 'first', 'integr', 'integr']",exampl doubl integr express integr integr x start solv integr one one start insid insid one target x outsid one target depend write problem integr x x yx integr fter first integr integr,inttheory,CS,CS111A
274276,". To multiply A*B, it must be true that ncol(A) == nrow(B).
. Similarly, to multiply B*A it must be true that ncol(B) == nrow(A).
The question, then, become whether ncol(B) == nrow(A) --> TRUE, given that col(A) == nrow(B) --> TRUE.
The answer to which is no.

For instance, consider .a) and .b) in pre-class study guide.",#TheoreticalTools,3,12752,"['To', 'multiply', 'A', 'B', 'it', 'must', 'be', 'true', 'that', 'ncol', 'A', 'nrow', 'B', 'Similarly', 'to', 'multiply', 'B', 'A', 'it', 'must', 'be', 'true', 'that', 'ncol', 'B', 'nrow', 'A', 'The', 'question', 'then', 'become', 'whether', 'ncol', 'B', 'nrow', 'A', 'TRUE', 'given', 'that', 'col', 'A', 'nrow', 'B', 'TRUE', 'The', 'answer', 'to', 'which', 'is', 'no', 'For', 'instance', 'consider', 'a', 'and', 'b', 'in', 'pre', 'class', 'study', 'guide']","['to', 'multipli', 'a', 'b', 'it', 'must', 'be', 'true', 'that', 'ncol', 'a', 'nrow', 'b', 'similar', 'to', 'multipli', 'b', 'a', 'it', 'must', 'be', 'true', 'that', 'ncol', 'b', 'nrow', 'a', 'the', 'question', 'then', 'becom', 'whether', 'ncol', 'b', 'nrow', 'a', 'true', 'given', 'that', 'col', 'a', 'nrow', 'b', 'true', 'the', 'answer', 'to', 'which', 'is', 'no', 'for', 'instanc', 'consid', 'a', 'and', 'b', 'in', 'pre', 'class', 'studi', 'guid']","['multipli', 'b', 'must', 'true', 'ncol', 'nrow', 'b', 'similar', 'multipli', 'b', 'must', 'true', 'ncol', 'b', 'nrow', 'question', 'becom', 'whether', 'ncol', 'b', 'nrow', 'true', 'given', 'col', 'nrow', 'b', 'true', 'answer', 'instanc', 'consid', 'b', 'pre', 'class', 'studi', 'guid']",multipli b must true ncol nrow b similar multipli b must true ncol b nrow question becom whether ncol b nrow true given col nrow b true answer instanc consid b pre class studi guid,theoreticaltools,CS,CS111B
297176,"r=
According to the definitions of rank (no. of Linearly independent rows/columns)

Dim(Col(A))=Dim(Row(A))=

According to the formula:

Dim(null(A))=n-r=-=
Dim(null(A^T))=m-r=-=

Sum=+++==m+n or the sum of no of rows & columns.",#TheoreticalTools,4,13949,"['r', 'According', 'to', 'the', 'definitions', 'of', 'rank', 'no', 'of', 'Linearly', 'independent', 'rows', 'columns', 'Dim', 'Col', 'A', 'Dim', 'Row', 'A', 'According', 'to', 'the', 'formula', 'Dim', 'null', 'A', 'n', 'r', 'Dim', 'null', 'A', 'T', 'm', 'r', 'Sum', 'm', 'n', 'or', 'the', 'sum', 'of', 'no', 'of', 'rows', 'columns']","['r', 'accord', 'to', 'the', 'definit', 'of', 'rank', 'no', 'of', 'linear', 'independ', 'row', 'column', 'dim', 'col', 'a', 'dim', 'row', 'a', 'accord', 'to', 'the', 'formula', 'dim', 'null', 'a', 'n', 'r', 'dim', 'null', 'a', 't', 'm', 'r', 'sum', 'm', 'n', 'or', 'the', 'sum', 'of', 'no', 'of', 'row', 'column']","['r', 'accord', 'definit', 'rank', 'linear', 'independ', 'row', 'column', 'dim', 'col', 'dim', 'row', 'accord', 'formula', 'dim', 'null', 'n', 'r', 'dim', 'null', 'r', 'sum', 'n', 'sum', 'row', 'column']",r accord definit rank linear independ row column dim col dim row accord formula dim null n r dim null r sum n sum row column,theoreticaltools,CS,CS111B
293747,"Let's consider v = <,,> and w = <,,)

T(v) = 
T(w) = .

==> T(v) + T(w) = .

T(v+w) = T(+,+,+) = T(, , ) = .

==> T(v+w) = 

T(v) + T(w) is not equal to T(v+w), therefore this is not a linear map. 

We could also consider the scalar property. 

k(T(w)) = k() = k.

T(kw) = T(k,k,k) = k.

Although the scalar property holds, the first property does not. Therefore, this is not a linear map.",#Transformations,4,13710,"[""Let's"", 'consider', 'v', 'and', 'w', 'T', 'v', 'T', 'w', 'T', 'v', 'T', 'w', 'T', 'v', 'w', 'T', 'T', 'T', 'v', 'w', 'T', 'v', 'T', 'w', 'is', 'not', 'equal', 'to', 'T', 'v', 'w', 'therefore', 'this', 'is', 'not', 'a', 'linear', 'map', 'We', 'could', 'also', 'consider', 'the', 'scalar', 'property', 'k', 'T', 'w', 'k', 'k', 'T', 'kw', 'T', 'k', 'k', 'k', 'k', 'Although', 'the', 'scalar', 'property', 'holds', 'the', 'first', 'property', 'does', 'not', 'Therefore', 'this', 'is', 'not', 'a', 'linear', 'map']","['let', 'consid', 'v', 'and', 'w', 't', 'v', 't', 'w', 't', 'v', 't', 'w', 't', 'v', 'w', 't', 't', 't', 'v', 'w', 't', 'v', 't', 'w', 'is', 'not', 'equal', 'to', 't', 'v', 'w', 'therefor', 'this', 'is', 'not', 'a', 'linear', 'map', 'we', 'could', 'also', 'consid', 'the', 'scalar', 'properti', 'k', 't', 'w', 'k', 'k', 't', 'kw', 't', 'k', 'k', 'k', 'k', 'although', 'the', 'scalar', 'properti', 'hold', 'the', 'first', 'properti', 'doe', 'not', 'therefor', 'this', 'is', 'not', 'a', 'linear', 'map']","['let', 'consid', 'v', 'w', 'v', 'w', 'v', 'w', 'v', 'w', 'v', 'w', 'v', 'w', 'equal', 'v', 'w', 'therefor', 'linear', 'map', 'consid', 'scalar', 'properti', 'k', 'w', 'k', 'k', 'kw', 'k', 'k', 'k', 'k', 'although', 'scalar', 'properti', 'hold', 'first', 'properti', 'doe', 'therefor', 'linear', 'map']",let consid v w v w v w v w v w v w equal v w therefor linear map consid scalar properti k w k k kw k k k k although scalar properti hold first properti doe therefor linear map,transformationapplication,CS,CS111B
297148,"a x matrix, A, having rank  suggest that there are  pivot columns in A, or dim(Col(A)) = ; we also know that dim(Col(A))  == dim(Row(A)) , thus dim(Row(A)) = ;
since dim(Col(A)) + dim(N(A^T)) = (both are subspaces of R^), dim(N(A^T))  = - = ;
since dim(Row(A)) + dim(N(A)) =  (both are subspaces of R^), dim(N(A)) =  -  = ; 
the sum of all four dimensions is +++ =  = + (the dimension of the x matrix)",#Transformations,4,13945,"['a', 'x', 'matrix', 'A', 'having', 'rank', 'suggest', 'that', 'there', 'are', 'pivot', 'columns', 'in', 'A', 'or', 'dim', 'Col', 'A', 'we', 'also', 'know', 'that', 'dim', 'Col', 'A', 'dim', 'Row', 'A', 'thus', 'dim', 'Row', 'A', 'since', 'dim', 'Col', 'A', 'dim', 'N', 'A', 'T', 'both', 'are', 'subspaces', 'of', 'R', 'dim', 'N', 'A', 'T', 'since', 'dim', 'Row', 'A', 'dim', 'N', 'A', 'both', 'are', 'subspaces', 'of', 'R', 'dim', 'N', 'A', 'the', 'sum', 'of', 'all', 'four', 'dimensions', 'is', 'the', 'dimension', 'of', 'the', 'x', 'matrix']","['a', 'x', 'matrix', 'a', 'have', 'rank', 'suggest', 'that', 'there', 'are', 'pivot', 'column', 'in', 'a', 'or', 'dim', 'col', 'a', 'we', 'also', 'know', 'that', 'dim', 'col', 'a', 'dim', 'row', 'a', 'thus', 'dim', 'row', 'a', 'sinc', 'dim', 'col', 'a', 'dim', 'n', 'a', 't', 'both', 'are', 'subspac', 'of', 'r', 'dim', 'n', 'a', 't', 'sinc', 'dim', 'row', 'a', 'dim', 'n', 'a', 'both', 'are', 'subspac', 'of', 'r', 'dim', 'n', 'a', 'the', 'sum', 'of', 'all', 'four', 'dimens', 'is', 'the', 'dimens', 'of', 'the', 'x', 'matrix']","['x', 'matrix', 'rank', 'suggest', 'pivot', 'column', 'dim', 'col', 'know', 'dim', 'col', 'dim', 'row', 'thus', 'dim', 'row', 'sinc', 'dim', 'col', 'dim', 'n', 'subspac', 'r', 'dim', 'n', 'sinc', 'dim', 'row', 'dim', 'n', 'subspac', 'r', 'dim', 'n', 'sum', 'four', 'dimens', 'dimens', 'x', 'matrix']",x matrix rank suggest pivot column dim col know dim col dim row thus dim row sinc dim col dim n subspac r dim n sinc dim row dim n subspac r dim n sum four dimens dimens x matrix,transformationapplication,CS,CS111B
303417,"First we find the coordinates of the basis, by augmenting the basis with the vector ,, ==> A = matrix([[, ,,],[,,,],[,-,,]]).rref(), which gives us the coordinates (,,). Then, we",#Transformations,3,14344,"['First', 'we', 'find', 'the', 'coordinates', 'of', 'the', 'basis', 'by', 'augmenting', 'the', 'basis', 'with', 'the', 'vector', 'A', 'matrix', 'rref', 'which', 'gives', 'us', 'the', 'coordinates', 'Then', 'we']","['first', 'we', 'find', 'the', 'coordin', 'of', 'the', 'basi', 'by', 'augment', 'the', 'basi', 'with', 'the', 'vector', 'a', 'matrix', 'rref', 'which', 'give', 'us', 'the', 'coordin', 'then', 'we']","['first', 'find', 'coordin', 'basi', 'augment', 'basi', 'vector', 'matrix', 'rref', 'give', 'us', 'coordin']",first find coordin basi augment basi vector matrix rref give us coordin,transformationapplication,CS,CS111B
305212,"B = PAQ ==> we have (Transform S'; B) = (S-->S'; P)(Transform S)(S'-->S; Q). Thus, starting with S', Q moves it to S, A transforms it in S, and P brings it back to S'.",#Transformations,3,14436,"['B', 'PAQ', 'we', 'have', 'Transform', ""S'"", 'B', 'S', ""S'"", 'P', 'Transform', 'S', ""S'"", 'S', 'Q', 'Thus', 'starting', 'with', ""S'"", 'Q', 'moves', 'it', 'to', 'S', 'A', 'transforms', 'it', 'in', 'S', 'and', 'P', 'brings', 'it', 'back', 'to', ""S'""]","['b', 'paq', 'we', 'have', 'transform', ""s'"", 'b', 's', ""s'"", 'p', 'transform', 's', ""s'"", 's', 'q', 'thus', 'start', 'with', ""s'"", 'q', 'move', 'it', 'to', 's', 'a', 'transform', 'it', 'in', 's', 'and', 'p', 'bring', 'it', 'back', 'to', ""s'""]","['b', 'paq', 'transform', ""s'"", 'b', ""s'"", 'p', 'transform', ""s'"", 'q', 'thus', 'start', ""s'"", 'q', 'move', 'transform', 'p', 'bring', 'back', ""s'""]",b paq transform s' b s' p transform s' q thus start s' q move transform p bring back s',transformationapplication,CS,CS111B
318008,"It can because it will have  eigenvectors. If we have a matrix S where the column vectors are equal to the eigenvectors:
S = [v | v] (for v, v ... vn ==> eigenvectors for the given eigenvalues)
Then supposing our initial x matrix is A, we have:
(S^-)AS = [ c    ]
                    [   c ]
So A is diagonalizable, and the result of   (S^-)AS is a diagonal matrix with the eigenvalues in the main diagonal.",#Transformations,3,15105,"['It', 'can', 'because', 'it', 'will', 'have', 'eigenvectors', 'If', 'we', 'have', 'a', 'matrix', 'S', 'where', 'the', 'column', 'vectors', 'are', 'equal', 'to', 'the', 'eigenvectors', 'S', 'v', 'v', 'for', 'v', 'v', 'vn', 'eigenvectors', 'for', 'the', 'given', 'eigenvalues', 'Then', 'supposing', 'our', 'initial', 'x', 'matrix', 'is', 'A', 'we', 'have', 'S', 'AS', 'c', 'c', 'So', 'A', 'is', 'diagonalizable', 'and', 'the', 'result', 'of', 'S', 'AS', 'is', 'a', 'diagonal', 'matrix', 'with', 'the', 'eigenvalues', 'in', 'the', 'main', 'diagonal']","['it', 'can', 'becaus', 'it', 'will', 'have', 'eigenvector', 'if', 'we', 'have', 'a', 'matrix', 's', 'where', 'the', 'column', 'vector', 'are', 'equal', 'to', 'the', 'eigenvector', 's', 'v', 'v', 'for', 'v', 'v', 'vn', 'eigenvector', 'for', 'the', 'given', 'eigenvalu', 'then', 'suppos', 'our', 'initi', 'x', 'matrix', 'is', 'a', 'we', 'have', 's', 'as', 'c', 'c', 'so', 'a', 'is', 'diagonaliz', 'and', 'the', 'result', 'of', 's', 'as', 'is', 'a', 'diagon', 'matrix', 'with', 'the', 'eigenvalu', 'in', 'the', 'main', 'diagon']","['becaus', 'eigenvector', 'matrix', 'column', 'vector', 'equal', 'eigenvector', 'v', 'v', 'v', 'v', 'vn', 'eigenvector', 'given', 'eigenvalu', 'suppos', 'initi', 'x', 'matrix', 'c', 'c', 'diagonaliz', 'result', 'diagon', 'matrix', 'eigenvalu', 'main', 'diagon']",becaus eigenvector matrix column vector equal eigenvector v v v v vn eigenvector given eigenvalu suppos initi x matrix c c diagonaliz result diagon matrix eigenvalu main diagon,transformationapplication,CS,CS111B
318034,"When we raise a matrix to a power, the eigenvectors are maintained. The eigenvectors, however, are raised to the power that the matrix is raised to. E.g. A^ ==> \lambda^ ==> evec_old = evec_new. This could also work in the opposite direction, so finding roots of a matrix may entail finding the roots of the eigenvectors.",#Transformations,3,15108,"['When', 'we', 'raise', 'a', 'matrix', 'to', 'a', 'power', 'the', 'eigenvectors', 'are', 'maintained', 'The', 'eigenvectors', 'however', 'are', 'raised', 'to', 'the', 'power', 'that', 'the', 'matrix', 'is', 'raised', 'to', 'E', 'g', 'A', 'lambda', 'evec_old', 'evec_new', 'This', 'could', 'also', 'work', 'in', 'the', 'opposite', 'direction', 'so', 'finding', 'roots', 'of', 'a', 'matrix', 'may', 'entail', 'finding', 'the', 'roots', 'of', 'the', 'eigenvectors']","['when', 'we', 'rais', 'a', 'matrix', 'to', 'a', 'power', 'the', 'eigenvector', 'are', 'maintain', 'the', 'eigenvector', 'howev', 'are', 'rais', 'to', 'the', 'power', 'that', 'the', 'matrix', 'is', 'rais', 'to', 'e', 'g', 'a', 'lambda', 'evec_old', 'evec_new', 'this', 'could', 'also', 'work', 'in', 'the', 'opposit', 'direct', 'so', 'find', 'root', 'of', 'a', 'matrix', 'may', 'entail', 'find', 'the', 'root', 'of', 'the', 'eigenvector']","['rais', 'matrix', 'power', 'eigenvector', 'maintain', 'eigenvector', 'howev', 'rais', 'power', 'matrix', 'rais', 'e', 'g', 'lambda', 'evec_old', 'evec_new', 'work', 'opposit', 'direct', 'find', 'root', 'matrix', 'may', 'entail', 'find', 'root', 'eigenvector']",rais matrix power eigenvector maintain eigenvector howev rais power matrix rais e g lambda evec_old evec_new work opposit direct find root matrix may entail find root eigenvector,transformationapplication,CS,CS111B
